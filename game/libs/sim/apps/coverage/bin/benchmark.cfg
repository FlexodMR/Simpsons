###############################################################################
#
#  Syntax:
#
#  ==== Top-level Commands ====
#
#  BENCHMARK "<benchmark name>" [INHERIT "<benchmark to inherit parameters from>"] [ADDTOALL]
#      [UNDEF "<parameter name>"]
#      [<parameter type> "<parameter name>" <parameter values>]
#      ...
#      [<parameter type> "<parameter name>" <parameter values>]
#  END
#    This command creates a benchmark, based on the parameters listed. It can
#    take a number of keywords that modify it's behaviour :
#      INHERIT :
#        Specifies a benchmark to copy a set of parameters from. The benchmark
#        being inherited from must be defined before the one inheriting it.
#      ADDTOALL :
#        This will add all of this benchmark's parameters to every other
#        benchmark that has been defined up to this point. Note that this
#        is a bit of a hack, only created to make the averaging of parameters
#        easier.
#      UNDEF :
#        Use this to remove a parameter that you may have inherited from
#        another benchmark but don't want in this one.
#      <parameter type> :
#        Creates a parameter of the specified type. See section below for
#        the available types.
#
#  ENABLE "<benchmark name>" ["<benchmark name>" ["<benchmark name>" [...]]]
#    Used to specify which benchmark(s) should be run. There can be several
#    of these statements, a benchmark specified in any of them will be run.
#    A value of "all" will enable all benchmarks
#
#  DISABLE "<benchmark name>" ["<benchmark name>" ["<benchmark name>" [...]]]
#    This command will remove the specified benchmark from the list
#    it will run. Usully used to remove base classes, etc.
#    A value of "all" will disable all benchmarks
#
#  P3DLOAD "<pure3d filename>" ["<pure3d filename>" ["<pure3d filename>" [...]]]
#    Loads the specified Pure3d file(s) at application startup.
#
#    <benchmark name> :
#      The english-readable name of a benchmarking test.
#    <benchmark to inherit parameters from> :
#      The english-readable name of the benchmark to copy a default set of
#      parameters from. The benchmark being inherited from must be defined
#      before the one inheriting it.
#    <parameter name> :
#      The english-readable name of the benchmark parameter. A parameter
#      is a variable that will be tested during the benchmarking process,
#      and all possible permutations of all parameters will be tested (it
#      will cycle through all possible combinations).
#    <parameter type> :
#      The name describing the possible values that the parameter can hold.
#      Possible values are: INT, INTRANGE, FLOAT, FLOATRANGE, BOOL, and STRING.
#    <parameter values> :
#      The actual values that a parameter will cycle through. Valid values
#      vary depending on the parameter type used.
#    <pure3d filename> :
#      The name of a pure3d file (ex: benchmarkobjs.p3d)
#
#  ==== Benchmark Parameter Types ====
#
#  The arguments used when creating the various parameters depends on what
#  parameter is being created. Following is the list of parameters with
#  the arguments for that specific type:
#
#    INT "name" <list of integers>
#    INTRANGE "name" <start of range> <end of range> <step value>
#    FLOAT "name" <list of floats>
#    FLOATRANGE "name" <start of range> <end of range> <step value>
#    BOOL "name" < ** no arguments ** >
#    STRING "name" <list of strings>
#
#  Here are examples for each parameter type:
#
#    INT "Example Parameter" 1 2 4 5 8 39 51 200
#    INTRANGE "Example Parameter" 1 20 2
#    FLOAT "Example Parameter" 0.1 0.2 0.345 1.0 1.1 2.1 3.141
#    FLOATRANGE "Example Parameter" 5.0 2.3 -0.23
#    BOOL "Example Parameter"
#    STRING "Example Parameter" "string 1" "string two" "string trois"
#
#  Note that from the application program's point of view, the type doesn't
#  matter. This means that INT and INTRANGE are functionally equivalent; it's
#  just a matter of how you want to specify the list of arguments. A FLOAT
#  could be used for an integer parameter to the benchmark, or BOOL for an INT
#  or STRING parameter (note that this will generate parameters (0, 1) and
#  ("false", "true"), respectively).
#
#  ==== Benchmark Parameters Used ====
#
#  Just creating parameters and adding them to benchmarks really does nothing;
#  The application must respond to them in some pre-defined way. This is a
#  list of all known parameters that the Physics Coverage application will
#  use, as well as their recommended types:
#    "Ground Name" [string]
#      - A single string, which will be used as the ground for the scene
#      - There will only be one of them created per scene
#    "Object Names" [string]
#      - The list of names to use for the benchmark when adding objects to
#        the scene
#    "Use Time As Random Seed" [bool]
#      - Whether or not to seed the random number generator with the time,
#        in order to get different results with each run (help to create
#        more accurate results when many runs are averaged together)
#      - You'd probably only want to turn this off if you are using it for
#        debugging purposes, as it will then run the exact same every
#        time.
#    "Number of Objects" [integer]
#      - The number of objects to create in the scene
#      - Note that if you specify 1 for this parameter, that means that only
#        the ground object (specified by "Ground Name") will be created. If
#        actually want the ground AND an object created, use a value of 2.
#    "Timestep" [float]
#      - The time interval used when simulating a single frame
#    "Max Passes" [integer]
#      - The maximum number of times the physics system will go over a single
#        group of collisions in order to get a more accurate collision response
#    "Seconds to Run" [float]
#      - How many seconds of real-world time should be simulated
#    "Scenario Type" [string]
#      - Describes the scene arrangement. Currently the only known values are:
#        "Random Cloud" : Creates a group of randomly-placed objects floating
#          above the ground
#        "Vertical Stack" : Creates a vertical stack of objects, evenly
#          spaced and rising upwards from the origin
#    "Collision Analyser Enabled" [boolean]
#      - Indicates whether or not to have the collision analyser process the
#        results of the collisions
#    "SimulationManager::DoCollisions()" [boolean]
#      - Indicates whether or not to have the simulation manager handle the
#        collision-detection phase, or to have the collision manager called
#        explicitly
#    "Convert to Rigid Body" [boolean]
#      - Indicates whether or not to covert any articulated bodies into
#        rigid bodies for the purpose of collision detection
#    "Draw Scene While Benchmarking" [boolean]
#      - Indicates whether or not to draw the scene while running the
#        benchmarks. This helps in getting more real-world results.
#    "Number of Passes" [integer]
#      - How many times to repeat the benchmark. Together with
#        "Average Last N Params" it can be used to reduce the amount of error
#        that can get into the benchmarking results
#    "Average Last N Params" [integer]
#      - Used together with "Number of Passes", this value indicates how many
#        parameters to average together to reduce the error. Normally should
#        be 1 (average together only "Number of Passes" tests)
#
###############################################################################

#### Loading Pure3d Files ####

P3DLOAD "art/simwall.p3d"
P3DLOAD "art/simcylinder.p3d"
P3DLOAD "art/simcrate.p3d"
P3DLOAD "art/simcapsule.p3d"
P3DLOAD "art/simsphere.p3d"
P3DLOAD "art/redbrick3.p3d"
P3DLOAD "art/maxbv4.p3d"

#### default base ####

BENCHMARK "default"
	STRING "Ground Name" "boardo"
	STRING "Object Names" "Cylinder01" "pCubeShape2" "Capsule01" "Sphere01"
	STRING "Use Time As Random Seed" "true"
	INT "Number of Objects" 4
	FLOAT "Timestep" 0.016
	INT "Draw Scene While Benchmarking" 1
	INT "Max Passes" 3
	FLOAT "Seconds to Run" 8.0
	STRING "Scenario Type" "Random Cloud"
END

#### Tests ####

BENCHMARK "Number of Objects" INHERIT "default"
	INTRANGE "Number of Objects" 2 16
END

BENCHMARK "Object Type" INHERIT "default"
	INT "Number of Objects" 16
END

BENCHMARK "Scenario Type" INHERIT "default"
	INT "Number of Objects" 2 4 6 8 12 16 20 24
	STRING "Scenario Type" "Random Cloud" "Vertical Stack"
END

BENCHMARK "Timestep" INHERIT "default"
	FLOATRANGE "Timestep" 0.008 0.032 0.001
END

BENCHMARK "Max Passes" INHERIT "default"
	INTRANGE "Max Passes" 1 16
END

BENCHMARK "Collision Analyser" INHERIT "default"
	BOOL "Collision Analyser Enabled"
	INTRANGE "Number of Objects" 2 16
END

BENCHMARK "Explicit SManager.DoCollisions" INHERIT "default"
	INT "Number of Objects" 2 4 8 16
	BOOL "SimulationManager::DoCollisions()"
END

BENCHMARK "Rigid vs Articulated Body" INHERIT "default"
	STRING "Object Names" "redbrick"
	BOOL "Convert to Rigid Body"
	INTRANGE "Number of Objects" 2 10
#	INTRANGE "Number of Objects" 2 7      #PS2 can't handle high numbers of objects for this benchmark
END

BENCHMARK "Character" INHERIT "default"
	FLOAT "Y Rotation" 0.02
	INT "Number of Objects" 2
	STRING "Object Names" "Motion_Root"
	BOOL "Wind Enabled"
END

#### Post-adds ####

BENCHMARK "default postadd" ADDTOALL
	INTRANGE "Number of Passes" 0 20
	INT "Average Last N Params" 1
END

#### Cleanup ####

ENABLE "all"

#DISABLE "all"

#ENABLE "Number of Objects"
#ENABLE "Rigid vs Articulated Body"
#ENABLE "Character"
#ENABLE "Collision Analyser"

#ENABLE "Rigid vs Articulated Body" "Character"

#DISABLE "Number of Objects"

DISABLE "default" "default postadd"