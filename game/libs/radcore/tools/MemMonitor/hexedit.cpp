//=============================================================================
// Copyright (c) 2002 Radical Games Ltd.  All rights reserved.
//=============================================================================


// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "hexedit.h"

/////////////////////////////////////////////////////////////////////////////
// CHexEdit

IMPLEMENT_DYNCREATE(CHexEdit, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CHexEdit properties

OLE_COLOR CHexEdit::GetForeColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_FORECOLOR, VT_I4, (void*)&result);
	return result;
}

void CHexEdit::SetForeColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_FORECOLOR, VT_I4, propVal);
}

OLE_COLOR CHexEdit::GetBackColor()
{
	OLE_COLOR result;
	GetProperty(DISPID_BACKCOLOR, VT_I4, (void*)&result);
	return result;
}

void CHexEdit::SetBackColor(OLE_COLOR propVal)
{
	SetProperty(DISPID_BACKCOLOR, VT_I4, propVal);
}

short CHexEdit::GetAppearance()
{
	short result;
	GetProperty(DISPID_APPEARANCE, VT_I2, (void*)&result);
	return result;
}

void CHexEdit::SetAppearance(short propVal)
{
	SetProperty(DISPID_APPEARANCE, VT_I2, propVal);
}

BOOL CHexEdit::GetShowAddress()
{
	BOOL result;
	GetProperty(0x1, VT_BOOL, (void*)&result);
	return result;
}

void CHexEdit::SetShowAddress(BOOL propVal)
{
	SetProperty(0x1, VT_BOOL, propVal);
}

BOOL CHexEdit::GetShowAscii()
{
	BOOL result;
	GetProperty(0x2, VT_BOOL, (void*)&result);
	return result;
}

void CHexEdit::SetShowAscii(BOOL propVal)
{
	SetProperty(0x2, VT_BOOL, propVal);
}

BOOL CHexEdit::GetAllowChangeSize()
{
	BOOL result;
	GetProperty(0x3, VT_BOOL, (void*)&result);
	return result;
}

void CHexEdit::SetAllowChangeSize(BOOL propVal)
{
	SetProperty(0x3, VT_BOOL, propVal);
}

BOOL CHexEdit::GetDataModified()
{
	BOOL result;
	GetProperty(0x4, VT_BOOL, (void*)&result);
	return result;
}

void CHexEdit::SetDataModified(BOOL propVal)
{
	SetProperty(0x4, VT_BOOL, propVal);
}

BOOL CHexEdit::GetReadOnly()
{
	BOOL result;
	GetProperty(0x5, VT_BOOL, (void*)&result);
	return result;
}

void CHexEdit::SetReadOnly(BOOL propVal)
{
	SetProperty(0x5, VT_BOOL, propVal);
}

short CHexEdit::GetDigitsInAddress()
{
	short result;
	GetProperty(0x6, VT_I2, (void*)&result);
	return result;
}

void CHexEdit::SetDigitsInAddress(short propVal)
{
	SetProperty(0x6, VT_I2, propVal);
}

short CHexEdit::GetDigitsInData()
{
	short result;
	GetProperty(0x7, VT_I2, (void*)&result);
	return result;
}

void CHexEdit::SetDigitsInData(short propVal)
{
	SetProperty(0x7, VT_I2, propVal);
}

short CHexEdit::GetColumns()
{
	short result;
	GetProperty(0x8, VT_I2, (void*)&result);
	return result;
}

void CHexEdit::SetColumns(short propVal)
{
	SetProperty(0x8, VT_I2, propVal);
}

short CHexEdit::GetFontHeight()
{
	short result;
	GetProperty(0x9, VT_I2, (void*)&result);
	return result;
}

void CHexEdit::SetFontHeight(short propVal)
{
	SetProperty(0x9, VT_I2, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CHexEdit operations

SCODE CHexEdit::SetData(VARIANT* pData, long dwStartAddr)
{
	SCODE result;
	static BYTE parms[] =
		VTS_PVARIANT VTS_I4;
	InvokeHelper(0xa, DISPATCH_METHOD, VT_ERROR, (void*)&result, parms,
		pData, dwStartAddr);
	return result;
}

void CHexEdit::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
