@perl sub max { my($a,$b) = @_; ($a>$b)?($a):($b);}
@perl sub pad { my($len,$str) = @_; sprintf("%-${len}s",$str); }
@perl %typemap = ( "string" => "char*", 
@perl              "COLOUR" => "unsigned long",
@perl              "ULONG" => "unsigned long",
@perl              "UBYTE" => "unsigned char",
@perl              "UWORD" => "unsigned short",
@perl              "WORD" =>  "short",
@perl              "float" => "float",
@perl            );
@perl $filename = $output_file;
@perl $filename =~ s#^.*/##;
@perl $filename =~ s/\..*//;
@perl print "Generating $output_file\n";
@perl my $upper_name = uc($filename);
// Automatically generated by Jeeves, don't edit.  Edit ${filename}.sc instead

#ifndef _${upper_name}_HPP_
#define _${upper_name}_HPP_

#ifdef WIN32
#pragma warning(disable:4786)
#endif

#include "tlDataChunk.hpp"

class tlChunkDescription;

@foreach class_list
class $class_name;
@end .. class_list
@foreach struct_list          
struct $struct_name;
@end .. struct_list
@foreach struct_list ($inc_level == 0)

struct $struct_name
{
    // Data Members
@// compute longest type
@perl my $longest = length("void");
@foreach attr_list
    @perl my $type = $attr_type;
    @perl $type = $typemap{$attr_type} if defined $typemap{$attr_type}; 
    @perl $type .= "*" if defined $array;
    @perl $longest = max($longest, length($type));
@end
@foreach attr_list
    @perl my $type = $attr_type;
    @perl $type = $typemap{$attr_type} if defined $typemap{$attr_type}; 
    @perl $type .= "*" if defined $array;
    @perl $type = pad($longest, $type);
    @perl $name = lc($attr_name);
    $type $name;
@end

    // Methods
    ~$struct_name();
    void Read(tlFile* f);
    void Write(tlFile* f);
    void Print(int index, int indent = 0);
    void PrintFormatted(int index, int indent = 0);
    int  Describe(tlChunkDescription*, int index);
    void Init();
    int  operator==(const $struct_name& a);
};
@end .. struct_list
@foreach class_list ($inc_level == 0)

class $class_name : public tlDataChunk {

    // Data Members
@// compute longest type
@perl my $longest = length("void");
@foreach attr_list ($attr_type ne "Chunk")
    @perl my $type = $attr_type;
    @perl $type = $typemap{$attr_type} if defined $typemap{$attr_type}; 
    @perl $type .= "*" if defined $array;
    @perl $longest = max($longest, length($type));
@end
@foreach attr_list ($attr_type ne "Chunk")
    @perl my $type = $attr_type;
    @perl $type = $typemap{$attr_type} if defined $typemap{$attr_type}; 
    @perl $type .= "*" if defined $array;
    @perl $type = pad($longest, $type);
    @perl $name = lc($attr_name);
    $type $name;
@end

public:

    // Methods
    $class_name(); 
    $class_name(tlReadChunk16* ch); 
    $class_name($class_name* ch); 
    ~$class_name();

    static tlDataChunk* Create(tlReadChunk16* ch);
    void   Write(tlFile* f);
    void   Print(int indent = 0,
                     unsigned int depth = 0xffffffff,
                     unsigned int typemask = 0xffffffff);
    void   PrintFormatted(int indent = 0);
    int    Describe(tlChunkDescription*);
    static tlDataChunk* LoadSubChunk(tlFile* f);
    tlDataChunk* Copy(); 

    // Accessor Methods;
@foreach attr_list ($attr_type ne "Chunk")
    @perl my $attr, $void;
    @perl my $type = $attr_type;
    @perl $type = $typemap{$attr_type} if defined $typemap{$attr_type}; 
    @perl $type = "const " . $type if (($attr_type eq "string") && (!defined $array));
    @perl $type .= "*" if defined $array;
    @perl $attr = pad($longest, $type);
    @perl $void = pad($longest, "void");
    $attr $attr_name();
    inline $attr Get$attr_name() { return $attr_name(); }
    @if (defined $array)
    $void Set$attr_name($type, int count);
    @else
    $void Set$attr_name($type);
    @endif
@end .. attr_list
};
@end .. class_list

#endif

