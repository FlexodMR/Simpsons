@perl sub max { my($a,$b) = @_; ($a>$b)?($a):($b);}
@perl sub pad { my($len,$str) = @_; sprintf("%-${len}s",$str); }
@perl %typemap = ( "string" => "char*", 
@perl              "longstring" => "char*", 
@perl              "COLOUR" => "unsigned long",
@perl              "FOURCC" => "unsigned long",
@perl              "ULONG" => "unsigned long",
@perl              "UBYTE" => "unsigned char",
@perl              "UWORD" => "unsigned short",
@perl              "WORD" => "short",
@perl              "float" => "float",
@perl            );
@perl %typeinit = ( "string" => "NULL", 
@perl               "longstring" => "NULL", 
@perl               "COLOUR" => "0",
@perl               "FOURCC" => "0",
@perl               "ULONG" => "0",
@perl               "UBYTE" => "0",
@perl               "UWORD" => "0",
@perl               "WORD" => "0",
@perl               "float" => "0.0f",
@perl            );
@perl %typeget = ( "string" => "GetPString", 
@perl              "longstring" => "GetLongString",
@perl              "COLOUR" => "GetLong",
@perl              "FOURCC" => "GetLong",
@perl              "ULONG" => "GetLong",
@perl              "UBYTE" => "GetChar",
@perl              "UWORD" => "GetWord",
@perl              "WORD" =>  "GetWord",
@perl              "float" => "GetFloat",
@perl            );
@perl %typeput = ( "string" => "PutPString", 
@perl              "longstring" => "PutLongString",
@perl              "COLOUR" => "PutLong",
@perl              "FOURCC" => "PutLong",
@perl              "ULONG" => "PutLong",
@perl              "UBYTE" => "PutChar",
@perl              "UWORD" => "PutWord",
@perl              "WORD" => "PutWord",
@perl              "float" => "PutFloat",
@perl            );
@perl %typeprint = ( "string" => "\\\"%s\\\"", 
@perl                "longstring" => "\\\"%s\\\"", 
@perl               "COLOUR" => "%08lx",
@perl               "FOURCC" => "%08lx",
@perl               "ULONG" => "%ld",
@perl               "UBYTE" => "%d",
@perl               "UWORD" => "%d",
@perl               "WORD" => "%d",
@perl               "float" => "%f",
@perl            );
@perl %typeprintlong = ( "string" => "\\\"%s\\\"", 
@perl                "longstring" => "\\\"%s\\\"", 
@perl               "COLOUR" => "  0x%08lx",
@perl               "FOURCC" => "  0x%08lx",
@perl               "ULONG" => "%12ld",
@perl               "UBYTE" => "%12d",
@perl               "UWORD" => "%12d",
@perl               "WORD" => "%12d",
@perl               "float" => "%12f",
@perl            );
@perl %typekeyword = ( "string" => "pstring", 
@perl                "longstring" => "longstring", 
@perl               "COLOUR" => "int  ",
@perl               "FOURCC" => "int  ",
@perl               "ULONG" => "int  ",
@perl               "UBYTE" => "byte ",
@perl               "UWORD" => "short",
@perl               "WORD" => "short",
@perl               "float" => "float",
@perl            );
@perl %typebulkread = ( "string" => 0, 
@perl                   "longstring" => 0, 
@perl               "COLOUR" => 1,
@perl               "FOURCC" => 1,
@perl               "ULONG" => 1,
@perl               "UBYTE" => 1,
@perl               "UWORD" => 1,
@perl               "WORD" => 1,
@perl               "float" => 1,
@perl            );
@perl %type_field_value = ( "string" => "%s",
@perl                       "longstring" => "%s", 
@perl                       "COLOUR" => "0x%08lx",
@perl                       "FOURCC" => "0x%08lx",
@perl                       "ULONG" => "%ld",
@perl                       "UBYTE" => "%d",
@perl                       "UWORD" => "%d",
@perl                       "WORD" => "%d",
@perl                       "float" => "%f",
@perl                     );
@perl $filename = $output_file;
@perl $filename =~ s#^.*/##;
@perl $filename =~ s/\..*//;
@perl my $upper_name = uc($filename);
@foreach class_list
@perl $class{$class_name}++;
@end .. class_list
// Automatically generated by Jeeves, don't edit.  Edit ${filename}.sc instead

#include "${filename}.hpp"
#include "tlString.hpp"
#include "tlFile.hpp"
#include "tlChunk16.hpp"

#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <memory.h>
#include <string.h>


// things included by $filename.sc
@foreach include_list ($inc_level == 0 && !($include_name =~ m/\.hsc/))
@perl my $hppname = $include_name;
@perl $hppname =~ s/\.sc/.hpp/;
#include "$hppname"
@end .. include_list
@foreach chunk_list
    @perl $ch_id{$chunk_name} = $chunk_id;
@end .. chunk_list
@foreach struct_list ($inc_level == 0)

// $struct_name

${struct_name}::~${struct_name}()
{
    @foreach attr_list (($attr_type eq "string") || ($attr_type eq "longstring"))
    @perl $name = lc($attr_name);
    strdelete($name);
    @end
}

void
${struct_name}::Read(tlFile*f )
{
    @perl $needbuf = 0;
    @foreach attr_list
        @perl if($attr_type eq "string"){$needbuf = 1;}
    @end 
    @if ($needbuf)
    char buf[P3DMAXNAME];
    @endif
    @foreach attr_list
      @perl $name = lc($attr_name);   
      @perl $get = $typeget{$attr_type};   
      @perl $type = $typemap{$attr_type};   
      @perl $type = $attr_type unless defined $type;
      @if ($attr_type eq "string")
    f->GetPString(buf);
    $name = strnew(buf);
      @else
          @if (defined $get)
    $name = f->$get();
          @else
              @if (defined $param)
    $name.Read(f, $param);
              @else
    $name.Read(f);
              @endif
          @endif
      @endif
    @end
}

void
${struct_name}::Write(tlFile*f )
{
    @foreach attr_list
    @perl $name = lc($attr_name);   
    @perl $put = $typeput{$attr_type};   
     @if (defined $put)
    f->$put($name);
     @else
        @if (defined $param)
    $name.Write(f,$param);
        @else                        
    $name.Write(f);
        @endif
     @endif
    @end
}

void
${struct_name}::Print(int print_index, int indent)
{
    printf("%*s%d\\n", indent, "", (int)print_index);
    @perl $longest = 0;
    @foreach attr_list 
        @perl $longest = max($longest, length($attr_name));
    @end
    @foreach attr_list (!defined $print)
        @perl my $prstr = "%d";
        @perl $prstr = $typeprint{$attr_type} if defined $typeprint{$attr_type}; 
        @perl $prstr = $format if defined $format;
        @perl $name1 = pad($longest, $attr_name);
        @perl $name = lc($attr_name);
    printf("%*s  $name1 = $prstr\\n", indent, "", $name);
    @end
    @foreach attr_list (defined $print)
    $print
    @end
}

void
${struct_name}::PrintFormatted(int print_index, int indent)
{
    @perl $longest = 0;
    @foreach attr_list
        @perl $longest = max($longest, length($attr_name));
    @end
    @foreach attr_list
        @perl my $prstr = "%d";
        @perl $prstr = $typeprintlong{$attr_type} if defined $typeprintlong{$attr_type}; 
        @perl $prkey = $typekeyword{$attr_type} if defined $typekeyword{$attr_type}; 
        @perl $name = lc($attr_name);
    printf("%*s $prkey $prstr  # $attr_name\\n", indent, "", $name);
    @end
}

const char* 
${struct_name}::GetType() const
{
    return "$struct_name";
}

int 
${struct_name}::GetFieldCount() const
{
@perl $attr_total_count = 0;
@perl $attr_array_count = 0;
@foreach attr_list 
    @perl $attr_total_count++;
@end
    return $attr_total_count;
}

bool 
${struct_name}::GetFieldValue(char* val, int len) const
{
    char buf[65536];
    int val_length = 0, cur_length;
    bool length_exceeded = false;

    val[0] = 0;

    @foreach attr_list
        @perl my $prstr = "%d";
        @perl $prstr = $type_field_value{$attr_type} if defined $type_field_value{$attr_type}; 
        @perl $prstr = $format if defined $format;
        @perl $name = lc($attr_name);
    @if($attr_type eq "FOURCC")
    sprintf(buf, "$attr_name = %s, ", tlFourCC($name).AsChar());
    @else
    sprintf(buf, "$attr_name = $prstr, ", $name);
    @endif
    cur_length = strlen(buf);
    if (val_length + cur_length <= len)
    {
        strcat(val, buf);
        val_length += cur_length;
    }
    else
    {
        length_exceeded = true;
    }

    @end

    if (length_exceeded)
    {
        if (val_length + 3 <= len)
        {
            strcat(val, "...");
        }
    }
    else if ((val_length > 2) && (val[val_length-2] == ','))
    {
        val[val_length-2] = 0;
    }

    return true;
}

bool 
${struct_name}::GetFieldUpdatable()
{
    return false;
}

bool 
${struct_name}::SetFieldValue(const char* new_val)
{
    return false;
}

void
${struct_name}::Init()
{
 @foreach attr_list ($attr_type ne "Chunk")
    @perl my $init = "0";
    @perl $init = $typeinit{$attr_type} if defined $typeinit{$attr_type}; 
    @perl $init = "NULL" if defined $array;
    @perl $name = lc($attr_name);
    @if (defined $typeinit{$attr_type})
    $name = $init;
    @else
    $name.Init();
    @endif
 @end
}

$struct_name&
${struct_name}::operator=(const $struct_name& a)
{
 @foreach attr_list ($attr_type ne "Chunk")
    @perl $name = lc($attr_name);
    @if ($attr_type eq "string")
    $name = strnew(a.$name);
    @else     
    $name = a.$name;
    @endif
 @end

    return *this;
}

int
${struct_name}::operator==(const $struct_name& a)
{
 @foreach attr_list
    @perl $name = lc($attr_name);
    @if ($attr_type eq "string")
    if(strcmp($name, a.$name) != 0)
    @else     
    if(!($name == a.$name))
    @endif
    {
        return false;
    }
 @end

    return true;
}

@end .. struct_list

@foreach chunk_list ($inc_level == 0)

// $chunk_name

int ${chunk_name}::sortPriority = -1;

${chunk_name}::$chunk_name()
{
    Init();
}

${chunk_name}::$chunk_name(const ${chunk_name}& ch)
{
    Init();
    *this = ch;
}

${chunk_name}::~$chunk_name()
{
    @perl $needi = 0;
    @foreach attr_list (($attr_type eq "string") || ($attr_type eq "longstring"))
        @perl if(defined $array){$needi = 1;}
    @end 
    @if ($needi)
    unsigned int i;

    @endif
 @foreach attr_list (($attr_type eq "string") || ($attr_type eq "longstring"))
    @perl $name = lc($attr_name);
    @if (defined $array)
    @perl my $arraysize = lc($array);
    for( i = 0; i < $arraysize ; i++ )
    {
        if(${name}[i] != NULL)
        {
            strdelete(${name}[i]);
        }
    }
    @else
    if($name != NULL){
        strdelete($name);
    }
    @endif
 @end
 @foreach attr_list
  @if (defined $array)
    @perl $name = lc($attr_name);
    if($name != NULL){
        delete[] $name;
    }
  @endif
 @end
}

${chunk_name}::$chunk_name(tlReadChunk16* ch)
{
    assert(ch->GetID() == $chunk_id);
    ident = $chunk_id;

    tlFile* f = ch->GetFile();
    @perl $needi = 0;
    @perl $needbuf = 0;
    @foreach attr_list ($attr_type ne "Chunk")
        @perl if(defined $array){$needi = 1;}
        @perl if($attr_type eq "string"){$needbuf = 1;}
    @end 
    @if ($needi)
    unsigned int i;
    @endif
    @if ($needbuf)
    char buf[P3DMAXNAME];
    @endif

    @foreach attr_list ($attr_type ne "Chunk")
      @perl $name = lc($attr_name);   
      @perl $get = $typeget{$attr_type};   
      @perl $type = $typemap{$attr_type};   
      @perl $type = $attr_type unless defined $type;
      @if ($attr_type eq "string")
         @if (defined $array)
            @perl my $arraylc = lc $array;
    $name = new ${type}[$arraylc];
    for(i = 0; i < $arraylc; i++)
    {
        f->GetPString(buf);
        ${name}[i] = strnew(buf);
    }
         @else
    f->GetPString(buf);
    $name = strnew(buf);
         @endif
      @else
         @if (defined $array)
         @perl my $arraylc = lc $array;
    $name = new ${type}[$arraylc];
    for(i = 0; i < $arraylc; i++)
    {
            @if (defined $get)
        ${name}[i] = f->$get();
            @else
              @if (defined $param)
        ${name}[i].Read(f,$param);
              @else
        ${name}[i].Read(f);
              @endif
            @endif
    }
         @else
          @if (defined $get)
    $name = f->$get();
          @else
              @if (defined $param)
    $name.Read(f, $param);
              @else
    $name.Read(f);
              @endif
          @endif
         @endif
      @endif
    @end
    while (!ch->EndOfChunk())
    {
        AppendSubChunk(LoadSubChunk(f));
    }
    if(sortPriority == -1)
    {
        sortPriority = FindPriority($chunk_id);
    }
}

void
${chunk_name}::Init()
{
    ident = $chunk_id;
 @foreach attr_list ($attr_type ne "Chunk")
    @perl my $init;
    @perl $init = $typeinit{$attr_type} if defined $typeinit{$attr_type}; 
    @perl $init = "NULL" if defined $array;
    @perl $name = lc($attr_name);
    @if (defined $init)
    $name = $init;
    @else
    @if (defined $param)
    $name.Init($param);
    @else
    $name.Init();
    @endif
    @endif
 @end
    if(sortPriority == -1)
    {
        sortPriority = FindPriority($chunk_id);
    }
}

long 
${chunk_name}::Size( )
{

    long s = 2*sizeof( long );

    int i;

    @foreach attr_list ($attr_type ne "Chunk")
      @perl $name = lc($attr_name);   
      @perl $get = $typeget{$attr_type};   
      @perl $type = $typemap{$attr_type};   
      @perl $type = $attr_type unless defined $type;
      @if ($attr_type eq "string")
         @if (defined $array)
            @perl my $arraylc = lc $array;    
    for(i = 0; i < (int) $arraylc; i++)
    {
        s += strlen( ${name}[ i] );
    }
         @else
    s += strlen( $name );    
         @endif
      @else
         @if (defined $array)
         @perl my $arraylc = lc $array;    
    for(i = 0; i < (int)$arraylc; i++)
    {
        s += sizeof( ${name}[i ] );
    }
         @else
    s += sizeof( $name );
         @endif
      @endif
    @end

    for( i=0; i < SubChunkCount( ); i++){
        s += GetSubChunk(i)->Size();
    }

    return s;
}

$chunk_name&
${chunk_name}::operator=(const $chunk_name& a)
{
    @foreach attr_list ($attr_type ne "Chunk")
        @perl if(defined $array){$needi = 1;}
    @end 
    @if ($needi)
    unsigned int i;
    @endif

    if(ident != a.ident)
    {
        assert(ident != a.ident);
        return *this;
    }

 @foreach attr_list ($attr_type ne "Chunk")
    @perl my $init;
    @perl $init = $typeinit{$attr_type} if defined $typeinit{$attr_type}; 
    @perl $init = "NULL" if defined $array;
    @perl $name = lc($attr_name);
    @perl $type = $typemap{$attr_type};   
    @perl $type = $attr_type unless defined $type;
    @if (defined $array)
    @perl my $arraysize = lc($array);
    if($name)
    {
        delete $name;
    }
    $name = new ${type}[$arraysize];

    for( i = 0; i < $arraysize ; i++ )
    {
        @if(($attr_type eq "string") || ($attr_type eq "longstring"))
        ${name}[i] = strnew(a.${name}[i]);
        @else
        ${name}[i] = a.${name}[i];
        @endif
    }
    @else
        @if(($attr_type eq "string") || ($attr_type eq "longstring"))
    $name = strnew(a.$name);
        @else
    $name = a.$name;
        @endif
    @endif

 @end
    int subch;

    for(subch = 0; subch < subcount; subch++)
    {
        RemoveSubChunk(subch);
    }

    for(subch = 0; subch < a.subcount; subch++)
    {
        AppendSubChunk(a.GetSubChunk(subch)->Copy());
    }
    
    return *this;
}

bool
${chunk_name}::operator==(const tlDataChunk& a)
{
    @foreach attr_list ($attr_type ne "Chunk")
        @perl if(defined $array){$needi = 1;}
    @end 
    @if ($needi)
    unsigned int i;
    @endif

    const $chunk_name* aptr = dynamic_cast<const $chunk_name*>(&a);

    if(aptr == NULL)
    {
        return false;
    }

    if(ident != aptr->ident)
    {
        return false;
    }

 @foreach attr_list ($attr_type ne "Chunk")
    @perl $name = lc($attr_name);
    @if (defined $array)
      @perl my $arraylc = lc $array;
    for(i = 0; i < $arraylc; i++)
    {
      @if ($attr_type eq "string")
        if(strcmp(${name}[i], aptr->${name}[i]) != 0)
      @else
        if(!(${name}[i] == aptr->${name}[i]))
      @endif
        {
            return false;
        }
    }
    @else
      @if ($attr_type eq "string")
    if(strcmp($name, aptr->$name) != 0)
      @else     
    if(!($name == aptr->$name))
      @endif
    {
        return false;
    }
    @endif

 @end
    // check the subchunks
    if(subcount != aptr->subcount)
    {
        return false;
    }

    for(int subch = 0; subch < subcount; subch++)
    {
        if(!((*GetSubChunk(subch)) == (*aptr->GetSubChunk(subch))))
        {
            return false;
        }
    }
    return true;
}

bool
${chunk_name}::NameCompare(const tlDataChunk& a)
{
 @perl $name = "";
 @foreach attr_list ($attr_name eq "Name")
    @if (!(defined $array)&&($attr_type eq "string"))
      @perl $name = lc($attr_name);
    @endif
 @end
 @if ($name)
    const $chunk_name* aptr = dynamic_cast<const $chunk_name*>(&a);

    if(aptr == NULL)
    {
        return false;
    }

    if(ident != aptr->ident)
    {
        return false;
    }

    if(strcmp($name, aptr->$name) != 0)
    {
        return false;
    }
    return true;
 @else
    // This chunk has no name, so we must compare the bits
    return operator==(a);
 @endif
}


tlDataChunk*
${chunk_name}::Create(tlReadChunk16* ch)
{
    tlDataChunk* dtCh = new ${chunk_name}(ch);
    return dtCh;
}

void
${chunk_name}::Write(tlFile* f)
{
    tlWriteChunk16 ch(f, ident);
    @perl $needi = 0;
    @foreach attr_list ($attr_type ne "Chunk")
        @perl if(defined $array ){$needi = 1;}
    @end 
    @if ($needi)
    unsigned int i;
    @endif

    @foreach attr_list ($attr_type ne "Chunk")
    @perl $name = lc($attr_name);   
    @perl $put = $typeput{$attr_type};   
    @perl $type = $typemap{$attr_type};   
    @perl $type = $attr_type unless defined $type;
    @if (defined $array)
    @perl $arraylc = lc($array);
    for(i = 0; i < $arraylc ; i++)
    {
        @if (defined $put)
        f->$put(${name}[i]);
        @else
          @if (defined $param)
        ${name}[i].Write(f,$param);
          @else                        
        ${name}[i].Write(f);
          @endif
        @endif
    }
    @else
     @if (defined $put)
    f->$put($name);
     @else
        @if (defined $param)
    $name.Write(f,$param);
        @else                        
    $name.Write(f);
        @endif
     @endif
    @endif
    @end

    ch.ContentFinish();
    for(int subch = 0; subch < subcount; subch++)
    {
        GetSubChunk(subch)->Write(f);
    }
}

void
${chunk_name}::Print(int indent, unsigned int printdepth, unsigned int typemask)
{
    @perl $needi = 0;
    @foreach attr_list ($attr_type ne "Chunk")
        @perl if(defined $array){$needi = 1;}
    @end 
    @if ($needi)
    unsigned int i;
    @endif

    if ( printdepth == 0 )
    {
        return;
    }

    printf("%*s$chunk_name (%4x)\\n",indent,"",(int) ident);
    @perl $longest = 0;
    @foreach attr_list ($attr_type ne "Chunk")
        @perl $longest = max($longest, length($attr_name));
    @end
    @foreach attr_list (($attr_type ne "Chunk") && (!defined $print))
        @perl my $prstr = "%d";
        @perl $prstr = $typeprint{$attr_type} if defined $typeprint{$attr_type}; 
        @perl $prstr = $format if defined $format;
        @perl $name1 = pad($longest, $attr_name);
        @perl $name = lc($attr_name);
        @if (defined $array)
        @perl $arraylc = lc($array);
    printf("%*s  $attr_name:\\n",indent,"");
    for( i=0; i < $arraylc; i++)
    {
        @if (defined $typeprint{$attr_type} || defined $format)
         printf("%*s    %d $prstr\\n",indent,"",i,${name}[i]);
        @else
          @if (defined $param)
         ${name}[i].Print(i, indent + 4, $param);
          @else
         ${name}[i].Print(i, indent + 4);
          @endif
        @endif
    }
        @else
          @if (defined $typeprint{$attr_type} || defined $format)
    printf("%*s  $name1 = $prstr\\n",indent,"",$name);
          @else
    printf("%*s  $attr_name:\\n",indent,"");
    ${name}.Print(0, indent+4);
          @endif
        @endif
    @end
    @foreach attr_list (($attr_type ne "Chunk") && (defined $print))
        @if (defined $array)
        @perl $arraylc = lc($array);
    printf("%*s  $attr_name:\\n",indent,"");
    for( i=0; i < $arraylc; i++)
    {
        $print;
    }
        @else
    $print;
        @endif
    @end

    if(subcount)
    {
        printf("%*s  SubChunks (%d):\\n",indent,"",subcount);
        for(int subch = 0; subch < subcount; subch++)
        {
            GetSubChunk(subch)->Print(indent+4, printdepth-1, typemask);
        }
    }
}

void
${chunk_name}::PrintFormatted(int indent)
{
    @perl $needi = 0;
    @foreach attr_list ($attr_type ne "Chunk")
        @perl if(defined $array){$needi = 1;}
    @end 
    @if ($needi)
    unsigned int i;
    @endif
    printf("%*schunk 0x%04x  $ $chunk_name\\n",indent,"",(int) ident);
    @perl $longest = 0;
    @foreach attr_list ($attr_type ne "Chunk")
        @perl $longest = max($longest, length($attr_name));
    @end
    @foreach attr_list ($attr_type ne "Chunk")
        @perl my $prstr = "%d";
        @perl $prstr = $typeprintlong{$attr_type} if defined $typeprintlong{$attr_type}; 
        @perl $prkey = $typekeyword{$attr_type} if defined $typekeyword{$attr_type}; 
        @perl $name = lc($attr_name);
        @if (defined $array)
        @perl $arraylc = lc($array);
        @if (defined $typeprintlong{$attr_type})
    printf("%*s  repeat 1 $prkey # $attr_name\\n",indent,"");
        @else
    printf("%*s  # $attr_name\\n",indent,"");
        @endif
    for( i=0; i < $arraylc; i++)
    {
        @if (defined $typeprintlong{$attr_type})
         printf("%*s    $prstr\\n",indent,"",${name}[i]);
        @else
          @if (defined $param)
         ${name}[i].PrintFormatted(i,indent+4,$param);
          @else
         ${name}[i].PrintFormatted(i,indent+4);
          @endif
        @endif
    }
        @if (defined $typeprintlong{$attr_type})
    printf("%*s  endrepeat\\n",indent,"");
        @endif
        @else
          @if (defined $typeprintlong{$attr_type})
    printf("%*s  $prkey $prstr # $attr_name\\n",indent,"",$name);
          @else
    printf("%*s  # $attr_name:\\n",indent,"");
    ${name}.PrintFormatted(0, indent+4);
          @endif
        @endif
    @end

    if(subcount)
    {
        for(int i=0;i<subcount;i++)
        {
            GetSubChunk(i)->PrintFormatted(indent+2);
        }
    }
    printf("%*sendchunk\\n",indent,"");
}

const char* 
${chunk_name}::GetType() const
{
    return "$chunk_name";
}

int 
${chunk_name}::GetFieldCount() const
{
@perl $attr_total_count = 0;
@perl $attr_array_count = 0;
@foreach attr_list (($attr_type ne "Chunk"))
    @perl $attr_total_count++;
    @perl if (defined $array) { $attr_array_count++; }
@end
    return $attr_total_count;
}

bool 
${chunk_name}::GetFieldIsArray(int fieldIndex) const
{
@perl if ($attr_array_count > 0)
@perl {
    switch(fieldIndex)
    {
    @perl my $attr_count = 0;
    @foreach attr_list (($attr_type ne "Chunk"))
        case $attr_count:
        @perl if (defined $array)
        @perl {
            return true;
        @perl }
        @perl else
        @perl {
            return false;
        @perl }

        @perl $attr_count++;
    @end
        default:
            return false;
    }
@perl }
@perl else
@perl {
    return false;
@perl }
}

int 
${chunk_name}::GetFieldArrayCount(int fieldIndex) const
{
@perl if ($attr_array_count > 0)
@perl {
    switch(fieldIndex)
    {
    @perl my $attr_count = 0;
    @foreach attr_list (($attr_type ne "Chunk"))
        @perl if (defined $array)
        @perl {
        @perl my $arraylc = lc($array);
        case $attr_count:
            return $arraylc;

        @perl }
        @perl $attr_count++;
    @end
        default:
            return 0;
    }
@perl }
@perl else
@perl {
    return 0;
@perl }
}

const char* 
${chunk_name}::GetFieldType(int fieldIndex) const
{
@perl if ($attr_total_count > 0)
@perl {
    switch(fieldIndex)
    {
    @perl my $attr_count = 0;
    @foreach attr_list (($attr_type ne "Chunk"))
        case $attr_count:
            return "$attr_type";

        @perl $attr_count++;
    @end
        default:
            return 0;
    }
@perl }
@perl else
@perl {
    return 0;
@perl }
}

const char* 
${chunk_name}::GetFieldName(int fieldIndex) const
{
@perl if ($attr_total_count > 0)
@perl {
    switch(fieldIndex)
    {
    @perl my $attr_count = 0;
    @foreach attr_list (($attr_type ne "Chunk"))
        case $attr_count:
            return "$attr_name";

        @perl $attr_count++;
    @end
        default:
            return 0;
    }
@perl }
@perl else
@perl {
    return 0;
@perl }
}

bool 
${chunk_name}::GetFieldValue(int fieldIndex, char* val, int len) const
{
@perl if($attr_total_count > 0)
@perl {
    @perl my $need_buf = 0;
    @foreach attr_list (($attr_type ne "Chunk"))
        @if (!defined $array)
            @if (defined $type_field_value{$attr_type} || defined $format)
                @perl $need_buf = 1;
            @endif
        @endif
    @end
    @perl if ($need_buf)
    @perl {
    char buf[65536];

    @perl }
    switch(fieldIndex)
    {
    @perl my $attr_count = 0;
    @foreach attr_list (($attr_type ne "Chunk"))
        case $attr_count:
        @if (defined $array)
            return false;
        @else
            @perl my $prstr = "%d";
            @perl $prstr = $type_field_value{$attr_type} if defined $type_field_value{$attr_type}; 
            @perl $prstr = $format if defined $format;
            @perl $name = lc($attr_name);
            @if (defined $type_field_value{$attr_type} || defined $format)
            @if ($attr_type eq "FOURCC")
            sprintf(buf, "%s", tlFourCC($name).AsChar());
            @else
            sprintf(buf, "$prstr", $name);
            @endif
            strncpy(val, buf, len);
            return true;
            @else
            return ${name}.GetFieldValue(val, len);
            @endif
        @endif

        @perl $attr_count++;
    @end
        default:
            return false;
    }
@perl }
@perl else
@perl {
    return false;
@perl }
}

bool 
${chunk_name}::GetFieldArrayValue(int fieldIndex, int arrayIndex, char *val, int len) const
{
@perl if ($attr_array_count > 0)
@perl {
    @perl my $need_buf = 0;
    @foreach attr_list (($attr_type ne "Chunk"))
        @if (defined $array)
            @if (defined $type_field_value{$attr_type} || defined $format)
                @perl $need_buf = 1;
            @endif
        @endif
    @end
    @perl if ($need_buf)
    @perl {
    char buf[65536];

    @perl }
    switch(fieldIndex)
    {
    @perl my $attr_count = 0;
    @foreach attr_list (($attr_type ne "Chunk"))
        case $attr_count:
            @if (defined $array)
                @perl my $prstr = "%d";
                @perl $prstr = $type_field_value{$attr_type} if defined $type_field_value{$attr_type}; 
                @perl $prstr = $format if defined $format;
                @perl $name = lc($attr_name);
                @if (defined $type_field_value{$attr_type} || defined $format)
            sprintf(buf, "$prstr", ${name}[arrayIndex]);
            strncpy(val, buf, len);
            return true;
                @else
            return ${name}[arrayIndex].GetFieldValue(val, len);
                @endif
            @else
            return false;
            @endif

        @perl $attr_count++;
    @end
        default:
            return false;
    }
@perl }
@perl else
@perl {
    return false;
@perl }
}

bool 
${chunk_name}::GetFieldUpdatable(int fieldIndex) const
{
@perl if($attr_total_count > 0)
@perl {
    switch(fieldIndex)
    {
    @perl my $attr_count = 0;
    @foreach attr_list (($attr_type ne "Chunk"))
        case $attr_count:
        @if($attr_type eq "string")
            return true;
        @else
            @if($attr_type eq "float")
            return true;
            @else
              @if($attr_type eq "longstring")
            return false;
              @else
                 @perl if (defined $type_field_value{$attr_type})
                 @perl {
            return true;
                 @perl }
                 @perl else
                 @perl {
                     @perl $scope_op = "::";
                     @perl if (defined $typemap{$attr_type})
                     @perl {
            return $typemap{$attr_type}${scope_op}GetFieldUpdatable();
                     @perl }
                     @perl else
                     @perl {
            return ${attr_type}${scope_op}GetFieldUpdatable();
                     @perl }
                 @perl }
             @endif
          @endif
        @endif

        @perl $attr_count++;
    @end
        default:
            return false;
    }
@perl }
@perl else
@perl {
    return false;
@perl }
}

bool 
${chunk_name}::SetFieldValue(int fieldIndex, const char* new_val)
{
@perl if($attr_total_count > 0)
@perl {
    switch(fieldIndex)
    {
    @perl my $attr_count = 0;
    @foreach attr_list (($attr_type ne "Chunk"))
        case $attr_count:
        @if (defined $array)
            return false;
        @else
            @perl $name = lc($attr_name);
            @if(($attr_type eq "string") || ($attr_type eq "longstring"))
            strdelete(${name});
            ${name} = strnew(new_val);
            return true;
            @else
                @if($attr_type eq "float")
        {
            char* end_ptr;
            $typemap{$attr_type} tmp;
            tmp = ($typemap{$attr_type})strtod(new_val, &end_ptr);
            if (*end_ptr == 0)
            {
                ${name} = tmp;
                return true;
            }
            return false;
        }
                @else
                  @if($attr_type eq "FOURCC")
        {
            ${name} = ($typemap{$attr_type}) tlFourCC(new_val);
            return true;
        }
                  @else
                      @if($attr_type eq "WORD")
        {
            char* end_ptr;
            $typemap{$attr_type} tmp;
            tmp = ($typemap{$attr_type})strtol(new_val, &end_ptr, 0);
            if (*end_ptr == 0)
            {
                ${name} = tmp;
                return true;
            }
            return false;
        }
                      @else
                          @perl if (defined $type_field_value{$attr_type})
                          @perl {
        {
            char* end_ptr;
            $typemap{$attr_type} tmp;
            tmp = ($typemap{$attr_type})strtoul(new_val, &end_ptr, 0);
            if (*end_ptr == 0)
            {
                ${name} = tmp;
                return true;
            }
            return false;
        }
                          @perl }
                          @perl else
                          @perl {
            return ${name}.SetFieldValue(new_val);
                          @perl }
                      @endif
                  @endif
              @endif
          @endif
        @endif
        @perl $attr_count++;
    @end
        default:
            return false;
    }
@perl }
@perl else
@perl {
    return false;
@perl }
}

bool 
${chunk_name}::SetFieldArrayValue(int fieldIndex, int arrayIndex, const char* new_val)
{
@perl if ($attr_array_count > 0)
@perl {
    switch(fieldIndex)
    {
    @perl my $attr_count = 0;
    @foreach attr_list (($attr_type ne "Chunk"))
        case $attr_count:
        @if (defined $array)
            @perl $name = lc($attr_name);
            @if(($attr_type eq "string") || ($attr_type eq "longstring"))
            if (${name}[arrayIndex]) strdelete(${name}[arrayIndex]);
            ${name}[arrayIndex] = strnew(new_val);
            return true;
            @else
                @if($attr_type eq "float")
        {
            char* end_ptr;
            $typemap{$attr_type} tmp;
            tmp = ($typemap{$attr_type})strtod(new_val, &end_ptr);
            if (*end_ptr == 0)
            {
                ${name}[arrayIndex] = tmp;
                return true;
            }
            return false;
        }
                @else
                    @if(($attr_type eq "ULONG") || ($attr_type eq "COLOUR") || ($attr_type eq "FOURCC") )
        {
            char* end_ptr;
            $typemap{$attr_type} tmp;
            tmp = ($typemap{$attr_type})strtoul(new_val, &end_ptr, 0);
            if (*end_ptr == 0)
            {
                ${name}[arrayIndex] = tmp;
                return true;
            }
            return false;
        }
                    @else
                        @perl if (defined $type_field_value{$attr_type})
                        @perl {
        {
            char* end_ptr;
            $typemap{$attr_type} tmp;
            tmp = ($typemap{$attr_type})strtol(new_val, &end_ptr, 0);
            if (*end_ptr == 0)
            {
                ${name}[arrayIndex] = tmp;
                return true;
            }
            return false;
        }
                        @perl }
                        @perl else
                        @perl {
            return ${name}[arrayIndex].SetFieldValue(new_val);
                        @perl }
                    @endif
                @endif
            @endif
        @else
            return false;
        @endif

        @perl $attr_count++;
    @end
        default:
            return false;
    }
@perl }
@perl else
@perl {
    return false;
@perl }
}

tlDataChunk*
${chunk_name}::Copy()
{
    return new ${chunk_name}(*this);
}

tlDataChunk*
${chunk_name}::LoadSubChunk(tlFile* f)
{
    tlDataChunk *dch;
    tlReadChunk16  ch(f);
    ch.ReadNext();
    unsigned int id = ch.GetID();
    @perl $needswitch = 0;
    @foreach attr_list ($attr_type eq "Chunk")
        @perl $needswitch = 1;
    @end   
    @if ($needswitch)
    switch(id)
    {
    @foreach attr_list ($attr_type eq "Chunk")
    case $ch_id{$attr_name}:
        dch = new $attr_name(&ch);
        break;
    @end
    default:
        dch = new tlDataChunk(id);
        int size = ch.GetDataSize();
        char* buf = new char[size];
        f->GetBytes(buf, size);
        dch->SetData(buf, size);
        delete buf;
    }
    @else
    dch = new tlDataChunk(id);
    int size = ch.GetDataSize();
    char* buf = new char[size];
    f->GetBytes(buf, size);
    dch->SetData(buf, size);
    delete buf;
    @endif
    ch.Skip();
    return dch;
}

// Accessor Methods for $chunk_name
@foreach attr_list ($attr_type ne "Chunk")
    @perl my $attr, $void;
    @perl my $type;
    @perl $type = $attr_type;
    @perl $type = $typemap{$attr_type} if defined $typemap{$attr_type}; 
    @perl $basetype = $type;
    @perl $type = "const " . $type if ((defined $class{$attr_type})||(($attr_type eq "string") || ($attr_type eq "longstring")) && (!defined $array));
    @perl $type .= "*" if defined $array;
    @perl $type .= "&" if ((defined $class{$attr_type}) && (!defined $array));
    @perl $name = lc($attr_name);

$type 
${chunk_name}::$attr_name()
{
    return $name;
}

@if (defined $array)
void 
${chunk_name}::Set$attr_name($type val, int count)
{
    if($name)
    {
        delete[] $name;
    }      
    $basetype* newval = new ${basetype}[count];
    for(int i = 0; i < count ; i++)
    {
        @if (($attr_type eq "string") || ($attr_type eq "longstring"))
        newval[i] = strnew(val[i]);
        @else
        newval[i] = val[i];
        @endif
    }
    $name = newval;
}
@else
void 
${chunk_name}::Set$attr_name($type val)
{
    @if (($attr_type eq "string") || ($attr_type eq "longstring"))
    strdelete($name);
    $name = strnew(val);
    @else
    $name = val;
    @endif
}
@endif
@end .. attr_list
@end .. chunk_list


