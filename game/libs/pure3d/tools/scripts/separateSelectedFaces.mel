// separateFaces.mel  v1.0  (22 Aug 2002)
//
// MEL script for Maya
//
// by Bryan Ewert
//    http://www.ewertb.com/
//    bryan@ewertb.com
//
//    Radical Entertainment
//    Vancouver, Canada

// Function:
//   This script performs a long-hand approach to splitting an object
//   apart:  Dupe the object, delete the selected facets from the 
//   original and delete the opposite of the selected facets from
//   the duplicate.  This method preserves the Color Per Vertex
//   information.
//
// Usage
//   Select any number of face components.  Faces may be selected
//   on more than one object; in this case, a separation will be performed
//   on all affected objects.  Faces do not need to be selected in
//   a contiguous block.  If you select all faces for an object then
//   no action is taken for that object.
//
//   Lastly, call this script.  Each affected object will be separated
//   into two objects.  The newly created object will contain only the
//   selected faces; the original object will contain all except the
//   selected faces.  The newly created object will be named the same as 
//   the original with the addition of a numeric decoration.

// //////////////////////////////////////////////////////////////////////
//  shortName
//
// Description: Returns the shortest possible name that is unique to 
//  the specified node.
//
//  $reallyShort - if TRUE, strip leading '|' character as well
proc string shortName( string $node, int $reallyShort )
{
    string $shortName = "";
    
    string $bloodyArray[] = `ls -shortNames $node`;
    $shortName = $bloodyArray[0];
    
    if ( $reallyShort )
        $shortName = `match "[^|]*$" $shortName`;
        
    return $shortName;
}

//===========================================================================
// getTransform
//===========================================================================
// Description: Returns the transform for the specified shape node.
//
//  Parameters: string $shape: The shape node.
//
//      Return: (string): The transform node.
//
//===========================================================================
proc string getTransform( string $shape )
{
    string $transform = $shape;
    
    // Special case for "joint" -- 
    // a joint is a transform and has no corresponding Shape.
    if ( `objExists $shape` && ( "transform" != `nodeType $shape` ) && ( "joint" != `nodeType $shape` ) )
    // If given node is already a transform, just pass on through
    {
        string $parents[] = `listRelatives -fullPath -parent $shape`;
        $transform = $parents[0];
    }

    return $transform;
}

//===========================================================================
// objectFaceSelection
//===========================================================================
// Description: Returns the indices for all face component that have been
//              selected (or highlighted, if you prefer) on the specified
//              object.
//
//  Parameters: string $object: The object containing the faces.
//              string $flatSelect[]: An array containing the reference
//                  selection in "flattened" format (i.e. `ls -fl`)
//
//      Return: (int[]): Array of face component indices.
//
//===========================================================================
proc int[] objectFaceSelection( string $object, string $flatSelect[] )
{
    int $faces[];

    // Component selection always reflected at transform level
    string $transform = getTransform( $object );

    for ( $node in $flatSelect )
    {
        if ( `gmatch $node ( $transform + ".f*" )` )
        {
            string $component = `match "\[[0-9]+\]" $node`;
            int $face = `match "[0-9]+" $component`;
            $faces[`size $faces`] = $face;
        }
    }

    return $faces;
}

proc string rootNode( string $object )
{
    string $buffer[];
    tokenize $object "." $buffer;
    return $buffer[0];
}

//===========================================================================
// facesOf
//===========================================================================
// Description: Converts an array of face component indices to strings that
//              describe the face component itself.  For example, a node
//              of "pCube" and a face of "2" results in "pCube.f[2]".
//
//  Parameters: string $node: The mesh object.
//              int $faces[]: An array containing the face indices.
//
//      Return: (string[]): Array of node + face component descriptions.
//
//===========================================================================
proc string[] facesOf( string $node, int $faces[] )
{
    string $facesOf[];

    for ( $f in $faces )
    {
        $facesOf[`size $facesOf`] = ( $node + ".f[" + $f + "]" );
    }

    return $facesOf;
}

global proc separateSelectedFaces()
{
    string $select[] = `selectedNodes`;
    string $flatSelect[] = `ls -sl -l -fl`;
    
    for ( $node in $select )
    {
        int $intArray[] = `polyEvaluate -f $node`;
        int $numFaces = $intArray[0];

        int $faces[] = objectFaceSelection( $node, $flatSelect );
        int $numSelectedFaces = `size $faces`;
        
        if ( ( $numSelectedFaces > 0 ) && ( $numSelectedFaces < $numFaces ) )
        {
            string $dupe[] = `duplicate $node`;
            $dupeMesh = $dupe[0];

            // Delete selected faces from original object, and
            // delete unselected faces from duplicate
            select -r ( facesOf( $node, $faces ) );
            delete;

            // Delete the faces that were NOT selected
            select -r ( facesOf( $dupeMesh, $faces ) );
            select -tgl ( $dupeMesh + ".f[*]" );
            delete;
        }
        else
        // User has selected all faces of object.. nothing to separate
        {
            warning( "Skipping " + $node );
        }

        clear $faces;
    }
    
}

/*
source separateSelectedFaces; separateSelectedFaces;
*/
