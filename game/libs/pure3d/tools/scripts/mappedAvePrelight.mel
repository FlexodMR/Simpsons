/*===========================================================================
   File:    mappedAvePrelight.mel
   Created: January 28, 2002
   Author:  Harold Westlund

   Copyright (c) 2002 Radical Entertainment, Inc.
   All rights reserved.

=============================================================================

    This procedure remaps averaged vertex colour of a mesh.  Averaging takes
    place across neighboring faces, as determined by soft and hard edge
    boundaries.  Averaged colours within a specified luminance range (low to
    high) are mapped to the corresponding RGB color.  Low-high-RGB sets are
    passed to this procedure as parater arrays.

    return value:
    bool = success of this procedure.

===========================================================================*/

global proc int mappedAvePrelight (
    float $map_low[],
    float $map_high[],
    float $map_red[],
    float $map_green[],
    float $map_blue[] )
{
    print "Remapping vertex colours.\n";
    
    int $NUM_MAPS = size( $map_low );
    if( size( $map_high )  != $NUM_MAPS  ||
        size( $map_red )   != $NUM_MAPS  ||
        size( $map_green ) != $NUM_MAPS  ||
        size( $map_blue )  != $NUM_MAPS )
    {
        return false;
    }

    string $selection[] = `ls -selection`;

    string $mesh[] = `filterExpand -sm 12 -ex true`;

    // Step through all selected meshes
    for( $i = 0; $i < size($mesh); $i++ )
    {
        print ( "Sampling " + $mesh[$i] + "\n" );

        // The colours associated with each side.
        float $sideRed[], $sideGreen[], $sideBlue[];
        // The side associated with each face.
        int $faceSide[];

        int $sideIndex = 0; // The index of the current side.

        int $edgesA[];
        $edgesA = `polyEvaluate -e ( $mesh[$i] )`;
        int $numEdges = $edgesA[0];
        clear $edgesA;
        
        int $facesA[];
        $facesA = `polyEvaluate -f ( $mesh[$i] )`;
        int $numFaces = $facesA[0];
        clear $facesA;
        
        int $faceVisited[1]; // Keep track of which faces have been processed.
        $faceeVisited[$numFaces] = 0;  // Can't initialize with variable as size.

        // Step through the faces in the mesh
        for( $j = 0; $j < $numFaces; $j++ )
        {
            // string $face = $mesh[$i] + ".f[" + $j+ "]";
            int $neighbors[];
            float $aveColour[3];
            
            // Use this face only if not yet visited.
            // It might have been visited while processing a face of lower index.
            if( $faceVisited[$j] == 0 )
            {
//                $neighbors[0] = $j;
//              Replace the following with the above to show that this is responsible
                // for ~ 2/3 the run time.
                getNeighborFaces( $neighbors, $j, $mesh[$i], $faceVisited );
                getAveFaceColour( $aveColour, $mesh[$i], $neighbors );
                float $red;
                $red = $aveColour[0];
                float $green;
                $green = $aveColour[1];
                float $blue;
                $blue = $aveColour[2];

                // Set this side colour to be the average colour.
                $sideRed[$sideIndex]   = $red;
                $sideGreen[$sideIndex] = $green;
                $sideBlue[$sideIndex]  = $blue;
                
                // Find the lumninance
                float $y = .299 * $red + .587 * $green + .114 * $blue;
                    
                // Apply the appropriate color maps.
                int $mIdx;
                for ( $mIdx = 0; $mIdx < $NUM_MAPS; $mIdx++ )
                {
                    if ( ($y <= ( $map_high[$mIdx] ) ) &&
                         ($y >= ( $map_low[$mIdx]  ) )  )
                    {
                        // Luminance is within specified range
                        $red   = $map_red[$mIdx];
                        $green = $map_green[$mIdx];
                        $blue  = $map_blue[$mIdx];

                        // Set this side colour to be the average colour.
                        $sideRed[$sideIndex]   = $red;
                        $sideGreen[$sideIndex] = $green;
                        $sideBlue[$sideIndex]  = $blue;

                        break;
                    }
                }

                // Colours are set, now record face - side correlation.
                int $nIdx; // Neighbor index
                int $maxNIdx = size ( $neighbors );
                for( $nIdx = 0; $nIdx < $maxNIdx; $nIdx++ )
                {
                    $faceSide[ $neighbors[$nIdx] ] = $sideIndex;
                }

                $sideIndex++;
            }
            clear $neighbors;
            clear $aveColour;
        }

        // Create a vertex index list $vi[] and a face index list $fi[]
        // with vertex indices listed in increasing order.
        int $vi[];
        int $fi[];
        // Create the list of vertexFace colours in $red[], $green[],
        // and $blue[].
        float $red[];
        float $green[];
        float $blue[];

        int $index = 0; // Unique for each vertexFace.

        int $verticesEval[];
        $verticesEval = `polyEvaluate -v ( $mesh[$i] )`;
        int $numVertices = $verticesEval[0];
        clear $verticesEval;
        // Step through vertices of this face.
        for( $vIdx = 0; $vIdx < $numVertices; $vIdx++ )
        {
            string $vertex  = $mesh[$i] + ".vtx[" + $vIdx + "]";
            string $faceInfo[] = `polyInfo -vertexToFace $vertex`;
            string $faceIndex[];
            int $tokCount = `tokenize $faceInfo[0] $faceIndex`;
            clear $faceInfo;
        
            // Step through the faces of this vertex.
            for( $j = 2; $j < $tokCount; $j++ )
            {
                int $fIdx = $faceIndex[$j];
                
                $vi[$index] = $vIdx;
                $fi[$index]   = $fIdx;
                $red[$index]   = $sideRed  [ $faceSide[ $fIdx ] ];
                $green[$index] = $sideGreen[ $faceSide[ $fIdx ] ];
                $blue[$index]  = $sideBlue [ $faceSide[ $fIdx ] ];

                $index++;
                
            }
        }
        
        // Use the collected information to colour the mesh.
        polyColorPerVertexArray( $vi, $fi, $red, $green, $blue, $mesh[$i] );

        // Clean up arrays for next run.
        clear $faceVisited;
        clear $sideRed;
        clear $sideGreen;
        clear $sideBlue;
        clear $faceSide;
        clear $vi;
        clear $fi;
        clear $red;
        clear $green;
        clear $blue;
    }
    clear $mesh;

    select $selection;

    print "Finished remapping.\n";

    return true;
}


    
