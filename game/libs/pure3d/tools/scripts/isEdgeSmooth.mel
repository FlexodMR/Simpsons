//===========================================================================
// Copyright ©2002 Radical Entertainment Ltd.  All rights reserved.
//
// Created:     30 January, 2002
// Modified:    30 January, 2002
// Version:     1.0
//
// Component:   
//
// Description: isEdgeSmooth.mel -- Determines if a specified edge is smooth.
//
// Constraints: 
//
// Creator:     Bryan Ewert
//
//===========================================================================

// ////////////////////////////////////////////////////////////////
//  rootNode
//
// Description: Strips the dot-suffix of the specified string.
//  e.g. "object.attribute" is returned as "object"
proc string rootNode( string $object )
{
    string $buffer[];
    tokenize $object "." $buffer;
    return $buffer[0];
}

proc int indexFromComponent( string $component )
{
    string $regex1 = "(\[[0-9]+\])";
    string $regex2 = "[0-9]+";
    
    string $first = `match $regex1 $component`;
    int $index = `match $regex2 $first`;
    
    return $index;
}

//===========================================================================
// isEdgeSmooth
//===========================================================================
// Description: Determines if the specified edge is smooth.
//
//              A "smooth" edge is one whereby Maya uses only a single
//              normal for each vertex associated with the edge (with respect
//              to the associated faces).  There is no direct "smooth edge"
//              query via MEL.  This function queries the four normals
//              corresponding to the four .vtxFace[] components for the 
//              edge and, for each pair, uses a dot product to determine
//              if their vectors are close enough to consider equal.
//
// Constraints: 
//
//  Parameters: string $edge: The edge component to query; e.g. "pCube1.e[0]".
//
//      Return: (int): TRUE if edge is smooth; else FALSE.
//
//===========================================================================
global proc int isEdgeSmooth( string $edge )
{
    string $rootNode = rootNode( $edge );
    
    float $epsilon = 0.001;
    int $v, $f0, $f1;
    
    string $face[] = `polyListComponentConversion -fe -tf $edge`;
    $face = `filterExpand -sm 34 -ex true $face`;

    // If there aren't two faces for this edge then it is a border edge
    // and it cannot possibly be smooth (or it is implictly smooth, I haven't decided which).
    if ( `size $face` < 2 )
    {
        return false;
    }
    
    string $vtx[] = `polyListComponentConversion -fe -tv $edge`;
    $vtx = `filterExpand -sm 31 -ex true $vtx`;

    int $numDiscrete = 2;
    
    for ( $i = 0; $i < 2; $i++ )
    {
        $v = indexFromComponent( $vtx[$i] );
        $f0 = indexFromComponent( $face[0] );
        $f1 = indexFromComponent( $face[1] );      
        
//      Use cachedPolyNormalPerVertex to avoid Maya 4.0 undo bug in polyNormalPerVertex
//      float $n1[3] = `polyNormalPerVertex -q -xyz ( $rootNode + ".vtxFace[" + $v + "][" + $f0 + "]" )`;
        float $n1[3] = cachedPolyNormalPerVertex( $rootNode, $v, $f0 );
//      float $n2[3] = `polyNormalPerVertex -q -xyz ( $rootNode + ".vtxFace[" + $v + "][" + $f1 + "]" )`;
        float $n2[3] = cachedPolyNormalPerVertex( $rootNode, $v, $f1 );

        
        vector $v1 = << $n1[0], $n1[1], $n1[2] >>;
        vector $v2 = << $n2[0], $n2[1], $n2[2] >>;
        
        if ( ( $v1 * $v2 ) > ( 1.0 - $epsilon ) )
        {
            --$numDiscrete;
        }
    }
    
    return ( $numDiscrete == 0 );
}
