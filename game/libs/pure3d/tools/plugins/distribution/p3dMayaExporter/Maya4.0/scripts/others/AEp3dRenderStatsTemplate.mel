//===========================================================================
// Copyright ©2002 Radical Entertainment Ltd.  All rights reserved.
//
// Created:     03 May, 2002
//
// Component:   AEp3dRenderStats.mel
//
// Description: Maya Attribute Editor template to display Pure3D
//              Render Stats; e.g:
//
//                  Draw Order
//
// Constraints: 
//
// Creator:     Bryan Ewert
//
//===========================================================================

proc int isBitSet( int $value, int $bit )
{
    int $isBitSet = false;
    
    for ( $i = 8; $i >= 0; $i-- )
    {
        int $bitpow = `pow 2 $i`;
        
        if ( $value < $bitpow )
            continue;
            
        if ( $i == $bit )
        {
            $isBitSet = true;
            break;
        }
        
        $value -= $bitpow;
    }
    
    return $isBitSet;
}

proc int IsSkeletonRoot( string $node )
{
    int $isSkeletonRoot = false;

    if ( `attributeQuery -node $node -exists "p3dBooleanAttributes"` )
    {
        if ( isBitSet( `getAttr ( $node + ".p3dBooleanAttributes" )`, 1 ) )
        {
            $isSkeletonRoot = true;
        }
    }

    return $isSkeletonRoot;
}

proc string getCurrentCamera()
{
  string $camera;

  // First get the panel that currently has focus
  string $panel = `getPanel -wf`;

  // Compare the panel's type to confirm it is a "modelPanel"
  if ( "modelPanel" == `getPanel -to $panel` )
  {
    // Get the name of the camera using the ‘modelEditor’ command
    $camera = `modelEditor -q -camera $panel`; 
  }

  return $camera;
}

//===========================================================================
// getTransform
//===========================================================================
// Description: Returns the transform for the specified shape node.
//
//  Parameters: string $shape: The shape node.
//
//      Return: (string): The transform node.
//
//===========================================================================
proc string getTransform( string $shape )
{
    string $transform = $shape;
    
    // Special case for "joint" -- 
    // a joint is a transform and has no corresponding Shape.
    if ( `objExists $shape` && ( "transform" != `nodeType $shape` ) && ( "joint" != `nodeType $shape` ) )
    // If given node is already a transform, just pass on through
    {
        string $parents[] = `listRelatives -fullPath -parent $shape`;
        $transform = $parents[0];
    }

    return $transform;
}

//===========================================================================
// AEp3dRenderStatsTemplate
//===========================================================================
// Description: Maya Attribute Editor template for mesh Vertex Animation.
//
//              The associated attributes are added care of 'p3dMeshTags()'
//              in "p3dTags.mel".
//
//===========================================================================
global proc AEp3dRenderStatsTemplate( string $node )
{
    // Don't use editorTemplate for layout .. use p3dFrameLayout instead.
//    editorTemplate -beginLayout "Pure3D Vertex Animation" -collapse 0;

        editorTemplate -callCustom 
            "AEp3dRenderStatsNew"
            "AEp3dRenderStatsReplace"
                "";

        editorTemplate -suppress "p3dDrawOrder";

//        editorTemplate -endLayout;
    
}

global proc AEp3dRenderStatsNew( string $node )
{
    string $rootNode = `match "[^\.]*" $node`;
    string $nodeType = `nodeType $rootNode`;

    string $renderStatsFrameUI = "renderStatsFrameUI";
    string $renderStatsHideUI = ( $nodeType + "RenderStatsHideUI" );
    string $renderStatsNobodyHomeUI = ( $nodeType + "RenderStatsNobodyHomeUI" );

    string $renderStatsDrawOrderUI = ( $nodeType + "RenderStatsDrawOrderUI" );
    string $renderStatsAnnoUI = ( $nodeType + "RenderStatsAnnoUI" );
    string $renderStatsCalculateUI = ( $nodeType + "RenderStatsCalculateUI" );

    int $width2 = 20;
    int $width3 = 72;
    int $width4x4 = 86;

    string $url[] = p3dFrameLayout( "Pure3D Render Stats", "http://radnet/teams/atg/Pure3D%20Maya%20Plugins/Exporter/renderStats.html", true, true );

    columnLayout;

        columnLayout -adj true $renderStatsHideUI;  // Hide this if no Render Stats

            floatSliderGrp -label "Draw Order" -min 0.0 -max 1.0 -value 0.5 $renderStatsDrawOrderUI;

            rowLayout -nc 2;
                text -label "";
                text -label "Default sort order." $renderStatsAnnoUI;

                setParent ..;

            rowLayout -nc 2;
                text -label "";
                button -label "Calculate For Selected Objects..." $renderStatsCalculateUI;

                setParent ..;

            setParent ..;

        columnLayout -adj true $renderStatsNobodyHomeUI;  // Hide this if no Render Stats

            rowLayout -nc 2;
                text -label "";
                text -label "Pure3D Render Stats not applicable.";
                setParent ..;

            setParent ..;

        setParent ..;

    PopP3dFrameLayout( $url );

    button -e
        -c "p3dCalculateDrawOrder"
            $renderStatsCalculateUI;

    AEp3dRenderStatsReplace $node;
}

global proc AEp3dRenderStatsReplace( string $node )
{
    string $rootNode = `match "[^\.]*" $node`;
    string $nodeType = `nodeType $rootNode`;

    string $hasRenderStatsUI = "hasRenderStatsUI";
    string $renderStatsHideUI = ( $nodeType + "RenderStatsHideUI" );
    string $renderStatsNobodyHomeUI = ( $nodeType + "RenderStatsNobodyHomeUI" );

    string $renderStatsAnnoUI = ( $nodeType + "RenderStatsAnnoUI" );

    string $renderStatsDrawOrderUI = ( $nodeType + "RenderStatsDrawOrderUI" );

    int $rsEnable = ( ( `attributeQuery -node $rootNode -exists "p3dDrawOrder"` ) && 
                      ( ( $nodeType != "transform" ) || ( IsSkeletonRoot( $rootNode ) ) )
                    );

    columnLayout -e
        -visible $rsEnable
        -manage $rsEnable
            $renderStatsHideUI;

    columnLayout -e
        -visible (!$rsEnable)
        -manage (!$rsEnable)
            $renderStatsNobodyHomeUI;

    if ( $rsEnable )
    {
        connectControl $renderStatsDrawOrderUI ( $node + "p3dDrawOrder" );

        floatSliderGrp -e
            -cc ( "AEp3dRenderStatsUpdate \"" + $node + "\"" )
                $renderStatsDrawOrderUI;

        AEp3dRenderStatsUpdate $node;
    }
}

global proc AEp3dRenderStatsUpdate( string $node )
{
    string $rootNode = `match "[^\.]*" $node`;
    string $nodeType = `nodeType $rootNode`;

    string $renderStatsAnnoUI = ( $nodeType + "RenderStatsAnnoUI" );

    float $p3dDrawOrder = `getAttr ( $node + "p3dDrawOrder" )`;
    if ( $p3dDrawOrder < 0.5 )
    {
        text -e -label "Draw in front of default." $renderStatsAnnoUI;
    }
    else if ( $p3dDrawOrder > 0.5 )
    {
        text -e -label "Draw behind default." $renderStatsAnnoUI;
    }
    else
    {
        text -e -label "Default draw order." $renderStatsAnnoUI;
    }
}

global proc p3dCalculateDrawOrderConstrain( string $fromUI, string $toUI, int $which )
{
    float $fromValue = `floatSliderGrp -q -value $fromUI`;
    float $toValue = `floatSliderGrp -q -value $toUI`;
    float $value = 0.5;

    switch( $which )
    {
        case 0: // callback by From slider
            $value = max( $fromValue, $toValue );
            floatSliderGrp -e -value $value $toUI;
            break;

        case 1: // callback by To slider
            $value = min( $fromValue, $toValue );
            floatSliderGrp -e -value $value $fromUI;
            break;
    }
}

global proc p3dCalculateDrawOrderGo( string $fromUI, string $toUI )
{
    float $fromValue = `floatSliderGrp -q -value $fromUI`;
    float $toValue = `floatSliderGrp -q -value $toUI`;

    string $select[] = `ls -sl`;
    if ( `size $select` == 0 ) return;

    float $all[];
    float $minDistance = -1.0;
    float $maxDistance = -1.0;

    // Which is the current camera?
    string $camera = getCurrentCamera();
    if ( $camera == "" ) 
    {
        error ( "Could not calculate draw order.. Please select a Camera View." );
        return;
    }

    // My experience has defined the _actual_ position of 
    // an object to be derived from its Rotate Pivot.
    float $cameraPos[3] = `xform -ws -q -rp $camera`;
    vector $vCamera = << $cameraPos[0], $cameraPos[1], $cameraPos[2] >>;

    int $i;

    // First go through and get range
    for ( $i = 0; $i < `size $select`; $i++ )
    {
        $all[$i] = -1.0;

        if ( `attributeQuery -node $select[$i] -exists "p3dDrawOrder"` )
        {
            string $transform = getTransform( $select[$i] );

            // How far is this object from the camera?
            // My experience has defined the _actual_ position of 
            // an object to be derived from its Rotate Pivot.
            float $pos[3] = `xform -ws -q -rp $transform`;
            vector $vPos = << $pos[0], $pos[1], $pos[2] >>;

            $all[$i] = mag( $vPos - $vCamera );

            if ( $minDistance == -1.0 )
            {
                $minDistance = $all[$i];
            }
            else
            {
                $minDistance = min( $minDistance, $all[$i] );
            }

            if ( $maxDistance == -1.0 )
            {
                $maxDistance = $all[$i];
            }
            else
            {
                $maxDistance = max( $maxDistance, $all[$i] );
            }
        }
    }

    float $depth = ( $maxDistance - $minDistance );

    // Second pass sets sort order
    for ( $i = 0; $i < `size $select`; $i++ )
    {
        if ( $all[$i] >= 0.0 )
        {
            // Get 0-1 range
            float $value = 0.5;
            if ( $depth > 0.0 )
            {
                $value = ( ( $all[$i] - $minDistance ) / $depth );
            }

            // Adjust to range requested.
            $value = $value * ( $toValue - $fromValue ) + $fromValue;

            setAttr ( $select[$i] + ".p3dDrawOrder" ) $value;
        }
    }
}

global proc p3dCalculateDrawOrder()
{
    if ( `window -exists p3dCalculateDrawOrderUI` )
    {
        deleteUI p3dCalculateDrawOrderUI;
    }

    string $p3dDrawOrderFromSliderUI = "p3dDrawOrderFromSliderUI";
    string $p3dDrawOrderToSliderUI = "p3dDrawOrderToSliderUI";

    string $p3dDrawOrderGoUI = "p3dDrawOrderGoUI";

    window -title "Calculate Draw Order" p3dCalculateDrawOrderUI;

    string $form = `formLayout`;

        floatSliderGrp 
            -columnWidth 1 32
            -field true -precision 3
            -label "From" -min 0.0 -max 1.0 -value 0.0 
                $p3dDrawOrderFromSliderUI;
        floatSliderGrp 
            -columnWidth 1 32
            -field true -precision 3
            -label "To" -min 0.0 -max 1.0 -value 1.0 
                $p3dDrawOrderToSliderUI;

        button -label "Go" $p3dDrawOrderGoUI;

        setParent ..;

    formLayout -e
        
        -af     $p3dDrawOrderFromSliderUI       "top"       4
        -af     $p3dDrawOrderFromSliderUI       "left"      4
        -af     $p3dDrawOrderFromSliderUI       "right"     4

        -ac     $p3dDrawOrderToSliderUI         "top"       4   $p3dDrawOrderFromSliderUI
        -af     $p3dDrawOrderToSliderUI         "left"      4
        -af     $p3dDrawOrderToSliderUI         "right"     4

        -ac     $p3dDrawOrderGoUI               "top"       4   $p3dDrawOrderToSliderUI
        -ap     $p3dDrawOrderGoUI               "left"      2   25
        -ap     $p3dDrawOrderGoUI               "right"     2   75

            $form;

    button -e
        -c ( "p3dCalculateDrawOrderGo \"" + $p3dDrawOrderFromSliderUI + "\" \"" + $p3dDrawOrderToSliderUI + "\"" )
            $p3dDrawOrderGoUI;

    floatSliderGrp -e
        -cc ( "p3dCalculateDrawOrderConstrain \"" + $p3dDrawOrderFromSliderUI + "\" \"" + $p3dDrawOrderToSliderUI + "\" 0" )
            $p3dDrawOrderFromSliderUI;

    floatSliderGrp -e
        -cc ( "p3dCalculateDrawOrderConstrain \"" + $p3dDrawOrderFromSliderUI + "\" \"" + $p3dDrawOrderToSliderUI + "\" 1" )
            $p3dDrawOrderToSliderUI;

    showWindow;
}
