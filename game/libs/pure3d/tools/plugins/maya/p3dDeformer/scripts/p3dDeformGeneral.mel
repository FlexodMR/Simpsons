// Copyright (C) 2000 Radical Entertainment
// 
// Name:   p3dDeformGeneral.mel
// Author: Senta Kaiser
// Modified: Pamela Chow (Sept 2001)
//
// Description: Procedures not specific to a particular tab
// Contents:
// global proc p3dDeformExpressionUICreateGroup()
// global proc p3dDeformExpressionUISetNeutral()
// global proc string p3dDeformFindInHistory(string $node_type, int $future, string $obj)
// global proc string p3dDeformFindInHistory(string $node_type, int $future, string $obj)


// Callback when "Create Group" button is clicked
//

global proc p3dDeformExpressionUICreateGroup()
{
   string $sel[] = `ls -sl`;
   int $sel_count = size($sel);

   if($sel_count < 1)
   {
      error "No mesh selected";
   }  
   else if($sel_count >1)
   {
      error "Only one mesh should be selected";
   }

   p3dDeformExpressionGroupCreate;
   p3dDeformSetupNoCreate;
}

// Callback when "Set Neutral" button is clicked
//
global proc p3dDeformExpressionUISetNeutral()
{
   string $sel[] = `ls -sl -tr -s`; //only allow setting neutral on shapes or transform nodes
   int $sel_count = size($sel);

   if($sel_count < 1)
   {
      error "No mesh selected";
   }  
   else if($sel_count >1)
   {
      error "Only one mesh should be selected";
   }
   
   string $msg = "Do you want to change the neutral shape for the mesh?";
   string $yesno = `confirmDialog -title "Confirm" -message $msg
                      -button "Yes" -button "No" -defaultButton "Yes"
                      -cancelButton "No" -dismissString "No"`;
         
   if ($yesno == "No")
   {
      return;
   }

   p3dDeformMeshNeutralUpdate $sel[0];
}

// Finds first node of particular type in history of passed object
// - arguments - node_type - node type name to look for
//             - future - set to 1 if look in future rather than past
//             - obj - the object whose history is being perused
//
global proc string p3dDeformFindInHistory(string $node_type, int $future, string $obj)
{
   string $is_type[] = `ls -type $node_type $obj`;
   int $is_type_count = size($is_type);

   if ($is_type_count)
   {
      return $obj;
   }

   string $hist_cmd;
   if ($future)
   {
      $hist_cmd = "listHistory -f true " + $obj;
   }
   else
   {
      $hist_cmd = "listHistory " + $obj;
   }

   string $hist[] = eval($hist_cmd);
   int $hist_count = size($hist);

   int $i;
   for ($i = 0; $i < $hist_count; $i++)
   {
      $is_type = `ls -l -type $node_type $hist[$i]`;
      $is_type_count = size($is_type);

      if ($is_type_count)
      {
         //return $hist[$i];
         return $is_type[0];
      }
   }

   return "";
}

global proc int p3dDeformFindKeyIndex(string $key_index_array, float $keyVal)
{
   int $size = `getAttr -size $key_index_array`;
   int $i;
   int $index;
   float $curKey;
   for ($i=0; $i < $size; $i++)
   {
      $curKey = eval("getAttr " + $key_index_array + "[" + $i + "]");
      
      if (abs($curKey - $keyVal) < 0.001)
      {
         $index = $i;
         break;
      }
      else $index = -1;

   }
   if ($index == -1)
   {
      for ($i=0; $i < $size; $i++)
      {
         $curKey = eval("getAttr " + $key_index_array + "[" + $i + "]");
      
         if ((abs($curKey-0.001 - $keyVal) < 0.001) || (abs($curKey+0.001 - $keyVal) < 0.001))
         {
            $index = $i;
            break;
         }
      }

      
   }
   if ($index == -1)
      print("\nDidn\'t find the key.");
   return $index;  

}