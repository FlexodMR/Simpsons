/*===========================================================================
    Automatically generated by Jeeves, don't edit.  Edit p3dgc.sc instead

    File: Param.hpp 

    Command line parameters for p3dgc

       This tool memory images a P3D file for the GameCube

    Copyright (c) 2015 Radical Entertainment, Inc.  All rights reserved.

===========================================================================*/

#ifndef _PARAM_HPP
#define _PARAM_HPP

#include "tlTable.hpp"
#include "tlStringTable.hpp"

class tFile;
class tlDataChunk;

class Parameters
{

public:
    tlStringTable Files;

    Parameters(int argc, char* argv[]);
    ~Parameters();

    void          ShortUsage();                  //: Print a short usage message
    void          Usage();                       //: Print a usage message
    void          VersionHistory(int count = 1); //: Print version history
    tlDataChunk*  HistoryChunk();                //: Return a File History chunk

    // Tool specific parameters

   int   Dump                ;//: Prints the contents of a GameCube memory imaged
                             //   file
   int   IntelFormat         ;//: Writes the file in little endian format
                             //   (Intel), default is big endian
   int   MemoryImage         ;//: Convert textures, geometries and skins to
                             //   memory image format
   int   MemoryImageSkins    ;//: Convert only skins to memory image format
   int   MemoryImageGeometry ;//: Convert only geometries to memory image format
   int   MemoryImageTextures ;//: Convert only textures to memory image format
   char* OutputFile          ;//: Specify output file name
   int   CoordSize           ;//: Number of bits per component in the coordinate 
                             //  (8, 16, 32)
   int   NormalSize          ;//: Number of bits per component in the normal, (1 
                             //  for porcupine, 8, 16, 32) 
   int   ColourSize          ;//: Number of bits for colour component, (1 for
                             //   greyscale with no alpha, or 32 bit)
   int   UVSize              ;//: Number of bits per component for ALL UVs (8,
                             //   16, 32)This is overriden by individual
                             //   settings
   int   UV0Size             ;//: Number of bits per component for UV0 (8, 16,
                             //   32)
   int   UV1Size             ;//: Number of bits per component for UV1 (8, 16,
                             //   32)
   int   UV2Size             ;//: Number of bits per component for UV2 (8, 16,
                             //   32)
   int   UV3Size             ;//: Number of bits per component for UV3 (8, 16,
                             //   32)
   int   UV4Size             ;//: Number of bits per component for UV4 (8, 16,
                             //   32)
   int   UV5Size             ;//: Number of bits per component for UV5 (8, 16,
                             //   32)
   int   UV6Size             ;//: Number of bits per component for UV6 (8, 16,
                             //   32)
   int   UV7Size             ;//: Number of bits per component for UV7 (8, 16,
                             //   32)

    // Standard parameters implemented by all tools

    int         Verbosity;                    //: How much noise should this program make?
    int         WriteHistory;                 //: Should the tool write a history chunk?

private:

   void filebuildup(char* filename);

   bool     isPattern;
   bool     Recurse;
   char* FilePattern;

    int      Argc;
    char**   Argv;
};

extern Parameters* Param;

#endif
