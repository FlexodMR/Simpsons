@perl use Wrap;
@perl $Wrap::columns = 80;
@perl sub max { my($a,$b) = @_; ($a>$b)?($a):($b);}
@perl sub pad { my($len,$str) = @_; sprintf("%-${len}s",$str); }
@perl ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) = localtime(time);
@perl $year = $year+1900;
@perl $toolname = $ROOT->{toolname};
@perl $perlscript = $ROOT->{perlscript};
@perl $perlscript = 0 unless defined $perlscript;
@perl print "Generating Param.hpp\n";
@perl $wrappeddescription = wrap("","   ","\n",$description);
@perl %typemap = ( "string" => "char*", 
@perl              "BOOL"   => "int",
@perl              "Pattern" => "tlStringTable",
@perl              "IntList" => "tlTable<int>",
@perl              "HexList" => "tlTable<int>",
@perl              "hexint" => "int"
@perl            );
@openfile Param.hpp 
/*===========================================================================
    Automatically generated by Jeeves, don't edit.  Edit ${toolname}.sc instead

    File: Param.hpp 

    Command line parameters for ${toolname}

    $wrappeddescription

    Copyright (c) $year Radical Entertainment, Inc.  All rights reserved.

===========================================================================*/

#ifndef _PARAM_HPP
#define _PARAM_HPP

#include "tlTable.hpp"
#include "tlStringTable.hpp"

class tFile;
class tlDataChunk;

class Parameters
{

public:
    tlStringTable Files;

    Parameters(int argc, char* argv[]);
    ~Parameters();

    void          ShortUsage();                  //: Print a short usage message
    void          Usage();                       //: Print a usage message
    void          VersionHistory(int count = 1); //: Print version history
    tlDataChunk*  HistoryChunk();                //: Return a File History chunk
@if ($perlscript)

    char*         ScriptFile;                    //: The file to read.
    void          GetScriptParams();             //: Read any parameters from the perl script
    void          ScriptHelp();                  //: Describe script variables
    void          DumpScriptParams();            //: Write out the options as a script file
@endif

    // Tool specific parameters

@// compute longest parameter type name
@perl my $longesttype = length("void");
@perl my $longestparam = length("a");
@foreach param_list ($param_type ne "none")
    @perl my $type = $param_type;
    @perl $type = $typemap{$param_type} if defined $typemap{$param_type}; 
    @perl $type .= "*" if $array;
    @perl $longesttype = max($longesttype, length($type));
    @perl $longestparam = max($longestparam, length($param_name));
@end
@foreach param_list ($param_type ne "none")
    @perl my $type = $param_type;
    @perl $type = $typemap{$param_type} if defined $typemap{$param_type}; 
    @perl $type .= "*" if $array;
    @perl $type = pad($longesttype, $type);
    @perl $name = "$param_name;";
    @if (defined $param_description)
      @perl $name = pad($longestparam+1, "$param_name;");
      @perl my $desc = wrap("   $type $name //: "," "x($longesttype+$longestparam+6) . "//  ", "\n", $param_description);
      @perl chomp($desc);
$desc
    @else
    $type $name
    @endif
@end

    // Standard parameters implemented by all tools

    int         Verbosity;                    //: How much noise should this program make?
    int         WriteHistory;                 //: Should the tool write a history chunk?

private:

   void filebuildup(char* filename);

   bool     isPattern;
   bool     Recurse;
   char* FilePattern;

    int      Argc;
    char**   Argv;
};

extern Parameters* Param;

#endif

