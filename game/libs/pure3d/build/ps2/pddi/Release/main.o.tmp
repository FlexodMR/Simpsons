# 1 "../../../../pure3d/pddi/ps2/quad-vu/main.dsm"
.global PDDI_VU1_code_start
.global PDDI_VU1_code_end
.global VU_BASE
.global VU_LOAD_CONTEXT
.global VU_XGKICK
.global VU_UNLIT_TRI
.global VU_UNLIT_TRI_MT
.global VU_UNLIT_TRI_PROJTEX
.global VU_UNLIT_TRI_TEXGEN_MT
.global VU_UNLIT_TRI_ENVMAP_MT
.global VU_SET_PASS_0
.global VU_SET_PASS_1
.global VU_UNLITFOG_TRI
.global VU_LIT_TRI
.global VU_LITSPEC_TRI
.global VU_LITSPECFOG_TRI
.global VU_LITFOG_TRI
.global VU_LINE
.global VU_DONOTHING
.global VU_SNOW
.global VU_SKINBLEND_NT
.global VU_SKINBLEND1B_NT
.global VU_REFRACT
.global VU_SKINBLEND_CT
.global VU_SKINBLEND1B_CT
.global VU_TOON
.global VU_REFLECT
.global VU_SHADOW_VOL
.global VU_END
.global VU_LOADPRIMGROUP
.global VU_CHECKSKINNING_LOADPRIMGROUP
.global VU_LIT_PROGRAM
.global VU_UNLIT_PROGRAM




# 1 "../../../../pure3d/pddi/ps2/quad-vu/usercode/vu_user_globals.h" 1
 





# 38 "../../../../pure3d/pddi/ps2/quad-vu/main.dsm" 2


PDDI_VU1_code_start:
.align 0
DMAend * 
MPG 0, *
VU_BASE:
# 1 "../../../../pure3d/pddi/ps2/quad-vu/regmap.h" 1
 
 
 
 
 




 
 
 
 
 
 
 
 
 
 
 
 
 
 
 





















 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 





























# 45 "../../../../pure3d/pddi/ps2/quad-vu/main.dsm" 2

# 1 "../../../../pure3d/pddi/ps2/quad-vu/vu_macro.h" 1
;-----------------------------------------------------------------------------------------
; break point macro
;-----------------------------------------------------------------------------------------
.macro BREAK
   nop nop
   nop[t] nop
   .rept 5
      nop nop
   .endr
.endm

.macro DBREAK
   nop[d] nop
   nop    nop
.endm   

.macro SaveIntVector4 offset, reg, val1, val2, val3, val4
    nop mfir.x vf01, \val1
    nop mfir.y vf01, \val2
    nop mfir.z vf01, \val3
    nop mfir.w vf01, \val4
    nop sq.xyzw vf01, \offset(\reg)
.endm

.macro LoadIntVector4 offset, reg, val1, val2, val3, val4
    nop lq.xyzw vf01, \offset(\reg)
    nop mtir \val1,vf01x
    nop mtir \val2,vf01y
    nop mtir \val3,vf01z
    nop mtir \val4,vf01w
.endm


.macro x_lessthan_w e1, e2, r
   subw.x vf00, \e1, \e2   iaddiu \r, vi00, 0x80 ; sign bit for x 
   nop                     nop
   nop                     nop
   nop                     nop
   nop                     fmeq \r, \r
.endm

.macro x_lessthan_neg_w e1, e2, r
   addx.w vf00, \e1, \e2   iaddiu \r, vi00, 0 ; sign bit for x 
   nop                     nop
   nop                     nop
   nop                     nop
   nop                     fmeq \r, \r
.endm

.macro y_lessthan_w e1, e2, r
   subw.y vf00, \e1, \e2   iaddiu \r, vi00, 0x40 ; sign bit for y 
   nop                     nop
   nop                     nop
   nop                     nop
   nop                     fmeq \r, \r
.endm

.macro y_lessthan_neg_w e1, e2, r
   addy.w vf00, \e1, \e2   iaddiu \r, vi00, 0 ; sign bit for y 
   nop                     nop
   nop                     nop
   nop                     nop
   nop                     fmeq \r, \r
.endm


.macro z_lessthan_w e1, e2, r
   subw.z vf00, \e1, \e2   iaddiu \r, vi00, 0x20 ; sign bit for z
   nop                     nop
   nop                     nop
   nop                     nop
   nop                     fmeq \r, \r
.endm

.macro z_lessthan_neg_w e1, e2, r
   subw.z vf00, \e1, \e2   iaddiu \r, vi00, 0 ; sign bit for z
   nop                     nop
   nop                     nop
   nop                     nop
   nop                     fmeq \r, \r
.endm

.macro test_clip

   ; check clip flag
   nop                              iaddiu vi01, vi00, 1
   nop                              iand   vi01,VI11 ,vi01
   nop                              nop

   nop                              ibeq vi01,vi00,test_clip_skip\@      ; clip flag not set
   nop                              nop

   ; check to see if we need to clip
   nop                              ibeq vi03,vi00,test_clip_skip\@      ; no triangles need clipping
   nop                              nop

   ; yeah gotta clip!
   nop                              bal vi15, CLIPBUFFER
   nop                              nop
test_clip_skip\@:
.endm

.macro test_bfc_clip

; apr/23/2002 amb : todo, FIX THIS?!?!?!?!?
# 121 "../../../../pure3d/pddi/ps2/quad-vu/vu_macro.h"


   nop                              iaddi vi01,VI11 ,-2
   nop                              nop
            
   nop                              ibltz vi01,test_skip_bfc\@
   nop                              nop

   ; vi05 = vert count
   ; vi04 = vertex buffer
   nop                              iadd vi05,vi00,VI13 
   nop                              iaddiu vi04,VI14 ,1
      
   ; go to the backface culler!
   nop                              bal vi15,BACKFACE_CULL
   nop                              nop

test_skip_bfc\@:
   ; check clip flag
   nop                              iaddiu vi01, vi00, 1
   nop                              iand   vi01,VI11 ,vi01
   nop                              nop

   nop                              ibeq vi01,vi00,test_skip_clip\@      ; clip flag not set
   nop                              nop

   ; check to see if we need to clip
   nop                              ibeq vi03,vi00,test_skip_clip\@      ; no triangles need clipping
   nop                              nop

   ; yeah gotta clip!
   nop                              bal vi15, CLIPBUFFER
   nop                              nop
test_skip_clip\@:

.endm

;-----------------------------------------------------------------------------------------

.macro test_shadow_bfc_clip

   ; vi05 = vert count
   ; vi04 = vertex buffer
   nop                              iadd vi05,vi00,VI13 
   nop                              iaddiu vi04,VI14 ,1
      
   nop                              bal vi15,SHADOW_BACKFACE_CULL
   nop                              nop

   nop                              ibeq vi03,vi00,test_shadow_skip_clip\@      ; no triangles need clipping
   nop                              nop

   ; yeah gotta clip!
   nop                              bal vi15, CLIPBUFFER
   nop                              nop
test_shadow_skip_clip\@:

.endm


;-----------------------------------------------------------------------------------------
; load primgroup
;-----------------------------------------------------------------------------------------
; this macro loads a VU1_Primgroup structure (from ps2context.cpp) that has been
; DMAed into VU1 memory into registers

; warning:  vi06 is used for the output buffer pointer
; some v16 program use this for the clipper.

.macro check_skinning
    nop      xtop vi04
    nop      ilwr.y vi02, (vi04)y             ; Load flags register
    nop      iaddiu vi01, vi00, 1 << 1        ; mask bit for skinning flag
    nop      iand vi02, vi02, vi01            ; mask out everything but skinning flag
    nop      nop
    nop      ibeq vi02, vi00, no_skinning\@   ; branch to no_skinning local label
    nop      iaddiu vi02, vi00, 1023          ; create pointer to skinning info for skinning program, not used if not skinning  
    nop      bal vi15, VU_SKINBLEND           ; jump to skinning code
    nop      ilwr.w vi10, (vi04)w             ; Load scratch area pointer
no_skinning\@:
.endm

.macro load_primgroup
    nop      xtop vi04
    nop      iaddiu vi01, vi00, 1 << 0        ; mask bit for tristrip flag  
    nop      ilwr.x VI13 , (vi04)x            ; load vertex count
    nop      ilwr.y VI12 , (vi04)y        ; load tristrip flag
    nop      ilwr.z vi06, (vi04)z             ; load offset of output bufer
    nop      iadd vi06, vi06, vi04            ; offset output buffer address by xitop
    nop      iadd vi05, vi00, VI13            ; store vertex count
    nop      iand VI12 , VI12 , vi01  ; mask out everything but tristrip bit
    nop      lq vf01, 1(vi04)                 ; load giftag   
    nop      sq vf01, 0(vi06)                 ; store giftag at start of output buffer
    nop      iadd VI14 , vi00, vi06         ; remember giftag address
    nop      iaddiu vi06, vi06, 1             ; first output vertex address
    nop      iaddiu vi04, vi04, 2             ; first input vertex address
.endm

;-----------------------------------------------------------------------------------------
; load transform context
;-----------------------------------------------------------------------------------------
; this macro loads a VU_Context_Transform structure (from ps2context.cpp) that has been
; DMAed into VU1 memory into registers
;   vi01 : starting pointer of VU_Context_Transform structure
;   vi08 : current pointer into VU_Context_Transform structure
.macro load_transform_context
    nop      iaddiu vi08, vi01, 0           ; store starting pointer of VU_Context_Transform structure
    nop      iaddiu vi02, vi01, 4           ; address of projection matrix
    nop      bal vi15, MultMatrix           ; CTM * projection
    nop      iadd vi03, vi01, vi00          ; address of destination matrix (stomp over CTM)

    nop      lqi VF26 , (vi08++)            ; load CTM*projection
    nop      lqi VF27 , (vi08++)
    nop      lqi VF28 , (vi08++)
    nop      lqi VF29 , (vi08++)

    nop      iaddiu vi08, vi08, 4           ; skip past projection matrix

    nop      lqi VF30 , (vi08++)             ; viewport scale (xy), z scale (z), fog scale (w)
    nop      lqi VF31 , (vi08++)             ; viewport offset (xy), z offset (z), fog offset (w)

    nop      ilwr.x VI11 , (vi08)x       ; load clipper enabled flag
    nop      iaddiu vi08, vi08, 1
.endm

;-----------------------------------------------------------------------------------------
; load lighting context
;-----------------------------------------------------------------------------------------
; this macro loads a VU_Context_Lighting structure (from ps2context.cpp) that has been
; DMAed into VU1 memory into registers
;   vi01 : starting pointer of VU_Context_Lighting structure
;   vi08 : current pointer into VU_Context_Lighting structure
.macro load_lighting_context
    nop      iaddiu vi08, vi01, 0           ; starting address of VU_Context_Lighting
    nop      lqi VF18 , (vi08++)             ; light direction matrix
    nop      lqi VF19 , (vi08++)
    nop      lqi VF20 , (vi08++)

    nop      lqi VF21 , (vi08++)           ; light colour vectors
    nop      lqi VF22 , (vi08++)
    nop      lqi VF23 , (vi08++)
    nop      lqi VF24 , (vi08++)

    nop      lqi VF16 , (vi08++)       ; load additive lighting term
    nop      lqi VF17 , (vi08++)       ; load specular lighting term
    nop      lqi VF25 , (vi08++)            ; view vector, shininess (w)
.endm
# 46 "../../../../pure3d/pddi/ps2/quad-vu/main.dsm" 2

# 1 "../../../../pure3d/pddi/ps2/quad-vu/math.vsm" 1
; MultMatrix (4x4) 
;   vi01 : address of source matrix
;   vi02 : address of source matrix
;   vi03 : address of destination matrix
;   vf03-vf10 : temp usage
;   22 cycles
MultMatrix:
    nop                             lqi.xyzw vf07, (vi02++)
    nop                             lqi.xyzw vf03, (vi01++)
    mulax.xyzw acc, vf03, vf07x     lqi.xyzw vf04, (vi01++)
    madday.xyzw acc, vf04, vf07y    lqi.xyzw vf05, (vi01++)
    maddaz.xyzw acc, vf05, vf07z    lqi.xyzw vf06, (vi01++)
    maddw.xyzw vf07, vf06, vf07w    lqi.xyzw vf08, (vi02++)
    mulax.xyzw acc, vf03, vf08x     lqi.xyzw vf09, (vi02++)
    madday.xyzw acc, vf04, vf08y    lqi.xyzw vf10, (vi02++)
    maddaz.xyzw acc, vf05, vf08z    nop
    maddw.xyzw vf08, vf06, vf08w    sqi.xyzw vf07, (vi03++)
    mulax.xyzw acc, vf03, vf09x     nop
    madday.xyzw acc, vf04, vf09y    nop
    maddaz.xyzw acc, vf05, vf09z    nop
    maddw.xyzw vf09, vf06, vf09w    sqi.xyzw vf08, (vi03++)
    mulax.xyzw acc, vf03, vf10x     nop
    madday.xyzw acc, vf04, vf10y    nop
    maddaz.xyzw acc, vf05, vf10z    nop
    maddw.xyzw vf10, vf06, vf10w    sqi.xyzw vf09, (vi03++)
    nop                             nop
    nop                             nop
    nop                             jr vi15
    nop                             sqi.xyzw vf10, (vi03++)
# 47 "../../../../pure3d/pddi/ps2/quad-vu/main.dsm" 2

# 1 "../../../../pure3d/pddi/ps2/quad-vu/load.vsm" 1
VU_LOAD_CONTEXT:
; v17 version code
; warning: shininess is in the wrong spot
    
    nop      xitop vi01                 ; load address of transform context

    load_transform_context

    nop      iaddiu vi01, vi08, 0       ; load address of lighting context

    load_lighting_context

    nop[e]   nop
    nop      nop

;----------------------------------------
VU_CHECKSKINNING_LOADPRIMGROUP:

    nop     iaddiu vi09,vi15,0         ; store return addy in vi09 (which the skinner doesnt use!)
    check_skinning

    nop     iaddiu vi15,vi09,0         ; restore return addy

VU_LOADPRIMGROUP:

   load_primgroup

   nop      jr vi15
   nop      nop
# 48 "../../../../pure3d/pddi/ps2/quad-vu/main.dsm" 2

# 1 "../../../../pure3d/pddi/ps2/quad-vu/vu_xgkick.vsm" 1

VU_XGKICK:
    nop     xitop vi01
    nop     nop
    nop     xgkick vi01
    nop[e]  nop
# 49 "../../../../pure3d/pddi/ps2/quad-vu/main.dsm" 2

# 1 "../../../../pure3d/pddi/ps2/quad-vu/vu_unlit.vsm" 1
VU_UNLIT_PROGRAM:

   ; this program assumes that the prim group has been loaded!
   mulaw ACC,  VF29 , vf00          lq vf02, 2(vi04)                 ; transform v1, load v1
   maddaz ACC, VF28 , vf02          fcset 0                          ;
   madday ACC, VF27 , vf02          lq vf05, 5(vi04)                 ; load v2
   maddx vf03, VF26 , vf02          nop                              ; 
   mulax ACC,  VF26 , vf05          nop                              ; transform v2
   madday ACC, VF27 , vf05          iaddiu vi07, vi00, 0x7ffe        ; load vertex count mask
   maddaz ACC, VF28 , vf05          iaddiu vi03, vi00, 0             ; clip flag
   clipw.xyz vf03xyz, vf03w         iand vi05, vi05, vi07            ; clip code v1, make vertex count even
   maddw vf06, VF29 , vf00          div q, vf00w, vf03w              ; q = 1/w v1 (007)
   nop                              isub vi07, VI13 , vi05           ; vi07 == 1 if odd # of triangles

UNLIT_TRI_LOOP:
   mul.xyz vf03, vf03, VF30          iaddiu vi04, vi04, 6             ;001 view scale v1, increment vertex pointer
   nop                              lq vf04, -6(vi04)                ;002 load st1
   nop                              fcand vi01, 0x3ffff              ;003 clip test v1
   nop                              iadd vi03,vi03,vi01              ; crap!
   clipw.xyz vf06xyz, vf06w         div q, vf00w, vf06w              ;004 clip code v2, q = 1/w v2 (011)
   mul.xyz vf06, vf06, VF30          iaddiu vi01, vi01, 0x7fff        ;005 view scale v2, set ADC bit v1
   nop                              iaddiu vi06, vi06, 6             ;006
   mulq.xyz vf03, vf03, q           lq vf07, -3(vi04)                ;007 project v1, load st2
   mulq vf04, vf04, q               mfir.w vf03w, vi01               ;008 scale st by q v1, write ADC bit v1
   nop                              fcand vi01, 0x3ffff              ;009 set ADC bit v2, clip test v2
   nop                              iadd vi03,vi03,vi01              ;010 update clip flag
   add.xyz vf03, vf03, VF31          iaddiu vi01, vi01, 0x7fff        ;011 write ADC bit v2,view port offset
   mulq.xyz vf06, vf06, q           lq vf02, 2(vi04)                 ;012 project v2
   mulq vf07, vf07, q               sq vf04, -6(vi06)                ;013 scale st by q v2, store st1
   nop                              mfir.w vf06w, vi01               ;014 write ADC bit v2
   ftoi4.xyz vf03, vf03             nop                              ;015 v1 to 12.4 for GS, load next v1
   add.xyz vf06, vf06, VF31          lq vf05, 5(vi04)                 ;016 view offset v2
   mulax ACC,  VF26 , vf02          sq vf07, -3(vi06)                ;017 transform next v1, store st2
   madday ACC, VF27 , vf02          iaddi vi05, vi05, -2             ;018 decrement vertex count
   maddaz ACC, VF28 , vf02          lq vf07,-2(vi04)                 ;019 load v2  , load col1
   ftoi4.xyz vf06, vf06             lq vf04,-5(vi04)                 ;020 v2 to 12.4 for GS, load col2
   maddw vf03, VF29 , vf00          sq vf03,-4(vi06)                 ;021 store v1
   mulax ACC,  VF26 , vf05          sq vf07,-2(vi06)                 ;022 transform next v2, store col1
   madday ACC, VF27 , vf05          sq vf04,-5(vi06)                 ;023 store col2
   maddaz ACC, VF28 , vf05          sq vf06,-1(vi06)                 ;024 store v2
   clipw.xyz vf03xyz, vf03w         ibgtz vi05, UNLIT_TRI_LOOP       ;025 clip code v1, loop
   maddw vf06, VF29 , vf00          div q, vf00w, vf03w              ;026 q = 1/w v1

   nop                              ibeq vi07, vi00, UNLIT_EVEN      ; if the vertex count is even, skip over the
   nop                              nop                              ; last vertex

   ; last vertex
   mul.xyz vf03, vf03, VF30          nop                              ; view scale v1
   nop                              lq vf04, 0(vi04)                 ; load st1
   nop                              fcand vi01, 0x3ffff              ; clip test v1
   nop                              iadd   vi03,vi03,vi01            ; update clip flag
   nop                              iaddiu vi01, vi01, 0x7fff        ; set ADC bit v1
   mulq.xyz vf03, vf03, q           lq vf07,1(vi04)                  ; project v1, load col1
   mulq vf04, vf04, q               mfir.w vf03w, vi01               ; scale st by q v1, write ADC bit v1
   add.xyz vf03, vf03, VF31          sq vf04, 0(vi06)                 ; view port offset, store st1
   ftoi4.xyz vf03, vf03             sq vf07, 1(vi06)                 ; v1 to 12.4 for GS, store col1
   nop                              sq vf03, 2(vi06)                 ; store v1

UNLIT_EVEN:

   nop                              jr vi15
   nop                              nop


;-----------------------------------------------------------------------------------------
; unlit, guard band clipping
;-----------------------------------------------------------------------------------------
VU_UNLIT_TRI:

   nop                              bal vi15,VU_CHECKSKINNING_LOADPRIMGROUP
   nop                              nop

   nop                              bal vi15,VU_UNLIT_PROGRAM
   nop                              nop

   test_bfc_clip                                                     ; test for bfcing and clipping

   nop                              xgkick VI14                    ; stop, kick prims to GIF
   nop                              nop

   nop[e]                           nop
   nop                              nop

   nop                              b VU_UNLIT_TRI                   ; start a new batch of vertices
   nop                              nop


;-----------------------------------------------------------------------------------------
; unlit, fogged
;-----------------------------------------------------------------------------------------

VU_UNLITFOG_TRI:

nop[e] nop
nop    nop

nop    b VU_UNLITFOG_TRI
nop    nop


# 150 "../../../../pure3d/pddi/ps2/quad-vu/vu_unlit.vsm"

# 50 "../../../../pure3d/pddi/ps2/quad-vu/main.dsm" 2

# 1 "../../../../pure3d/pddi/ps2/quad-vu/vu_lit.vsm" 1
VU_LIT_PROGRAM:
# 115 "../../../../pure3d/pddi/ps2/quad-vu/vu_lit.vsm"

; DUMB VERSION WORKS ==============================
; flowMon::Emit() version 1.3.3 produced this code:
		.global	vclLit_CodeStart
		.global	vclLit_CodeEnd
vclLit_CodeStart:
TOP_LIT:
; _LNOPT_w=[ normal ] 3 [3 0] 3   [TOP_LIT]
         NOP                                                        fcset         0                                   
         NOP                                                        iaddiu        VI03,VI00,0                         
         NOP                                                        loi           0x437f0000                          
LIT_LOOP:
; _LNOPT_w=[ dUp ] 28 [30 21] 35   [LIT_LOOP]
         NOP                                                        lq.xyz        VF01,1(VI04)                        
         mulax         ACC,VF18,VF01x                               lq.xyz        VF02,2(VI04)                               ;	STALL_LATENCY ?3
         madday        ACC,VF19,VF01y                               iaddi         VI05,VI05,-1                        
         maddz         VF01,VF20,VF01z                              NOP                                               
         mulaw         ACC,VF29,VF00w                               NOP                                               
         maddaz        ACC,VF28,VF02z                               NOP                                               
         madday        ACC,VF27,VF02y                               NOP                                               
         maxx          VF01,VF01,VF00x                              NOP                                               
         maddx         VF02,VF26,VF02x                              NOP                                               
         mulaw         ACC,VF16,VF00w                               NOP                                               
         maddax        ACC,VF21,VF01x                               NOP                                                      ;	STALL_LATENCY ?1
         clipw.xyz     VF02xyz,VF02w                                div           Q,VF00w,VF02w                       
         madday        ACC,VF22,VF01y                               NOP                                               
         mul.xyz       VF03,VF02,VF30                               NOP                                               
         maddaz        ACC,VF23,VF01z                               NOP                                               
         maddw         VF02,VF24,VF01w                              lq            VF01,0(VI04)                        
         NOP                                                        waitq                                                    ;	STALL_LATENCY ?2
         mulq.xyz      VF03,VF03,Q                                  fcand         VI01,262143                         
         mulq.xyz      VF01,VF01,Q                                  NOP                                               
         minii         VF02,VF02,I                                  iaddiu        VI04,VI04,0x00000003                
         add.xyz       VF03,VF03,VF31                               iadd          VI03,VI03,VI01                             ;	STALL_LATENCY ?1
         NOP                                                        iaddiu        VI01,VI01,0x00007fff                
         ftoi0         VF02,VF02                                    sq            VF01,0(VI06)                        
         NOP                                                        mfir.w        VF01,VI01                           
         ftoi4.xyz     VF01,VF03                                    iaddiu        VI06,VI06,0x00000003                
         NOP                                                        sq            VF02,-2(VI06)                              ;	STALL_LATENCY ?1
         NOP                                                        ibgtz         VI05,LIT_LOOP                       
         NOP                                                        sq            VF01,-1(VI06)                       
; _LNOPT_w=[ ] 2 [0 0] 2   [__v_lit_vcl_6]
         NOP                                                        NOP                                               
         NOP                                                        NOP                                               
vclLit_CodeEnd:
;	iCount=33
; register stats:
;   5 VU User integer registers
;  17 VU User floating point registers



         nop                                                        jr vi15
         nop                                                        nop



;-----------------------------------------------------------------------------------------
; lit, near plane clipping
;-----------------------------------------------------------------------------------------
; scratch registers used:

; vi01  clip code
; vi04  current vertex address
; vi05  current count

; vf02  input vertex
; vf03  transformed vertex
; vf04  input normal
; vf05  input/transformed uv
; vf06  lighting dot products, computed lit colour

; i     255.0

; vertex layout (relative to vi04):
; -  1  T  S
; -  Nz Ny Nx
; -  Z  Y  X

; - light colour is premultiplied by diffuse colour
; - diffuse is 0..255 rather than 0..1
; - additive is 0..255 rather than 0..1
; - additive is loaded into accumulator
; - store 255.0 in I register for clamping
; - 0x7fff + clip code sets ADC bit)

VU_LIT_TRI:
   nop                              mtir vi01, VF25w   ; branch to specular program if shininess is non-zero
   nop                              nop
   nop                              ibne vi01, vi00, VU_LITSPEC_TRI
   nop                              nop 

LIT_TRI_START:
   nop                              bal vi15, VU_CHECKSKINNING_LOADPRIMGROUP
   nop                              nop

   nop                              bal vi15,VU_LIT_PROGRAM
   nop                              nop

   test_bfc_clip                                                     ; test for bfcing and clipping

   nop                              xgkick VI14                    ; kick prims and go to sleep
   nop                              nop

   nop[e]                           nop
   nop                              nop

   nop                              b LIT_TRI_START
   nop                              nop


;-----------------------------------------------------------------------------------------
; lit, fogged
;-----------------------------------------------------------------------------------------
VU_LITFOG_TRI:

   nop[e]                           nop
   nop                              nop


# 300 "../../../../pure3d/pddi/ps2/quad-vu/vu_lit.vsm"


;-----------------------------------------------------------------------------------------
; lit, specular
;-----------------------------------------------------------------------------------------
; scratch registers used:

; vi01  clip code
; vi04  current vertex address
; vi05  current count

; vf02  input vertex
; vf03  transformed vertex
; vf04  input normal
; vf05  input/transformed uv
; vf06  lighting dot products, computed lit colour

; vf08  view vector
; vf09  scratch
; vf10  specular result and r vector
; vf11  scratch (r vector)
; vf12  scratch (r vector)
; vf13  temp view vector

; i     255.0

; vertex layout (relative to vi04):
; -  1  T  S
; -  Nz Ny Nx
; -  Z  Y  X
VU_LITSPEC_TRI:

LITSPEC_TRI_START:
   nop                              bal vi15, VU_CHECKSKINNING_LOADPRIMGROUP
   nop                              nop

   mulaw ACC,  VF29 , vf00          lq vf02, 2(vi04)                 ; transform vertex, load vertex xyzw
   sub.xyz vf13, VF25 , vf02        iaddiu vi03,vi00,0               ; calculate view vector = VF25  - vertex , clip buffer flag reset
   maddaz ACC, VF28 , vf02          lq vf04, 1(vi04)                 ; load normal
   madday ACC, VF27 , vf02          nop                              ; 
   maddx vf03, VF26 , vf02          nop                              ; vf03 = transformed vertex
   nop                              erleng p, vf13                   ; normalize view vector
   mulax ACC,  VF18 , vf04           nop                              ; multiply normal by light direction matrix
   madday ACC, VF19 , vf04           nop                              ;
   maddz vf06, VF20 , vf04           div q, vf00w, vf03w              ; vf06 = dot products(002), q = 1/w (005)
   clipw.xyz vf03xyz, vf03w         iaddi vi05, vi05, -1             ; compute clipping code (003)
   mul[I].xyz vf03, vf03, VF30       loi 2.0                          ; viewport scale (004)

LITSPEC_TRI_LOOP:
;compute r = 2(n dot l)n - l for all 4 lights
   muli.xyz vf09, vf04, i           lq vf05, 0(vi04)                 ;scale normal by 2,load st
   maxx.xyzw vf06, vf06, vf00x      nop                              ;002 clamp dot products to 0.0
   nop   nop
   nop   nop
   nop   nop
;vf06 contains n dot l for all 4 lights
;mult scaled normal by n dot l (vf06) into column format 
   mulx.xyzw vf10, vf06, vf09x      nop
   muly.xyzw vf11, vf06, vf09y      nop
   mulz.xyzw vf12, vf06, vf09z      waitp
   mulq.xyz vf03, vf03, Q           mfp.x vf09x, p                   ;project
;sub light directions from above to get r in column format
   sub.xyzw  vf10, vf10, VF18        iaddiu vi04, vi04, 3             ;007 advance vertex pointer
   sub.xyzw  vf11, vf11, VF19        lq vf02, 2(vi04)
   sub.xyzw  vf12, vf12, VF20        lq vf04, 1(vi04)
   mulx.xyz vf08, vf13, vf09x       iaddiu vi06, vi06, 3             ;finish normalize
   mulq.xyz vf05, vf05, Q           nop                              ;!!!!!vf05 = 0 q (s/q) (t/q)st*q 
;compute t = r dot v  (normalized view vector (vf08) dot r's in column format - get 4 t's in reg)
   sub.xyz vf13, VF25 , vf02        fcand vi01, 0x3ffff              ;calculate view vector = VF25  - vertex
   mulax[I]  ACC, vf10, vf08        loi 255.0
   madday ACC, vf11, vf08           iadd vi03,vi03,vi01
   maddz vf08, vf12, vf08           nop                              ;vf08 contains r dot v
   mulx.xyzw vf11, vf11, vf00x      erleng p, vf13                   ;clear reg to 0,normalize view vec
   mulaw ACC, VF16 , vf00w     iaddiu vi01, vi01, 0x7fff        ;004 load additive term into acc, compute ADC bit
   maddax.xyz ACC,  VF21 , vf06    mfir.w vf03w, vi01               ;006 additive + color * dot-product
;min t reg with 0    (for all 4 components)
   maxx.xyzw vf08, vf08, vf00x      nop                              ;only use r dot v > 0
;   miniw.xyzw vf08, vf08, vf00w     nop                             ;!!!!shouldnt be needed if light is normalized
   addw.xyzw vf11, vf11,VF25  nop                              ;copy shininess (vf25w) over reg
   madday.xyz ACC, VF22 , vf06     nop
   maddaz.xyz ACC, VF23 , vf06     nop                              ;008
   mulw.xyzw vf10, vf08,VF25  nop                              ;mult shininess (vf25w) over t reg (t*p)
   sub.xyzw  vf10, vf11, vf10       nop                              ;reg = p - tp + t
   add.xyzw  vf10, vf10, vf08       nop                              ;reg = tp + t
   nop                              div q, vf08x, vf10x
   mulx.xyzw vf11, vf11, vf00x      nop                              ;clear reg to 0
   addw.xyzw vf11, vf11, vf00w      nop                              ;set reg to 1
   nop                              waitq
   nop                              div q, vf08y, vf10y
   mulq.x vf11, vf11, q             nop
   nop                              waitq
   nop                              div q, vf08z, vf10z
   mulq.y vf11, vf11, q             nop
   nop                              waitq
   nop                              div q, vf08w, vf10w
   mulq.z vf11, vf11, q             nop
   nop                              waitq
   mulq.w vf11, vf11, q             nop
;scale mono material.specular*light.diffuse by above
   mul.xyzw vf10, VF17 , vf11  nop
;   muli.xyzw vf10, vf11, i          nop                             ;to saturate highlight
;now sum components of vf10 and copy into alpha component of rgba
   addx.y  vf10y, vf10y, vf10x      nop
   addy.z  vf10z, vf10z, vf10y      nop
   addz.w  vf10w, vf10w, vf10z      nop
;result left in vf10w (alpha)
   maddw.xyz vf10, VF24 , vf06     nop                              ;vf06 = unclamped lighting colour (013)
   add.xyz vf03, vf03, VF31          nop                              ;viewport offset (014)
   nop                              nop                 
   mulaw ACC, VF29 , vf00           nop                              ;transform next vertex
   minii.xyzw vf10, vf10, i         nop                              ;clamp colour to 255.0 (017)
   ftoi4.xyz  vf03, vf03            nop                              ;convert to 12.4 for GS (018)
   maddaz ACC, VF28 , vf02          sq vf05, -3(vi06)                ;store stq
   madday ACC, VF27 , vf02          nop                              ;
   ftoi0 vf10, vf10                 sq vf03, -1(vi06)                ;convert colour to int (021)
   maddx vf03, VF26 , vf02          nop                              ;vf03 (022), store transformed vertex
   mulax ACC,  VF18 , vf04           nop                              ;normal * light direction
   madday ACC, VF19 , vf04           iaddi vi05, vi05, -1             ;decrement vertex count
   nop                              sq vf10, -2(vi06)                ;store colour
   maddz vf06, VF20 , vf04           div q, vf00w, vf03w              ;vf06 = dot producte (002), q = 1/w (005)
   clipw.xyz vf03xyz, vf03w         ibgtz vi05, LITSPEC_TRI_LOOP     ;compute clipping code (003), loop
   mul[I].xyz vf03, vf03, VF30       loi 2.0                          ;viewport scale (004) delay slot

;last vertex
   muli.xyz vf09, vf04, i           lq vf05, 0(vi04)                 ;scale normal by 2,load st
   maxx.xyzw vf06, vf06, vf00x      nop                              ;002 clamp dot products to 0.0
   mulx.xyzw vf10, vf06, vf09x      nop
   muly.xyzw vf11, vf06, vf09y      nop
   mulz.xyzw vf12, vf06, vf09z      waitp
   mulq.xyz vf03, vf03, Q           mfp.x vf09x, p                   ;project
   sub.xyzw  vf10, vf10, VF18        iaddiu vi04, vi04, 3             ;007 advance vertex pointer
   sub.xyzw  vf11, vf11, VF19        iaddiu vi06, vi06, 3
   sub.xyzw  vf12, vf12, VF20        nop
   mulx.xyz vf08, vf13, vf09x       nop                              ;finish normalize
   mulq.xyz vf05, vf05, Q           fcand vi01, 0x3ffff              ;!!!!!vf05 = 0 q (s/q) (t/q)st*q 
   mulax[I]  ACC, vf10, vf08        loi 255.0
   madday ACC, vf11, vf08           iadd vi03,vi03,vi01
   maddz vf08, vf12, vf08           nop                              ;vf08 contains r dot v
   mulx.xyzw vf11, vf11, vf00x      nop                             ;clear reg to 0,normalize view vec
   mulaw ACC, VF16 , vf00w     iaddiu vi01, vi01, 0x7fff        ;004 load additive term into acc, compute ADC bit
   maddax.xyz ACC,  VF21 , vf06    mfir.w vf03w, vi01               ;006 additive + color * dot-product
   maxx.xyzw vf08, vf08, vf00x      nop                              ;only use r dot v > 0
;   miniw.xyzw vf08, vf08, vf00w     nop                             ;!!!!shouldnt be needed if light is normalized
   addw.xyzw vf11, vf11,VF25  nop                              ;copy shininess (vf25w) over reg
   madday.xyz ACC, VF22 , vf06     nop
   maddaz.xyz ACC, VF23 , vf06     nop                              ;008
   mulw.xyzw vf10, vf08,VF25  nop                              ;mult shininess (vf25w) over t reg (t*p)
   sub.xyzw  vf10, vf11, vf10       nop                              ;reg = p - tp + t
   add.xyzw  vf10, vf10, vf08       nop                              ;reg = tp + t
   nop                              div q, vf08x, vf10x
   mulx.xyzw vf11, vf11, vf00x      nop                              ;clear reg to 0
   addw.xyzw vf11, vf11, vf00w      nop                              ;set reg to 1
   nop                              waitq
   nop                              div q, vf08y, vf10y
   mulq.x vf11, vf11, q             nop
   nop                              waitq
   nop                              div q, vf08z, vf10z
   mulq.y vf11, vf11, q             nop
   nop                              waitq
   nop                              div q, vf08w, vf10w
   mulq.z vf11, vf11, q             nop
   nop                              waitq
   mulq.w vf11, vf11, q             nop
   mul.xyzw vf10, VF17 , vf11  nop
   addx.y  vf10y, vf10y, vf10x      nop
   addy.z  vf10z, vf10z, vf10y      nop
   addz.w  vf10w, vf10w, vf10z      nop
   maddw.xyz vf10, VF24 , vf06     nop                              ;vf06 = unclamped lighting colour (013)
   add.xyz vf03, vf03, VF31          nop                              ;viewport offset (014)
   minii.xyzw vf10, vf10, i         nop                              ;clamp colour to 255.0 (017)
   ftoi4.xyz  vf03, vf03            nop                              ;convert to 12.4 for GS (018)
   nop                              sq vf05, -3(vi06)                ;store stq
   ftoi0 vf10, vf10                 sq vf03, -1(vi06)                ;convert colour to int (021)
   nop                              sq vf10, -2(vi06)                ;store colour

   test_bfc_clip                                                     ; test for bfcing and clipping

LITSPEC_TRI_XG:
   nop                              xgkick VI14                    ; kick prims and go to sleep
   nop                              nop

   nop[e]                           nop
   nop                              nop

   nop                              b LITSPEC_TRI_START              ; 
   nop                              nop

;-----------------------------------------------------------------------------------------
; lit, specular, fog
;-----------------------------------------------------------------------------------------
; scratch registers used:

; vi01  clip code
; vi04  current vertex address
; vi05  current count
; vi07  fog
; vi08  AND mask for fog 

; vf02  input vertex
; vf03  transformed vertex
; vf04  input normal
; vf05  input/transformed uv
; vf06  lighting dot products, computed lit colour
; vf07  fog
; vf08  view vector
; vf09  scratch
; vf10  specular result and r vector
; vf11  scratch (r vector)
; vf12  scratch (r vector)
; vf13  temp view vector

; i     255.0
VU_LITSPECFOG_TRI:

   nop[e]                           nop
   nop                              nop

# 679 "../../../../pure3d/pddi/ps2/quad-vu/vu_lit.vsm"

# 51 "../../../../pure3d/pddi/ps2/quad-vu/main.dsm" 2

# 1 "../../../../pure3d/pddi/ps2/quad-vu/vu_mt.vsm" 1
   
;*****************************************************************************************
; MULTITEXTURE
;*****************************************************************************************
; assumes vertices formatted like:
; ST0
; ST1
; ARGB
; XYZ

;==================================================================================
VU_UNLIT_TRI_MT:

   nop                              ilw.x  vi01, 0x3ad  (vi00)x
   nop                              xgkick vi01
   nop                              nop


   nop                              bal vi15, VU_LOADPRIMGROUP
   nop                              nop




   nop                              fcset 0
   nop                              iaddiu vi03,vi00,0

_UNLIT_TRI_NC_LOOP_MT:

   mulaw ACC,  VF29 , vf00          lq vf02, 3(vi04)                 ; transform v1, load v1
   maddaz ACC, VF28 , vf02          lq vf01, 0(vi04)                 ;
   madday ACC, VF27 , vf02          nop
   maddx vf03, VF26 , vf02          nop                              ; 
   clipw.xyz vf03,vf03              div q, vf00w, vf03w              ; q = 1/w v1 (007)
   mul.xyz vf03, vf03, VF30          iaddi vi05,vi05,-1
   nop                              lq vf02, 2(vi04)                 ; load colour
   nop                              iaddiu vi04,vi04,4
   nop                              fcand vi01,0x3ffff
   nop                              iadd  vi03,vi03,vi01
   nop                              iaddiu vi01, vi01, 0x7fff
   mulq.xyz vf01,vf01,q             mfir.w vf03w, vi01
   mulq.xyz vf03,vf03,q             nop
   add.xyz vf03, vf03, VF31          sq vf02,1(vi06)
   ftoi4.xyz vf03, vf03             sq vf01,0(vi06)
   nop                              iaddiu vi06,vi06,3
   nop                              ibgtz vi05, _UNLIT_TRI_NC_LOOP_MT 
   nop                              sq vf03,-1(vi06)
# 101 "../../../../pure3d/pddi/ps2/quad-vu/vu_mt.vsm"



   nop                              isw.w vi03, 0x3ad  (vi00)w ; vi03 gets corrupted

   ; todo - add bfcing
   ; check to see if we need to clip 
   nop                              ibeq vi03,vi00,UNLIT_TRI_XGKICK_ST0
   nop                              nop

   ; check clip flag
   nop                              iaddiu vi01, vi00, 1
   nop                              iand   vi01,VI11 ,vi01
   nop                              nop

   nop                              ibeq vi01,vi00,UNLIT_TRI_XGKICK_ST0      ; clip flag not set
   nop                              nop

   ; yeah gotta clip!
   nop                              bal vi15, CLIPBUFFER_4_0
   nop                              nop


UNLIT_TRI_XGKICK_ST0:

   nop                              xgkick VI14                    ; kick prims to GIF
   nop                              nop

   ; *************** DO SECOND PASS *****************************

   nop                              bal vi15, VU_LOADPRIMGROUP
   nop                              nop


   ; should move this to after the loop?!?!?!
   nop                              ilw.y vi01, 0x3ad  (vi00)y
   nop                              xgkick vi01                      ; wait for first pass to finish and setup pass 2
   nop                              nop

  ; dont need to do this if im clipping!!! FIXME!
_UNLIT_TRI_NC_LOOP_MT_PASS2:                                         ; todo - unroll this loop for 2 verts / iteration
   nop                              lq vf02, 0(vi06)                 ; load transformed st0
   nop                              lq vf01, 1(vi04)                 ; load st1
   nop                              iaddi vi05,vi05,-1
   nop                              iaddiu vi04,vi04,4
   mulz.xyz vf01,vf01,vf02z         iaddiu vi06,vi06,3               ; perspective correct st1 (vf02z = vertex 1/w)
   nop                              ibgtz vi05, _UNLIT_TRI_NC_LOOP_MT_PASS2
   nop                              sq vf01,-3(vi06)                 ; store st1

   ; todo - add bfcing
   ; check to see if we need to clip
   nop                              ilw.w vi03, 0x3ad  (vi00)w
   nop                              nop

   nop                              ibeq vi03,vi00,UNLIT_TRI_XGKICK_ST1
   nop                              nop

   ; check clip flag
   nop                              iaddiu vi01, vi00, 1
   nop                              iand   vi01,VI11 ,vi01
   nop                              nop

   nop                              ibeq vi01,vi00,UNLIT_TRI_XGKICK_ST1      ; clip flag not set
   nop                              nop

   ; yeah gotta clip!
   nop                              bal vi15, CLIPBUFFER_4_1
   nop                              nop

UNLIT_TRI_XGKICK_ST1:
   nop                              xgkick VI14                    ; kick prims to GIF
   nop                              nop

   ; do we need to fog?
   nop                              ilw.z vi01, 0x3ad  (vi00)z
   nop                              nop

   nop                              ibeq vi01,vi00,UNLIT_TRI_NC_DONE_MT
   nop                              nop

   nop                              xgkick vi01   ; send fog state to hardware
   nop                              nop

   nop                              bal vi15,VU_FOG_MT
   nop                              nop

   ; check if we need to clip the fog
   nop                              ilw.w vi03, 0x3ad  (vi00)w
   nop                              nop

   nop                              ibeq vi03,vi00,UNLIT_TRI_NC_DONE_MT
   nop                              nop

   nop                              iaddiu vi01, vi00, 1
   nop                              iand   vi01,VI11 ,vi01
   nop                              nop

   nop                              ibeq vi01,vi00,UNLIT_TRI_NC_DONE_MT      ; clip flag not set
   nop                              nop
 
   nop                              bal vi15, CLIPBUFFER_4_0
   nop                              nop

UNLIT_TRI_NC_DONE_MT:
   nop[e]                           nop
   nop                              nop

   nop                              b VU_UNLIT_TRI_MT                        ; start a new batch of vertices
   nop                              nop
# 52 "../../../../pure3d/pddi/ps2/quad-vu/main.dsm" 2

# 1 "../../../../pure3d/pddi/ps2/quad-vu/vu_refract.vsm" 1
;-----------------------------------------------------------------------------------------
; refraction program
;-----------------------------------------------------------------------------------------
VU_REFRACT:

   nop                              bal vi15, VU_CHECKSKINNING_LOADPRIMGROUP
   nop                              nop
   ; LSPECULAT zw = width/height

   addz.x vf02x,vf00x,VF17     nop
   addw.y vf02y,vf00y,VF17     nop
   add.xy vf05,vf00,vf02            loi 0.5

   muli.xy vf02xy,vf02xy,i          nop           ; vf02 = width/2 , height/2
   subw.xy vf05xy,vf05xy,vf00w      fcset 0       ; vf05 = width-1, height-1

# 29 "../../../../pure3d/pddi/ps2/quad-vu/vu_refract.vsm"


   nop                              iaddiu vi01,vi00,0x4f3 ; wanna use UV + NOP + XYZF2
   nop                              iswr.z vi01,(VI14 )z ; ideally I'd use 0x43, but I can't reach NREG field in the tag!

   nop                              iaddiu vi03,vi00,0


   REFRACT_LOOP:

   mulaw ACC,  VF29 , vf00          lq vf01, 2(vi04)                 ; transform vertex, load vertex xyzw
   maddaz ACC, VF28 , vf01          lq vf04, 1(vi04)                 ; load normal
   madday ACC, VF27 , vf01          lq vf06, 0(vi04)                 ; load ST
   maddx vf01, VF26 , vf01          nop                              ; vf01 = transformed vertex

   clipw.xyz vf01xyz, vf01w         div q, vf00w, vf01w

   mulaw ACC,  VF29 , vf00          nop
   maddaz ACC, VF28 , vf04          nop
   madday ACC, VF27 , vf04          nop
   maddx vf04, VF26 , vf04          fcand vi01,0x3ffff               ; transform normal


   mul.xyz vf01,vf01,VF30            iadd vi03,vi03,vi01
   mul.xy vf04,vf04,VF17       nop                              ; scale normal
   mulq.xyz  vf01,vf01,q            nop
   mulq.xyz  vf06,vf06,q            nop

   add.xy  vf03, vf01,vf02          iaddiu vi01,vi01,0x7fff          ; vf03 = UV

   add.xy  vf03, vf03,vf04          nop                              ; offset by normal
   max.xy  vf03, vf03,vf00          nop
   mini.xy vf03, vf03,vf05          nop
   add.xyz vf01, vf01,VF31           nop
   ftoi4.xyz vf01,vf01              sq vf06,0(vi04)                  ; store perspective correct STs to original buffer!
   ftoi4.xy  vf03,vf03              mfir.w vf01w, vi01   
   nop                              iaddi  vi05,vi05,-1
   nop                              iaddiu vi04,vi04,3
   nop                              sq vf01,2(vi06)                  ; note, we dont need colours
   nop                              sq vf03,0(vi06)      
   nop                              ibgtz vi05,REFRACT_LOOP
   nop                              iaddiu vi06,vi06,3

   ;test_bfc_clip

   nop                              xgkick VI14 
   nop                              nop

   nop[e]                           nop
   nop                              nop

   nop                              b VU_REFRACT
   nop                              nop

;-----------------------------------------------------------------------------------------

# 192 "../../../../pure3d/pddi/ps2/quad-vu/vu_refract.vsm"

# 53 "../../../../pure3d/pddi/ps2/quad-vu/main.dsm" 2

# 1 "../../../../pure3d/pddi/ps2/quad-vu/vu_toon.vsm" 1
VU_TOON:

LIT_TOON_START:

   nop                              bal vi15, VU_CHECKSKINNING_LOADPRIMGROUP
   nop                              fcset 0 

   mulaw ACC,  VF29 , vf00          lq vf02, 2(vi04)                 ; transform vertex, load vertex xyzw
   maddaz ACC, VF28 , vf02          lq vf04, 1(vi04)                 ; load normal
   madday ACC, VF27 , vf02          nop                              ; 
   maddx vf03, VF26 , vf02          nop                              ; vf03 = transformed vertex
   nop[i]                           loi 255.0                        ; load 255.0 into i register for colour clamping
   mulax ACC,  VF18 , vf04           nop                              ; multiply normal by light direction matrix
   madday ACC, VF19 , vf04           nop                              ;
   maddz vf06, VF20 , vf04           div q, vf00w, vf03w              ; vf06 = dot products(002), q = 1/w (005)
   clipw.xyz vf03xyz, vf03w         nop                              ; compute clipping code (003)
   mul.xyz vf03, vf03, VF30          iaddiu vi03,vi00,0               ; viewport scale (004), clip flag

LIT_TOON_LOOP:
   nop                              lq vf05, 0(vi04)                 ;001 load st
   maxx.xyzw vf06, vf06, vf00x      nop                              ;002 clamp dot products to 0.0
   nop                              fcand vi01, 0x3ffff              ;003 clip test
   mulaw ACC, VF16 , vf00w     iaddiu vi01, vi01, 0x7fff        ;004 load additive term into acc, compute ADC bit
   mulq.xyz vf03, vf03, Q           nop                              ;005 project (009), write ADC (prim kick) bit
   maddax ACC,  VF21 , vf06        mfir.w vf03w, vi01               ;006 additive + color * dot-product
   madday ACC, VF22 , vf06         iaddiu vi04, vi04, 3             ;007 advance vertex pointer
   maddaz ACC, VF23 , vf06         nop                              ;008
   maddw vf06, VF24 , vf06         fcand vi01,0x3ffff               ;009 vf06 = unclamped lighting colour (013)
   add.xyz vf03, vf03, VF31          iadd vi03,vi03,vi01              ;010 viewport offset (014), update clip flag
   mulq.xyz vf05, vf05, Q           lq vf02, 2(vi04)                 ;011 vf05 = 0 q (s/q) (t/q)st*q (015), load next normal
   mulaw ACC, VF29 , vf00           lq vf04, 1(vi04)                 ;012 transform next vertex, load next vertex
   minii.xyzw vf06, vf06, i         nop                              ;013 clamp colour to 255.0 (017)
   ftoi4.xyz  vf03, vf03            nop                              ;014 convert to 12.4 for GS (018)
   maddaz ACC, VF28 , vf02          sq vf05, 0(vi06)                 ;015 store stq
   madday ACC, VF27 , vf02          nop                              ;016 
   ftoi0 vf06, vf06                 nop                              ;017 convert colour to int (021)   
   maddx vf03, VF26 , vf02          sq vf03, 2(vi06)                 ;018 vf03 (022), store transformed vertex
   mulax ACC,  VF18 , vf04           nop                              ;019 normal * light direction
   madday ACC, VF19 , vf04           iaddi vi05, vi05, -1             ;020 decrement vertex count
   nop                              sq vf06, 1(vi06)                 ;021 store colour
   maddz vf06, VF20 , vf04           div q, vf00w, vf03w              ;022 vf06 = dot producte (002), q = 1/w (005)
   clipw.xyz vf03xyz, vf03w         ibgtz vi05, LIT_TOON_LOOP        ;023 compute clipping code (003), loop
   mul.xyz vf03, vf03, VF30          iaddiu vi06, vi06, 3             ;024 viewport scale (004), increment output pointer

   nop                              xgkick VI14                    ; kick prims lit pass
   nop                              nop

   ; sync drawing
   nop                              ilwr.x vi02,(VI14 )x   
   nop                              iaddiu vi01, vi00, 0x7fff  ; 
   nop                              iaddiu vi01, vi01, 1       ; 0x8000 for NOP giftag   
   nop                              iswr.x vi01,(VI14 )x
   
   ; wait 3 cycles to make sure the gifTag has been read by the GIF
   nop                              nop
   nop                              nop
   nop                              nop
   nop                              xgkick VI14              ; block until done first pass
   

   nop                              bal vi15,VU_LOADPRIMGROUP
   nop                              nop

   ; second pass - this is where we do the toon outline
   nop                              iaddiu vi01,vi00,0x41f           ; wanna use NOP + RGBAQ + XYZF2
   ftoi0.xyz vf06,VF17         iswr.z vi01,(VI14 )z           ; vf06 = outline colour as int
   addw.xyz vf02,vf00,VF25w     fcset 0                          ; copy scale into vf02

   LIT_OUTLINE_LOOP:
   mulaw ACC,  VF29 , vf00          lq vf01, 2(vi04)                 ; load vertex xyzw
   nop                              lq vf04, 1(vi04)                 ; load normal
   mul.xyz vf04,vf04,vf02           iaddiu vi04,vi04,3               ; scale normal
   add.xyz vf01,vf01,vf04           iaddiu vi06,vi06,3               ; transform vertex, 
   maddaz ACC, VF28 , vf01          iaddi  vi05,vi05,-1
   madday ACC, VF27 , vf01          nop                              ;
   maddx vf01, VF26 , vf01          sq vf06,-2(vi06)                  ; store colour                              ; vf01 = transformed vertex

   clipw.xyz vf01xyz, vf01w         div q, vf00w, vf01w
   mul.xyz vf01,vf01,VF30            nop
   nop                              nop
   nop                              nop
   nop                              fcand vi01,0x3ffff
   nop                              iaddiu vi01,vi01,0x7fff          ; vf03 = adjusted vertex position
   nop                              mfir.w vf01w, vi01 
   mulq.xyz  vf01,vf01,q            nop   
   add.xyz vf01, vf01,VF31           nop
   ftoi4.xyz vf01,vf01              nop
   
   nop                              ibgtz vi05,LIT_OUTLINE_LOOP
   nop                              sq vf01,-1(vi06)                 ; note, we dont need ST   
 
   nop                              bal vi15, VU_LOADPRIMGROUP
   nop                              fcset 0
   
   nop                              iaddiu vi04,vi06,0               ; BFC requires that vi04 = input buffer

   nop                              bal vi15,BACKFACE_CULL
   nop                              iaddiu VI11 ,vi00,4           ; set cull mode to front face

   nop                              xgkick VI14                    ; kick outline pass
   nop                              nop

   nop[e]                           nop
   nop                              nop
   
   nop                              b VU_TOON
   nop                              nop

;----------------------------------------------- crap code -----------
# 129 "../../../../pure3d/pddi/ps2/quad-vu/vu_toon.vsm"

# 54 "../../../../pure3d/pddi/ps2/quad-vu/main.dsm" 2

# 1 "../../../../pure3d/pddi/ps2/quad-vu/vu_reflect.vsm" 1
VU_REFLECT:

   nop                              ilw.x  vi01, 0x3be (vi00)x
   nop                              xgkick vi01
   nop                              nop

   nop                              bal vi15, VU_LOADPRIMGROUP
   nop                              nop

   nop                              iaddiu vi02,vi00,1
   nop                              ilw.z vi01,0x3be (vi00)z
   nop                              iand vi01,vi01,vi02 ; check lit flag
   nop                              nop

   nop                              ibgtz vi01,VU_REFLECT_LIT
   nop                              nop

VU_REFLECT_UNLIT:

   nop                              bal vi15, VU_LOADPRIMGROUP
   nop                              nop

   nop                              bal vi15,VU_UNLIT_PROGRAM
   nop                              nop

   nop                              bal vi15, VU_LOADPRIMGROUP
   nop                              nop


   mulx.w vf01w,vf00w,vf00x         iaddiu vi01,vi00,0x7f
   nop                              mfir.w vf01w,vi01  ; alpha is always 0x7f
   FIXUP_COLOURS:
   nop                              iaddi vi05,vi05,-1
   mul.xyz vf01,vf00,vf00           lq vf03,1(vi06)     ; vf01 = 0,0,0,0x7f

   nop                              mtir vi07,vf03x
   nop                              mtir vi08,vf03y
   nop                              mtir vi09,vf03z

   nop                              iand vi07,vi07,vi01 
   nop                              iand vi08,vi08,vi01
   nop                              iand vi09,vi09,vi01

   nop                              mfir.x vf01x,vi07  ; red
   nop                              mfir.y vf01y,vi08  ; green
   nop                              mfir.z vf01z,vi09  ; blue

   nop                              iaddiu vi06,vi06,3

   nop                              ibgtz vi05,FIXUP_COLOURS
   nop                              sq vf01,-3+1(vi06)

   nop                              b REFLECT_NEXT
   nop                              nop

VU_REFLECT_LIT:
   nop                              bal vi15,VU_LIT_PROGRAM
   nop                              nop

REFLECT_NEXT:

# 72 "../../../../pure3d/pddi/ps2/quad-vu/vu_reflect.vsm"


REFLECT_NO_CLIP_0:
   nop                              xgkick VI14                    ; kick prims
   nop                              nop

   nop                              bal vi15, VU_LOADPRIMGROUP
   nop                              nop

   nop                              ilw.y  vi01, 0x3be (vi00)y ; kick 2nd state
   nop                              xgkick vi01
   nop                              nop

   nop                              iaddiu vi02,vi00,2+4  ; bits 1-2
   nop                              ilw.z vi01,0x3be (vi00)z
   nop                              iand vi01,vi01,vi02 ; check what type of reflection
   nop                              nop

   nop                              ibgtz vi01,SPHERE_MAP_JUMP
   nop                              nop

   nop                              bal vi15,VU_ENVIRONMENT_PROGRAM
   nop                              nop

   nop                              b REFLECTON_ALL_DONE
   nop                              nop

SPHERE_MAP_JUMP:
   nop                              bal vi15,VU_SPHEREMAP_PROGRAM
   nop                              nop

REFLECTON_ALL_DONE:

# 115 "../../../../pure3d/pddi/ps2/quad-vu/vu_reflect.vsm"

   
REFLECT_NO_CLIP_1:
   nop                              xgkick VI14                    ; kick prims and go to sleep
   nop                              nop

   nop[e]                           nop
   nop                              nop

   nop                              b VU_REFLECT
   nop                              nop

;------------------------------------------------------------------------------
VU_ENVIRONMENT_PROGRAM:


   nop                              loi +0.5
   addi.xy vf03xy,vf00xy,i          nop                          ; vf03 = [+0.5, +0.5]
   nop                              loi +1.0
   addi.xy vf04xy,vf00xy,i          nop                          ; vf04 = [+1.0, +1.0]

REFLECT_MAP_LOOP:
  
   ; R = E - 2(N dot E)N
   nop                              lq vf01, 1(vi04)                 ; vf01 = normal
   nop                              lq vf02, 2(vi04)                 ; vf02 = position
   sub.xyz vf02,vf02,VF25           nop                              ; vf02 = point -> eye vector

   mul.xyz  vf03,vf02,vf02          nop
   addy.x   vf03x,vf03x,vf03y       nop
   addz.x   vf03x,vf03x,vf03z       nop                             ; vf03x = length
   nop                              rsqrt q,vf00w,vf03x
   nop                              waitq
   mulq.xyz vf02,vf02,q             nop                             ; vf02 = normalized vector

   ; calculate N dot E
   mul.xyz  vf03,vf01,vf02          nop
   addy.x   vf03x,vf03x,vf03y       nop
   addz.x   vf03x,vf03x,vf03z       nop
   addx.z   vf03z,vf00z,vf03x       nop
   addx.y   vf03y,vf00y,vf03x       nop                             ; vf03xyz = N dot E

   nop                              loi 2.0
   muli.xyz vf03,vf03,i             nop                             ; vf03xyz = 2(N dot E)
   mul.xyz  vf01,vf01,vf03          nop                             ; vf01 = 2(N dot E)N
   sub.xyz  vf01,vf02,vf01          nop                             ; R = vf01 = E - 2(N dot E)N
   
   ;nop                              erleng P,vf01   
   ;nop                              waitp
   ;nop                              mfp.x vf02x,P
   ;mulx.xyz vf01,vf01,vf02x         nop ; normalize

   ; R = vf01
   nop                              lq vf03,0(vi06)                 ; load ST
   ; vf01x = phi = u

   nop                              loi 0.5                         ; arcos(-x) ~= 1/2*x+1/2
   muli.xyz vf01,vf01,i             nop
   addi.xyz vf01,vf01,i             nop                             ; z = arccos(-rz) APPROXIMATELY
   nop                              sq.xy vf01,0(vi04)              ; need this for clipping!
   mulz.xy vf01,vf01,vf03z          iaddiu vi06,vi06,3
   nop                              iaddi vi05,vi05,-1
   nop                              iaddiu vi04,vi04,3
   nop                              ibgtz vi05,REFLECT_MAP_LOOP
   nop                              sq.xy vf01,-3(vi06)


   nop                              jr vi15
   nop                              nop

;-------------------------------------------------------
VU_SPHEREMAP_PROGRAM:

   nop                              ilw.w  vi01, 0x3be (vi00)w ; get transform
   mulz.w vf01w,vf00w,vf00z         lq vf06,0(vi01)
   nop                              lq vf07,1(vi01)
   nop                              lq vf08,2(vi01)  
   nop                              lq vf09,3(vi01)  
   
SP_REFLECT_MAP_LOOP:

   nop                              lq     vf02, 2(vi04)            ; vf02 = vertex position 
   sub.xyz vf02,VF25 ,vf02          lq.xyz vf01, 1(vi04)
   
   ; normalize view vector
   mul.xyz vf03,vf02,vf02           nop
   addy.x  vf03x,vf03x,vf03y        nop
   addz.x  vf03x,vf03x,vf03z        nop
   nop                              rsqrt q,vf00w,vf03x
   mulq.xyz vf02,vf02,q             waitq 

   mul.xyz  vf03,vf01,vf02          loi 2.0                         ; vf03 = vf01 dot vf02
   addy.x   vf03x,vf03x,vf03y       nop
   addz.x   vf03x,vf03x,vf03z       nop                             ; vf03x = N dot E

   muli.x   vf03x,vf03x,i           nop                             ; vf03x = 2(N dot E)
   mulx.xyz vf01,vf01,vf03x         nop                             ; vf01  = 2(N dot E)N   
   sub.xyz  vf01,vf02,vf01          nop                             ; vf01  = E - 2(N dot E)N 

   mulax  ACC, vf06,  vf01          nop                              ; transform normal
   madday ACC, vf07,  vf01          nop
   maddz  vf01, vf08, vf01          loi 1.0

   ; R = reflection vector = vf01 ------------------------

   add.xyz vf04,vf00,vf01           lq vf03,0(vi06)                 ; vf03 = old ST, vf02 = reflection vector
   addi.z  vf04z,vf04z,i            nop                             ; vf02 = (rx,ry,rz+1)      

   mul.xyz vf04,vf04,vf04           nop
   addy.x  vf04x,vf04x,vf04y        nop
   addz.x  vf04x,vf04x,vf04z        loi 0.5                         ; vf02x = (rx^2 + ry^2 + (rz+1)^2)
   nop                              rsqrt q,vf00w,vf04x             ; m = q = 1/ sqrt( rx^2 + ry^2 + (rz+1)^2 )

   mulq.xy vf04,vf01,q              waitq                           ; vf02 = (rx*m,ry*m)
   muli.xy vf04,vf04,i              iaddiu vi06,vi06,3
   addi.xy vf04,vf04,i              iaddi  vi05,vi05,-1             ; vf02 = ((rx*m)+0.5,(ry*m)+0.5,1.0f)
   mulz.xy vf04,vf04,vf03z          iaddiu vi04,vi04,3              ; perspective correct
   
   nop                              ibgtz vi05,SP_REFLECT_MAP_LOOP
   nop                              sq.xy vf04,-3(vi06)
                                     
   nop                              jr vi15
   nop                              nop

;-----------------------------------------------------------------------
# 55 "../../../../pure3d/pddi/ps2/quad-vu/main.dsm" 2

# 1 "../../../../pure3d/pddi/ps2/quad-vu/vu_line.vsm" 1
;-----------------------------------------------------------------------------------------
; line
;-----------------------------------------------------------------------------------------
; scratch registers used:

; vi04  current vertex address
; vi05  current count
; vf02  input vertex
; vf03  transformed vertex
; note: this code is not optimised

VU_LINE:

LINE_START:
   nop                              bal vi15, VU_LOADPRIMGROUP
   nop                              nop

LINE_LOOP:
   mulaw ACC,  VF29 , vf00          lq vf02, 2(vi04)                 ; transform, load vertex
   maddaz ACC, VF28 , vf02          lq vf01, 0(vi04)                 ;
   madday ACC, VF27 , vf02          lq vf04, 1(vi04)                 ;
   maddx vf03, VF26 , vf02          iaddi vi05, vi05, -1             ; decrement vertex count
   clipw.xyz vf03xyz, vf03w         div q, vf00w, vf03w              ; clip vertex, start 1/w 
   mul.xyz vf03, vf03, VF30          sq vf01, 0(vi06)
   nop                              sq vf04, 1(vi06)
   mulq vf03, vf03, Q               waitq                            ; viewport scale, wait for 1/w to complete
   nop                              fcand vi01, 0xfff                ; project, test visibility
   add.xyz vf03, vf03, VF31          iaddiu vi01, vi01, 0x7fff        ; viewport origin, compute ADC bit
   nop                              mfir.w vf03w, vi01               ; store ADC bit
   ftoi4.xyz vf03, vf03             nop                              ; convert to 12.4 for GS
   nop                              sq vf03, 2(vi06)                 ; store transformed vertex
   nop                              iaddiu vi06,vi06,3
   nop                              ibne vi05, vi00, LINE_LOOP
   nop                              iaddiu vi04, vi04, 3             ; increment output pointer to next vertex

   nop                              xgkick VI14                    ; stop, kick prims to GIF
   nop                              nop

   nop[e]                           nop
   nop                              nop

   nop                              b LINE_START                     ; start a new batch of vertices
   nop                              nop


VU_DONOTHING:
   nop[e] nop
   nop    nop
   
   nop    b VU_DONOTHING
   nop    nop
# 56 "../../../../pure3d/pddi/ps2/quad-vu/main.dsm" 2

# 1 "../../../../pure3d/pddi/ps2/quad-vu/vu_fog.vsm" 1
VU_FOG_MT:

    ; not needed, im just paranoid
    nop[e]                           nop
    nop                              nop

# 44 "../../../../pure3d/pddi/ps2/quad-vu/vu_fog.vsm"


# 57 "../../../../pure3d/pddi/ps2/quad-vu/main.dsm" 2

# 1 "../../../../pure3d/pddi/ps2/quad-vu/vu_shadow.vsm" 1
VU_SHADOW_VOL :

         nop                                                        bal vi15,VU_LOADPRIMGROUP
         nop                                                        nop
         NOP                                                        lq            VF01,0(VI04)
         nop                                                        iaddiu        vi03,vi00,0

SHADOW_LOOP:

         mulax         ACC,VF26,VF01x                               lq            vf02,1(vi04)
         madday        ACC,VF27,VF01y                               lq            vf03,2(vi04)
         maddaz        ACC,VF28,VF01z                               fcset         0
         maddw         VF01,VF29,VF00w                              iaddiu        vi02,vi00,32 

         mulax         ACC,VF26,VF02x                               nop
         madday        ACC,VF27,VF02y                               nop
         maddaz        ACC,VF28,VF02z                               nop
         maddw         VF02,VF29,VF00w                              nop                                               

         mulax         ACC,VF26,VF03x                               nop
         madday        ACC,VF27,VF03y                               nop
         maddaz        ACC,VF28,VF03z                               nop
         maddw         VF03,VF29,VF00w                              nop

         clipw.xyz     VF01xyz,VF01w                                nop
         clipw.xyz     VF02xyz,VF02w                                nop
         clipw.xyz     VF03xyz,VF03w                                nop

         mul.xyz       VF01,VF01,VF30                               div           Q,VF00w,VF01w
         mulq.xyz      VF01,VF01,Q                                  waitq
         add.xyz       VF01,VF01,VF31                               nop

         mul.xyz       VF02,VF02,VF30                               div           Q,VF00w,VF02w
         mulq.xyz      VF02,VF02,Q                                  waitq
         add.xyz       VF02,VF02,VF31                               nop

         mul.xyz       VF03,VF03,VF30                               div           Q,VF00w,VF03w
         mulq.xyz      VF03,VF03,Q                                  waitq
         add.xyz       VF03,VF03,VF31                               nop

         nop                                                        fcand         vi01,0x3ffff
         sub.xyz vf04,vf01,vf03                                     iadd          vi03,vi03,vi01
         sub.xyz vf05,vf02,vf03                                     iaddiu        VI01,VI01,0x7fff                
         nop                                                        mfir.w        VF01,VI01
         nop                                                        mfir.w        VF02,VI01   
         opmula.xyz ACC,vf04,vf05                                   mfir.w        VF03,VI01
         opmsub.xyz vf06,vf05,vf04                                  nop

         ftoi4.xyz     VF01,VF01                                    nop
         ftoi4.xyz     VF02,VF02                                    nop
         ftoi4.xyz     VF03,VF03                                    nop

         nop                                                        fmand vi01,vi02
         nop                                                        ibeq  vi01,vi00,SHADOW_FRONT_FACE_TRI
         nop[i]                                                     loi 8.0         ; front facing tri - increment
         nop[i]                                                     loi 255.0       ; back facing tri - decrement

         SHADOW_FRONT_FACE_TRI:
         addi.xyz   vf07, vf00,i                                    iaddi         VI05,VI05,-3
         ftoi0.xyzw vf07, vf07                                      iaddiu        VI04,VI04,3 

         NOP                                                        sq            VF01,1(VI06)   ; store verts
         NOP                                                        sq            VF02,3(VI06)
         NOP                                                        sq            VF03,5(VI06)

         nop                                                        sq            vf07,0(vi06)   ; dont really need to store these two
         nop                                                        sq            vf07,2(vi06)
         nop                                                        sq            vf07,4(vi06)   ; store colour into last vertex

         nop                                                        lq            VF01,0(VI04)   ; next vert
         NOP                                                        ibgtz         VI05,SHADOW_LOOP                    
         NOP                                                        iaddiu        VI06,VI06,6


         nop                                                        ibeq vi03,vi00,SHADOW_NO_CLIP
         nop                                                        nop

         nop                                                        bal vi15,CLIPBUFFER_SHADOW
         nop                                                        iaddiu VI11 ,vi00,1

SHADOW_NO_CLIP:

         nop                                                        xgkick VI14                    ; kick prims and go to sleep
         nop                                                        nop

         nop[e]                                                     nop
         nop                                                        nop

         nop                                                        b VU_SHADOW_VOL
         nop                                                        nop
# 58 "../../../../pure3d/pddi/ps2/quad-vu/main.dsm" 2

# 1 "../../../../pure3d/pddi/ps2/quad-vu/vu_snow.vsm" 1
;=========================================================================================
; VU1 snow
; Amit Bakshi
;=========================================================================================
























.macro DBREAK
   nop[d] nop
   nop    nop
.endm   


VU_SNOW:

; amb jun27/2002
; for now I have to comment this out cause we ran out of vu code

   nop[e]                  nop
   nop                     nop
# 211 "../../../../pure3d/pddi/ps2/quad-vu/vu_snow.vsm"

# 59 "../../../../pure3d/pddi/ps2/quad-vu/main.dsm" 2

# 1 "../../../../pure3d/pddi/ps2/quad-vu/vu_clipper.vsm" 1
LoadClipperLut:

	; build cliptag = 00000000 00000412 3002c000 00008000

	nop[i]                          loi 0x3002c000
	addi.y   vf01y,vf00y,i          nop                      ; PRE + PRIM + FLG + NREGS

	nop                             iaddiu vi01,vi00,0x412   ; REGS
	nop                             mfir.z vf01z,vi01
	nop                             mfir.w vf01w,vi00        ; REGS

	; store tag
	nop                             sq vf01, 0x3cb (vi00)
	nop                             sq vf01, 0x3e4 (vi00)

	; store EOP bit - not really needed?!?! PROJECT puts this into the tag anyway - fixme








	; create a little 3 entry lookup table for the clipping vertex queue
	; LUT1 VERTEX_ADDRESS_1
	; LUT2 VERTEX_ADDRESS_2
	; LUT0 VERTEX_ADDRESS_0
	nop                             iaddiu vi02, vi00, 0x3fd 
	nop				iaddiu vi01, vi00, (0x3c2 +3) 
	nop				isw.x vi01, 0(vi02)x

	nop				iaddiu vi01, vi00, (0x3c2 +6) 
	nop				isw.x vi01, 1(vi02)x
	nop				iaddiu vi01, vi00, (0x3c2 +0) 
	nop				isw.x vi01, 2(vi02)x

	nop				isw.y vi02, 2(vi02)y
	nop				iaddiu vi01, vi00, 0x3fd +2
	nop				isw.y vi01, 1(vi02)y
	nop				iaddiu vi01, vi00, 0x3fd +1

	nop				jr vi03
	nop				isw.y vi01, 0(vi02)y

.macro CLIPMACRO vertStride, stOff

	nop				bal vi03,LoadClipperLut
	nop				nop

        load_primgroup
   
vclClipLoop_CodeStart\@: ; flowMon::Emit() vcl 1.3test-4 produced this code:
         NOP                                                        fcset         0x00000000                          
         NOP                                                        isw.z         VI15,0x3fd (VI00)         
         NOP                                                        ilw.x         VI08,0x3fd +2(VI00)       
         NOP                                                        ilw.y         VI07,0x3fd +2(VI00)       
CLIPTRIANGLE_LOOP\@: ; cycles?=17
         mulaw         ACC,VF29,VF00w                               lq.xyz        VF01,-1+\vertStride(VI04)           
         maddaz        ACC,VF28,VF01z                               lq            VF02,1(VI06)                               ;	STALL_LATENCY ?3
         madday        ACC,VF27,VF01y                               lq            VF03,\stOff(VI04)
         maddx         VF01,VF26,VF01x                              iaddiu        VI04,VI04,\vertStride                                  
         NOP                                                        sq            VF02,1(VI08)                               ;	STALL_LATENCY ?1
         NOP                                                        iaddiu        VI06,VI06,0x00000003                
         clipw.xyz     VF01xyz,VF01w                                sq            VF03,0(VI08)                        
         NOP                                                        NOP                                               
         NOP                                                        sq            VF01,2(VI08)                        
         NOP                                                        ilw.x         VI08,0(VI07)                        
         NOP                                                        fcand         VI01,0x0003ffff                     
         NOP                                                        ibeq          VI01,VI00,CLIPSKIP\@                       
         NOP                                                        ilw.y         VI07,0(VI07)                        
         NOP                                                        bal           VI15,CLIPPER                        
         NOP                                                        NOP                                               
CLIPSKIP\@:
         NOP                                                        iaddi         VI05,VI05,-1                
         NOP                                                        NOP                                               
         NOP                                                        ibgtz         VI05,CLIPTRIANGLE_LOOP\@              
         NOP                                                        NOP                                               
         NOP                                                        ilw.z         VI15,0x3fd (VI00)         
         NOP                                                        NOP                                               
         NOP                                                        jr vi15
         NOP                                                        NOP                                               
.endm

CLIPBUFFER:

	CLIPMACRO 3 0  ; standard clipper for st,rgb,xyz

CLIPBUFFER_4_0:

	CLIPMACRO 4 0  ; clipper for pass1 of st0,st1,rgb,xyz

CLIPBUFFER_4_1:

	CLIPMACRO 4 1  ; clipper for pass1 of st0,st1,rgb,xyz

CLIPBUFFER_SHADOW:

         nop				bal vi03,LoadClipperLut
         nop				nop

         load_primgroup
         NOP                                                        isw.z         VI15,0x3fd (VI00)         
         NOP                                                        ilw.x         VI08,0x3fd +2(VI00)       
         NOP                                                        ilw.y         VI07,0x3fd +2(VI00)       
         nop                                                        iaddiu        VI11 ,vi00,8 ; magic bfc flag

CLIPTRIANGLE_SHADOW_LOOP:
         mulaw         ACC,VF29,VF00w                               lq            VF01,0(VI04)           
         maddaz        ACC,VF28,VF01z                               lq            VF02,0(VI06)
         madday        ACC,VF27,VF01y                               fcset         0
         maddx         VF01,VF26,VF01x                              iaddiu        VI04,VI04,1
         NOP                                                        sq            VF02,1(VI08)                               ;	STALL_LATENCY ?1
         NOP                                                        iaddiu        VI06,VI06,2
         clipw.xyz     VF01xyz,VF01w                                nop
         NOP                                                        NOP                                               
         NOP                                                        sq            VF01,2(VI08)                        
         NOP                                                        ilw.x         VI08,0(VI07)                        
         NOP                                                        ilw.y         VI07,0(VI07)             

         ;
         mulaw         ACC,VF29,VF00w                               lq            VF01,0(VI04)           
         maddaz        ACC,VF28,VF01z                               lq            VF02,0(VI06)
         madday        ACC,VF27,VF01y                               nop
         maddx         VF01,VF26,VF01x                              iaddiu        VI04,VI04,1
         NOP                                                        sq            VF02,1(VI08)                               ;	STALL_LATENCY ?1
         NOP                                                        iaddiu        VI06,VI06,2
         clipw.xyz     VF01xyz,VF01w                                nop
         NOP                                                        NOP                                               
         NOP                                                        sq            VF01,2(VI08)                        
         NOP                                                        ilw.x         VI08,0(VI07)                        
         NOP                                                        ilw.y         VI07,0(VI07)             
         ;

         mulaw         ACC,VF29,VF00w                               lq            VF01,0(VI04)           
         maddaz        ACC,VF28,VF01z                               lq            VF02,0(VI06)
         madday        ACC,VF27,VF01y                               nop
         maddx         VF01,VF26,VF01x                              iaddiu        VI04,VI04,1
         NOP                                                        sq            VF02,1(VI08)                               ;	STALL_LATENCY ?1
         NOP                                                        iaddiu        VI06,VI06,2
         clipw.xyz     VF01xyz,VF01w                                nop
         NOP                                                        NOP                                               
         NOP                                                        sq            VF01,2(VI08)                        
         NOP                                                        ilw.x         VI08,0(VI07)                        
         nop                                                        nop
         NOP                                                        fcand         VI01,0x0003ffff                     
         NOP                                                        ilw.y         VI07,0(VI07)             

         NOP                                                        ibeq          VI01,VI00,CLIPSKIP_SHADOW
         nop                                                        nop

         NOP                                                        bal           VI15,CLIPPER           
         NOP                                                        NOP
CLIPSKIP_SHADOW:
         NOP                                                        iaddi         VI05,VI05,-3
         NOP                                                        NOP                                               
         NOP                                                        ibgtz         VI05,CLIPTRIANGLE_SHADOW_LOOP
         NOP                                                        NOP                                               
         NOP                                                        ilw.z         VI15,0x3fd (VI00)         
         NOP                                                        NOP                                               
         NOP                                                        jr vi15
         NOP                                                        NOP                                               


;----------------------------------------------------------------------------------------------------
; clipper
;----------------------------------------------------------------------------------------------------

; register usage
;   vf02 scratch (not preserved)
;   vf12 edge v1 (not preserved)
;   vf13 edge v2 (not preserved)
;   vf14 scratch (preserved)
;   vf15 scratch (preserved)
;   vf16 scratch (preserved)

;   vi01 scratch (not preserved)
;   vi02 scratch (not preserved)
;   vi04 output addr (preserved)
;   vi05 input vertex count (preserved)
;   vi06 output vertex count (preserved)
;   vi07 colour addr (preserved)
;   vi15 return address

; assumes:
; clip register is correct
; vi04 contains address of vertex currently being processed
; vi05 contains count of vertices remaining
; vi06 contains vertex queue address
; vf17w contains near plane
; vertices and uvs have been cached at the beginning of memory
; note: this routine scribbles all over memory in the (0-15 range)
;   ie: the context is trashed by the clipper
;       this should be ok, since the context is in registers, which we preserve

CLIPPER:
   
   nop                              fcor vi01, 0xfefbef              ; are all vertices behind the near plane?
   nop                              ibne vi01, vi00, CLIPPER_BAIL
   nop                              fcand vi01, 0x20820              ; are any of the vertices touching the far plane?
   nop                              ibne vi01, vi00, CLIPPER_BAIL
   nop                              fcor vi01, 0xffdf7d              ; are all vertices left of -x plane?
   nop                              ibne vi01, vi00, CLIPPER_BAIL
   nop                              fcor vi01, 0xffefbe              ; are all vertices right of +x plane?
   nop                              ibne vi01, vi00, CLIPPER_BAIL
   nop                              fcor vi01, 0xff7df7              ; are all vertices above -y plane?
   nop                              ibne vi01, vi00, CLIPPER_BAIL
   nop                              fcor vi01, 0xffbefb              ; are all vertices below +y plane?
   nop                              ibne vi01, vi00, CLIPPER_BAIL
   nop                              nop
 
   nop                              ibgtz VI12 , CHECK_TRISTRIP  ; handle tristrips
   nop                              nop
 
   nop                              iaddiu vi01,vi00,0x3fd    
   nop                              nop
   nop                              ibeq vi07, vi01, BEGIN_CLIP
   nop                              nop

CLIPPER_BAIL:
   nop                              jr vi15
   nop                              nop

CHECK_TRISTRIP:
   nop                              isub vi02, VI13 , vi05           ; dont bother until we have at least three vertices
   nop                              iaddi vi02, vi02, -2

   nop                              nop
   nop                              ibgez vi02, BEGIN_CLIP
   nop                              nop

   nop                              jr vi15
   nop                              nop
;---------------------------------------------------------

BEGIN_CLIP:

   ; spill a few registers   
   nop                              iaddiu vi02, vi00, 0x3be  
   
   SaveIntVector4 0, vi02, vi04, vi05, vi06, vi07
   
   nop                              b      CLIP_TO_VIEWPORT    ; go to x/y clipper
   nop                              iaddiu vi06, vi00, 3       ; fix up vertex count in vi06 

PROJECT_CLIPPED:
   ; aug27/2001 amb
   ; do bfc on clipped triangle
   nop                              ilw.w VI11 ,0x3bf +1(vi00)w ; restore clipping flag from vi11


   nop                              iaddiu vi01,vi00,8
   nop                              iand   vi01,vi01,VI11 
   nop                              nop
   nop                              ibeq vi01,vi00,CLIPPER_CHECK_FLAGS2
   nop                              nop
;---------------------------------------------------------------------------------------------
CLIPPER_SHADOW_BACKFACE_CULL:

;   nop b PROJECT_DONE
;   nop nop


   nop                              lq vf14,0x3cc +2(vi00)    ; load the 3 verts from clip queue
   nop                              lq vf15,0x3cc +5(vi00)
   nop                              lq vf16,0x3cc +8(vi00)   

   ; project all 3 points
   mul.xyz  vf14,vf14,VF30           div q, vf00w, vf14w
   mulq.xyz vf14,vf14,q             waitq
   
   mul.xyz  vf15,vf15,VF30           div q, vf00w, vf15w
   mulq.xyz vf15,vf15,q             waitq

   mul.xyz  vf16,vf16,VF30           div q, vf00w, vf16w
   mulq.xyz vf16,vf16,q             waitq

   sub.xyz vf14,vf14,vf16           nop
   sub.xyz vf15,vf15,vf16           nop
   opmula.xyz ACC,vf14,vf15         nop
   opmsub.xyz vf16,vf15,vf14        nop
   nop                              iaddiu vi02,vi00,32
   nop                              nop
   nop                              nop
   nop                              nop
   nop                              fmand vi01,vi02
   nop                              ibeq vi01,vi00,CLIPPER_SHADOW_FRONT_FACE_TRI
   nop[i]                           loi 8.0         ; front facing tri - increment
   nop[i]                           loi 255.0       ; back facing tri - decrement

   CLIPPER_SHADOW_FRONT_FACE_TRI:
   addi.xyz   vf07, vf00,i          nop
   ftoi0.xyzw vf07, vf07            nop

   nop                              iaddiu vi01,vi00,0x3cc 
   nop                              sq vf07,1(vi01)
   nop                              sq vf07,4(vi01)
   nop                              sq vf07,7(vi01)
   nop                              sq vf07,10(vi01)
   nop                              sq vf07,13(vi01)
   nop                              sq vf07,16(vi01)


   nop                              b CLIPPER_BACKFACE_DONE
   nop                              nop


;----------------------------------------------------------------------------------------------
CLIPPER_CHECK_FLAGS2:
   nop                              iaddiu vi01,vi00,2+4
   nop                              iand   vi01,vi01,VI11 
   nop[i]                           loi +1.0
   nop                              nop
   nop                              ibeq   vi01,vi00,CLIPPER_BACKFACE_DONE ; no need to BFC
   
   nop                              iaddi vi01,vi01,-2
   nop                              nop

   CLIPPER_BACKFACE_CULL_CONT:
   nop                              ibgtz vi01,CLIPPER_BACKFACE_INVERTED
   subw.z vf01z,vf00z,vf00w         nop   ; vf01z = -1   
   addw.z vf01z,vf00z,vf00w         nop   ; vf01z = +1

   CLIPPER_BACKFACE_INVERTED:
   muli.z vf01z,vf01z,i             lq vf14,0x3cc +2(vi00)    ; load the 3 verts from clip queue
   nop                              lq vf15,0x3cc +5(vi00)
   nop                              lq vf16,0x3cc +8(vi00)   

   ; project all 3 points
   mul.xyz  vf14,vf14,VF30           div q, vf00w, vf14w
   mulq.xyz vf14,vf14,q             waitq
   
   mul.xyz  vf15,vf15,VF30           div q, vf00w, vf15w
   mulq.xyz vf15,vf15,q             waitq

   mul.xyz  vf16,vf16,VF30           div q, vf00w, vf16w
   mulq.xyz vf16,vf16,q             waitq

   sub.xyz vf14,vf14,vf16           nop
   sub.xyz vf15,vf15,vf16           nop
   opmula.xyz ACC,vf14,vf15         nop
   opmsub.xyz vf16,vf15,vf14        nop
   mulz.z vf16z,vf16z,vf01z         iaddiu vi02,vi00,32
   nop                              nop
   nop                              nop
   nop                              nop
   nop                              fmand vi01,vi02

   nop                              ibeq vi01,vi00,CLIPPER_BACKFACE_DONE
   nop                              nop           

   ; DONE! this triangle is BFCed
   nop                              b PROJECT_DONE
   nop                              nop

CLIPPER_BACKFACE_DONE:
   
   ; write new clip gif tag
   nop                              iaddiu vi02, vi00, 0x7fff  ; prep output giftag
   nop                              iaddiu vi02, vi02, 1       ; clear tag
   nop                              iadd   vi02, vi02, vi06    ; set NLOOP (output count)
   
   ; vi01 is ClipGifTag
   nop                              iaddiu vi01, vi00, 0x3cb 
   nop                              iaddiu vi04, vi00, 0x3cc    ; first output vertex goes here   
   nop                              iswr.x vi02,(vi01)x              ; store into cliptag

; normalize STs
   nop                              iaddiu vi05,vi06,0
   nop                              lq vf02,0(vi04)   ; vf02 = min
   nop                              lq vf12,0(vi04)   ; vf12 = max        
; find min/max sts
   SCAN_ST_LOOP:
   nop                              lq vf01,0(vi04)
   mini.xy vf02,vf02,vf01           iaddi vi05,vi05,-1
   max.xy  vf12,vf12,vf01           iaddiu vi04,vi04,3
   nop                              ibgtz vi05,SCAN_ST_LOOP
   nop                              loi 0.5

   add.xy  vf02,vf02,vf12           iaddiu vi04, vi00, 0x3cc 
   muli.xy vf02,vf02,i              nop       
   ftoi0.xy vf02,vf02               nop
   itof0.xy vf01,vf02               nop

;  vf01 = average ST
;  vi06 = vertex count
;  vi04 = destination verts ( st [0] , color [1] , pos[2] )
PROJECT_CLIPPED_LOOP:
   nop                              lq vf02, 2(vi04)           ; load vertex
   nop                              lq vf12, 0(vi04)           ; load st
   nop                              div q, vf00w, vf02w        ; 1/w
   sub.xy vf12,vf12,vf01            iaddiu vi02, vi00, 0xff0   ; normalize st, load fog value
   nop                              waitq                      ; viewport scale, wait for 1/w
   mulq.xyz  vf12, vf12, q          mfir.w vf02w, vi02         ; project st, write fog
   mulq.xyz  vf02, vf02, q          isubiu vi06, vi06, 1       ; project, decr vertex count
   mul.xyz   vf02, vf02, VF30        nop                        ; viewport scale, wait for 1/w
   add.xyz   vf02, vf02, VF31        nop                        ; viewport offset
   ftoi4.xyz vf02, vf02             sq vf12, 0(vi04)           ; convert to 12.4, store st
   nop                              sq vf02, 2(vi04)           ; store vertex
   nop                              ibgtz  vi06, PROJECT_CLIPPED_LOOP
   nop                              iaddiu vi04, vi04, 3       ; next vertex

PROJECT_CLIP_XGKICK:
   nop                              nop                        ; make sure last sq is complete

   nop                              xgkick vi01                ; output clipped triangle
   nop                              nop
   
PROJECT_DONE:
; restore registers, return from subroutine
   nop                              iaddiu vi02, vi00, 0x3be  

   LoadIntVector4 0, vi02, vi04, vi05, vi06, vi07

   nop                              jr vi15
   nop                              nop

;------------------------------------------------------------------
;   Sutherland-Hodgman clipping algorithm
;   begin
;
;      get point1 = v[i]
;
;      if ( inside( point1 ) )
;        emit ( point1 )
;        
;      get point2 = v[(i+1)%N]
;
;      if ( inside( point1 ) != inside( point2 ) )
;        emit( interpolate( point1 , point2 ) )
;
;   end

;   vi04 - source verts ptr
;   vi05 - dest verts ptr
;   vi06 - # source verts
;   vi07 - # dest verts
;   vi15 - return addy
;
;   vf02 - edge vertex 0
;   vf12 - edge vertex 1
;   vf13 - scratch
;   vf14 - scratch
;   vf15 - scratch


;- 
CLIP_TO_VIEWPORT:

SPILL_REGS_AND_START:

   ; make sure the GIF is finished reading the last clipped polygon
   ; fixme amb 05/17/2002 - really needed if we write into different
   ; output buffer?!?!?

   nop                              iaddiu vi01, vi00, 0x3cb 
   nop				    iaddiu vi02, vi00, 0x7fff        ; set giftag NLOOP = 0
   nop				    iaddiu vi02, vi02, 1
   nop				    iswr.x vi02, (vi01)x

   nop                              nop
   nop                              nop
   nop                              nop                              ; make sure tag is stored

   nop				    xgkick vi01                      ; send empty tag to flush gif queue
   nop				    nop

   nop                              iaddiu vi01, vi00, 0x3bf 

   ; faster, less memory access
   SaveIntVector4 0, vi01, vi04, vi05, vi06, vi07
   SaveIntVector4 1, vi01, vi08, vi09, vi10, vi11
   SaveIntVector4 2, vi01, vi12, vi13, vi14, vi15

   nop                              iaddiu vi11, vi00, 0x3cc  ; vi11 = clip buffer in   
   nop                              iaddiu vi12, vi00, 0x3e5 
   nop                              iaddiu vi13, vi00, 0x3bf  
   nop                              iaddiu vi01, vi00, 0x3c2          

   ; -- copy the verts from the queue to the input buffer, and duplicate
   ; -- the first vertex to the end of the buffer for easy wrap around  
   ; load first vertex
   nop                              lq vf10, 0(vi01)
   nop                              lq vf11, 1(vi01)
   nop                              lq vf12, 2(vi01)
   nop                              nop
   
   ; copy to vtx position 1 & 4
   nop                              sq vf10, 0(vi11)
   nop                              sq vf11, 1(vi11)
   nop                              sq vf12, 2(vi11)      
   nop                              nop   
   
   nop                              sq vf10, 9(vi11)
   nop                              sq vf11,10(vi11)
   nop                              sq vf12,11(vi11)         
   nop                              nop   
   
   ; load vertex 2
   nop                              lq vf10, 3(vi01)
   nop                              lq vf11, 4(vi01)
   nop                              lq vf12, 5(vi01)
   nop                              nop   
   
   nop                              sq vf10, 3(vi11)
   nop                              sq vf11, 4(vi11)
   nop                              sq vf12, 5(vi11)      
   nop                              nop   

   ; load vertex 3
   nop                              lq vf10, 6(vi01)
   nop                              lq vf11, 7(vi01)
   nop                              lq vf12, 8(vi01)
   nop                              nop   
   
   nop                              sq vf10, 6(vi11)
   nop                              sq vf11, 7(vi11)
   nop                              sq vf12, 8(vi11)      
   nop                              nop   

   nop                              b PLANE_CLIP_START
   nop                              nop
   
   
;- 
RESTORE_REGS_AND_RETURN: 
   
   nop                              iaddiu vi01,vi13,0   ; spill area

   LoadIntVector4 0, vi01, vi04, vi05, vi06, vi07
   LoadIntVector4 1, vi01, vi08, vi09, vi10, vi11
   LoadIntVector4 2, vi01, vi12, vi13, vi14, vi15

   nop                              b PROJECT_CLIPPED  ; return to the projection routine
   nop                              nop
  

;- 
SETUP_BUFFERS:


   setup_pointers:
   nop                              iaddiu vi04, vi11,0          ; src
   nop                              iaddiu vi05, vi12,0          ; dest
   nop                              iaddiu vi09, vi06,0          ; vi09 = new # of verts
   
   nop                              jr vi10
   nop                              iaddiu vi07, vi00,0          ; initial vertex count   
   
;---------------------------------------------------------------------------------------------------
;
;
;  vi04 - source pointer st (0), rgb (1) , xyz (2)
;  vi05 - dest pointer st (0), rgb (1) , xyz (2)
;  vi06 - # source verts
;  vi07 - # dest verts
;  vi15 - return address
;
;  vf04-vf15 = scratch
;

;-- 
PLANE_CLIP_START:
XPLUS_START:

   nop                              bal vi10, SETUP_BUFFERS   
   nop                              nop

   xplus_loop:
   nop                              lq vf04,2(vi04)            ; get first vertex vf04
   nop                              lq vf05,5(vi04)            ; get next vertex  vf05 
   addw.x vf10x , vf00x, vf00w      iaddiu vi08,vi00,0         ; vf10x = 1.0 (w scale), vi08 = 0 (num rotations)
   nop                              nop

   x_lessthan_w                     vf04, vf04, vi01           ; vi01 = vf04 inside +x  
   x_lessthan_w                     vf05, vf05, vi02           ; vi02 = vf05 inside +x
   
   nop                              bal vi10, CLIP_EDGE
   nop                              nop
   
   nop                              isubiu vi09,vi09,1
   nop                              nop
   
   nop                              ibgtz  vi09, xplus_loop
   nop                              nop
   xplus_loop_end:

   nop                              bal vi10, COPY_VERT_BUFFER
   nop                              nop   
      

;-- 
XMINUS_START:

   nop                              bal vi10, SETUP_BUFFERS   
   nop                              nop
   
   xminus_loop:
   nop                              lq vf04,2(vi04)            ; get first vertex vf04
   nop                              lq vf05,5(vi04)            ; get next vertex  vf05 
   subw.x vf10x , vf00x, vf00w      iaddiu vi08,vi00,0         ; vf10x = -1.0 (w scale), vi08 = 0 (num rotations)
   nop                              nop
   
   x_lessthan_neg_w                 vf04, vf04, vi01           ; vi01 = vf04 inside -x  
   x_lessthan_neg_w                 vf05, vf05, vi02           ; vi02 = vf05 inside -x      
   
   nop                              bal vi10, CLIP_EDGE
   nop                              nop
   
   nop                              isubiu vi09,vi09,1
   nop                              nop
   
   nop                              ibgtz vi09, xminus_loop
   nop                              nop
   xminus_end:

   nop                              bal vi10, COPY_VERT_BUFFER
   nop                              nop
   
;-- 
YMINUS_START:

   nop                              bal vi10, SETUP_BUFFERS   
   nop                              nop
   
   yminus_loop:

   nop                              lq vf04,2(vi04)            ; get first vertex vf04
   nop                              lq vf05,5(vi04)            ; get next vertex  vf05 
   addw.x vf10x , vf00x, vf00w      iaddiu vi08,vi00,1         ; vf10x = +1.0 (w scale), vi08 = 1 (num rotations)
   nop                              nop
   
   y_lessthan_w                     vf04, vf04, vi01           ; vi01 = vf04 inside -y
   y_lessthan_w                     vf05, vf05, vi02           ; vi02 = vf05 inside -y
   
   nop                              bal vi10, CLIP_EDGE
   nop                              nop
   
   nop                              isubiu vi09,vi09,1
   nop                              nop
   
   nop                              ibgtz vi09, yminus_loop
   nop                              nop
   yminus_end:

   nop                              bal vi10, COPY_VERT_BUFFER
   nop                              nop

;-- 
YPLUS_START:

   nop                              bal vi10, SETUP_BUFFERS   
   nop                              nop
   
   yplus_loop:

   nop                              lq vf04,2(vi04)            ; get first vertex vf04
   nop                              lq vf05,5(vi04)            ; get next vertex  vf05 
   subw.x vf10x , vf00x, vf00w      iaddiu vi08,vi00,1         ; vf10x = -1.0 (w scale), vi08 = 1 (num rotations)
   nop                              nop
   
   y_lessthan_neg_w                 vf04, vf04, vi01           ; vi01 = vf04 inside +y  
   y_lessthan_neg_w                 vf05, vf05, vi02           ; vi02 = vf05 inside +y
      
   nop                              bal vi10, CLIP_EDGE
   nop                              nop
   
   nop                              isubiu vi09,vi09,1
   nop                              nop
   
   nop                              ibgtz vi09, yplus_loop
   nop                              nop
   yplus_end:

   nop                              bal vi10, COPY_VERT_BUFFER
   nop                              nop

;-- 
ZMINUS_START:

   nop                              bal vi10, SETUP_BUFFERS   
   nop                              nop
   
   zminus_loop:

   nop                              lq vf04,2(vi04)            ; get first vertex vf04
   nop                              lq vf05,5(vi04)            ; get next vertex  vf05 
   addw.x vf10x , vf00x, vf00w      iaddiu vi08,vi00,2         ; vf10x = +1.0 (w scale), vi08 = 2 (num rotations)
   nop                              nop
   
   z_lessthan_w                     vf04, vf04, vi01           ; vi01 = vf04 inside -z
   z_lessthan_w                     vf05, vf05, vi02           ; vi02 = vf05 inside -z
      
   nop                              bal vi10, CLIP_EDGE
   nop                              nop
   
   nop                              isubiu vi09,vi09,1
   nop                              nop
   
   nop                              ibgtz vi09, zminus_loop
   nop                              nop
   zminus_end:

   nop                              bal vi10, COPY_VERT_BUFFER
   nop                              nop
   
   ; skip to end of clipper cause we dont do far plane clipping!
   nop                              b PLANE_CLIP_END
   nop                              nop

;-- 
ZPLUS_START:

   nop                              bal vi10, SETUP_BUFFERS   
   nop                              nop
   
   zplus_loop:

   nop                              lq vf04,2(vi04)            ; get first vertex vf04
   nop                              lq vf05,5(vi04)            ; get next vertex  vf05 
   subw.x vf10x , vf00x, vf00w      iaddiu vi08,vi00,2         ; vf10x = -1.0 (w scale), vi08 = 2 (num rotations)
   nop                              nop
   
   z_lessthan_neg_w                 vf04, vf04, vi01           ; vi01 = vf04 inside +z  
   z_lessthan_neg_w                 vf05, vf05, vi02           ; vi02 = vf05 inside +z
      
   nop                              bal vi10, CLIP_EDGE
   nop                              nop
   
   nop                              isubiu vi09,vi09,1
   nop                              nop
   
   nop                              ibgtz vi09, zplus_loop
   nop                              nop
   zplus_end:

   nop                              bal vi10, COPY_VERT_BUFFER
   nop                              nop
   
;-- 
PLANE_CLIP_END:

   nop                              b RESTORE_REGS_AND_RETURN ; right now we only do +x clipping
   nop                              nop 

;- 
CLIP_EDGE:

   nop                              ibeq vi01,vi00, c_out       ; vertex out? skip it
   nop                              nop

   ; current vertex is in
   c_in:
   nop                              bal vi15, COPY_CURRENT_VERTEX ; vertex is in, add it to list
   nop                              nop

   nop                              ibeq vi02,vi00, c_in_out   ; next vertex out? interpolate
   nop                              nop
   
   nop                              b c_next                   ; both verts are in, so continue
   nop                              nop

   ; current vertex is out
   c_out:
   nop                              ibeq vi02,vi00, c_next ; next vert is out, skip edge
   nop                              nop

   ; current vertex status != next vertex status
   c_in_out:
   c_out_in:
   nop                              bal vi15, INTERPOLATE
   nop                              nop

   ; skip to next vertex
   c_next:
   nop                              jr vi10
   nop                              iaddiu vi04,vi04,3   ; advance vertex pointer
   

;- 
COPY_CURRENT_VERTEX:

   nop                              lq vf13,0(vi04)      ; st
   nop                              lq vf14,1(vi04)      ; color
   nop                              lq vf15,2(vi04)      ; vertex
   nop                              iaddiu  vi07,vi07,1  ; incr vertex count
   
   nop                              sq vf13,0(vi05)      ; st
   nop                              sq vf14,1(vi05)      ; color
   nop                              sq vf15,2(vi05)      ; vertex

   nop                              jr vi15
   nop                              iaddiu  vi05,vi05,3  ; advance dest pointer
   
;- 
COPY_VERT_BUFFER:   

   ; fixme : should really just swap pointers


   nop                              iaddiu vi04, vi12,0
   nop                              iaddiu vi05, vi11,0
   nop                              iaddiu vi06, vi07,0    ; vi06 = new # of verts     
   nop                              isw.z  vi06,0(vi13)z   ; write new vtx count      

   copy_loop:
   nop                              lq vf10,0(vi04)      ; st
   nop                              lq vf11,1(vi04)      ; color
   nop                              lq vf12,2(vi04)      ; vertex
   nop                              nop
   
   nop                              sq vf10,0(vi05)      ; st
   nop                              sq vf11,1(vi05)      ; color
   nop                              sq vf12,2(vi05)      ; vertex

   nop                              iaddi vi07,vi07,-1   ; decr vertex count
   nop                              iaddiu vi04,vi04,3
   
   nop                              ibgtz vi07,copy_loop ; go to next vert   
   nop                              iaddiu vi05,vi05,3
   
   copy_loop_end:
   
   nop                              iaddiu vi04, vi11,0
   nop                              lq vf10,0(vi04)      ; st
   nop                              lq vf11,1(vi04)      ; color
   nop                              lq vf12,2(vi04)      ; vertex
   nop                              nop
   
   nop                              sq vf10,0(vi05)      ; st
   nop                              sq vf11,1(vi05)      ; color
   nop                              sq vf12,2(vi05)      ; vertex
# 851 "../../../../pure3d/pddi/ps2/quad-vu/vu_clipper.vsm"


   nop                              jr vi10              ; return to caller
   nop                              nop
;- 
   

;- 
; vf04 = current vertex
; vf05 = next vertex
; vf10x = sgn flag 
;
; vi08 = num rotations
; vi15 = return addy

INTERPOLATE: 

   mulx.w   vf11w, vf04w, vf10x	    lq  vf06,0(vi04) ; vf11w = sgn*c[w] , vf06 = st0   
   mulx.w   vf12w, vf05w, vf10x	    lq  vf07,3(vi04) ; vf12w = sgn*n[w] , vf07 = st1
   nop				    lq  vf08,1(vi04) ; vf08 = col0
   nop				    lq  vf09,4(vi04) ; vf09 = col1	   
   subw.xyzw vf11, vf04, vf11w	    nop              ; vf11 = c[xyz]-sgn*c[w]
   subw.xyzw vf12, vf05, vf12w	    nop              ; vf12 = n[xyz]-sgn*n[w]
   nop				    nop	

   ; rotate the fields in xyzw so that it lines up with
   ; which plane youre clipping to
   loop_rot:
	nop	ibeq  vi08, vi00, loop_rot_end
	nop	nop
	nop	mr32.xyzw  vf11, vf11
	nop	mr32.xyzw  vf12, vf12
	nop	isubiu  vi08, vi08, 1
	nop	nop
	nop	b  loop_rot
	nop	nop
   loop_rot_end:
 
;------------------

   sub.xyz  vf10, vf12, vf11	    nop
   itof0    vf08,vf08               div  q, vf11x, vf10x ; convert color to float, and divide
   itof0    vf09,vf09               nop
   
   sub.xyzw vf13, vf05, vf04	    nop ; vertex, n - c
   sub.xyzw vf14, vf07, vf06	    nop ; ST
   sub.xyzw vf15, vf09, vf08	    nop ; color
   
;   nop                              waitq
   addq.x   vf10x, vf00x, q	    waitq
   abs.x    vf10x, vf10x            nop ; t = |(c-cw)/((n-nw)+(c-cw))|
   
   mulx.xyzw  vf13, vf13, vf10x	    nop ; vertex t*(n-c)
   mulx.xyzw  vf14, vf14, vf10x	    nop ; ST
   mulx.xyzw  vf15, vf15, vf10x	    nop ; color
   nop                              nop

   add.xyzw   vf13, vf13, vf04	    nop ; c + t*(n-c)
   add.xyzw   vf14, vf14, vf06	    nop 
   add.xyzw   vf15, vf15, vf08	    nop
   
   ftoi0      vf15,vf15             nop ; convert color back to fixed point - STALL!

   ; store interpolated values
   nop                              sq vf13,2(vi05) ; vertex
   nop                              sq vf14,0(vi05) ; ST
   nop                              sq vf15,1(vi05) ; color
   nop                              iaddiu vi05,vi05,3   ; advance dest pointer   

   nop                              jr vi15
   nop                              iaddi  vi07,vi07,1   ; incr vertex count
# 60 "../../../../pure3d/pddi/ps2/quad-vu/main.dsm" 2

# 1 "../../../../pure3d/pddi/ps2/quad-vu/vu_bfc.vsm" 1
;--------------------------------------------------------
; backface culling
; vf01 = trashed
; vi02 = thrashed!
; vi04 = input verts (screen space)
; vi05 = vert count
; vf01-vf07 = thrashed!
;--------------------------------------------------------

BACKFACE_CULL:
   ; caller should ensure that BFC flag is set    
   
   nop                              iaddiu vi01,vi00,+6           ; test for BFC mode
   nop                              iand   vi01,vi01,VI11 
   nop                              iaddi  vi01,vi01,-2
   nop[i]                           loi -1.0
   nop                              ibgtz vi01,BACKFACE_CULL_START
   subw.z vf01z,vf00z,vf00w         nop   ; vf01z = -1 
   addw.z vf01z,vf00z,vf00w         nop   ; vf01z = +1   

   BACKFACE_CULL_START:

   nop                              ibgtz VI12 ,BACKFACE_TRISTRIP
   nop                              iaddiu vi02,vi00,32 ; mask for z-sign in MAC flag

   nop                              lq vf02, 2(vi04)
   nop                              lq vf03, 5(vi04)
   nop                              lq vf04, 8(vi04)
   itof4.xyz vf02, vf02             nop
   itof4.xyz vf03, vf03             nop
   itof4.xyz vf04, vf04             iaddiu vi04,vi04,9   ; incr by 3 verts
   
   ; stallorama!         
   ;----------------------------------------------------------------------------   
   ; triangles backface culling
   BACKFACE_TRI_LOOP:
   
   sub.xyz vf02,vf02,vf04           nop
   sub.xyz vf03,vf03,vf04           iaddi vi05,vi05,-3
   nop                              nop
   nop                              nop   
   opmula.xyz ACC,vf02,vf03         nop
   opmsub.xyz vf04,vf03,vf02        nop
   ; vf16z = signed triangle area
   mulz.z vf04z,vf04z,vf01z         nop
   nop                              lq vf02,2(vi04)
   nop                              lq vf03,5(vi04)
   nop                              lq vf04,8(vi04)
   itof4.xyz vf02,vf02              fmand vi01,vi02    ; ???result is in by now?!
   itof4.xyz vf03,vf03              ibeq  vi01,vi00,FRONT_FACE_TRI
   itof4.xyz vf04,vf04              iaddiu vi01,vi00,0x7fff
   nop                              iaddiu vi01,vi01,1

   ; this tri needs to be culled 
;   nop                              ilw.w vi02,-1(vi04)w
;   nop                              ior   vi02,vi02,vi01
;   nop                              isw.w vi02,-1(vi04)w

   nop                              isw.w vi01,-1(vi04)w
   nop                              isw.w vi01,-4(vi04)w
   nop                              isw.w vi01,-7(vi04)w
   
   FRONT_FACE_TRI:

   nop                              ibgtz vi05, BACKFACE_TRI_LOOP
   nop                              iaddiu vi04,vi04,+9   ; incr by 3 verts

   nop                              jr vi15
   nop                              nop

   ;----------------------------------------------------------------------------   
   ; triangle strips backface culling
   BACKFACE_TRISTRIP:   

   ; prefetch first triangle   
   nop                              lq vf02, 2(vi04)
   nop                              lq vf03, 5(vi04)
   nop                              lq vf04, 8(vi04)
   nop                              nop
   itof4.xyz vf02, vf02             nop
   itof4.xyz vf03, vf03             nop
   itof4.xyz vf04, vf04             iaddi vi05,vi05,-2   

   BACKFACE_TRISTRIP_LOOP:

   sub.xyz vf02,vf02,vf04           iaddiu vi04,vi04,3   ; incr by 3 verts
   sub.xyz vf03,vf03,vf04           iaddi vi05,vi05,-1
   opmula.xyz ACC,vf02,vf03         nop
   opmsub.xyz vf04,vf03,vf02        nop         

   ; vf16z = signed triangle area
   mulz.z vf04z,vf04z,vf01z         lq vf02,2(vi04)
   nop                              lq vf03,5(vi04)
   nop                              lq vf04,8(vi04)
   nop                              nop
   itof4.xyz vf02,vf02              fmand vi01,vi02
   itof4.xyz vf03,vf03              ibeq vi01,vi00,FRONT_FACE_TRISTRIP
   itof4.xyz vf04,vf04              iaddiu vi01,vi00,0x7fff

   ; this tri needs to be culled
   nop                              iaddiu vi01,vi01,1    ; vi01 = 0x8000 ADC bit is set
   nop                              isw.w vi01,+5(vi04)w

   FRONT_FACE_TRISTRIP:
   ; flip sign for next triangle
   muli.z vf01z,vf01z,i             ibgtz vi05, BACKFACE_TRISTRIP_LOOP
   nop                              nop

   nop                              jr vi15
   nop                              nop
;----------------------------------------------------------------------------------------------------

# 61 "../../../../pure3d/pddi/ps2/quad-vu/main.dsm" 2

# 1 "../../../../pure3d/pddi/ps2/quad-vu/skinblend.vsm" 1



;;******************************************
;; 
;; VU_SkinBlend
;; 
;; Inputs
;; VI02 1023
;; VI15 Return address
;; VI10 Scracth area pointer
;;
;; Outputs
;; 
;; Temporaries:
;;
VU_SKINBLEND:

; Change this to 0 for copy only

    NOP     iaddiu  vi03, vi0, 0x7FFE
    NOP     ilwr.x vi1, (vi2)x  ; Load the address from the first quadword of skinning info
    NOP     jr  vi1             ; jump to the code
    NOP     iand VI11 , VI11 , vi03

# 51 "../../../../pure3d/pddi/ps2/quad-vu/skinblend.vsm"



;;******************************************
;; 
;; VU_SkinBlendNT
;; 
;; Inputs
;; VI10 Scracth area pointer
;; VI15 Return address
;;
;; Outputs
;; 
;; Temporaries:
;;
VU_SKINBLEND_NT:
    ; Build jump table for bone count
    NOP                             iaddiu      vi2, vi0, VU_SkinBlend_NT_Bone1
    NOP                             iaddiu      vi3, vi0, VU_SkinBlend_NT_Bone2
    NOP                             iaddiu      vi4, vi0, VU_SkinBlend_NT_Bone3
    NOP                             iaddiu      vi5, vi0, VU_SkinBlend_NT_Bone4
    NOP                             isw.x       vi2, 0x00(vi10)x    ; Store jump table
    NOP                             isw.x       vi3, 0x01(vi10)x
    NOP                             isw.x       vi4, 0x02(vi10)x
    NOP                             isw.x       vi5, 0x03(vi10)x
    NOP                             iaddiu      vi8, vi0, 0x03 ; mask for jump table
    NOP                             xtop        vi04
    NOP                             ilwr.x      vi2, (vi4)x     ; load vertex count
    NOP                             iaddiu      vi3, vi0, 5     ; Input stride
    NOP                             iaddiu      vi4, vi4, 2     ; first input vertex address
    NOP                             iadd        vi5, vi4, vi0   ; first output vertex address

    NOP                             ilw.z       vi7, 0x02(vi4)z ; load bone count
    NOP                             ilw.w       vi6, 0x03(vi4)w ; load bone 4 matrix pointer
    NOP                             lq.xyzw     vf10, 0x04(vi4) ; load integer bone weights
    NOP                             lq.xyzw     vf1, 0x01(vi4)  ; Load Normal
    NOP                             lq.xyzw     vf2, 0x02(vi4)  ; Load Position
    itof15.xyzw vf9, vf10           iand        vi7, vi7, vi8   ; convert 1.15 weights to floats, mask table index
    NOP                             iadd        vi7, vi7, vi10  ; add scratch area pointer to jump table index
    NOP                             ilw.x       vi7, 0x00(vi7)x ; Load bone address
    NOP                             lq.xyzw     vf11, 0x00(vi6) ; Load Matrix into register VF11-VF14     
    itof12.xyzw vf1, vf1            lq.xyzw     vf12, 0x01(vi6) ; Convert normals to floats from 4.12
    NOP                             lq.xyzw     vf13, 0x02(vi6)      
    NOP                             lq.xyzw     vf14, 0x03(vi6)      
VU_SkinBlendNT_Looptop:
    ; Code to skip ahead to the correct bone count goes here
    add.xyzw        vf5, vf0, vf0   jr          vi7             ; jump to correct bone
    add.xyzw        vf6, vf0, vf0   lq.xyzw     vf8, 0x00(vi4)  ; UV

VU_SkinBlend_NT_Bone4:

    mulax.xyzw     ACC, vf11, vf1x  ilw.z       vi6, 0x03(vi4)z ; Matrix * Normal mult into vf5   ; load bone 3 matrix pointer
    madday.xyzw    ACC, vf12, vf1y  NOP                         ;
    maddz.xyzw     vf5, vf13, vf1z  NOP                         ;

    mulax.xyzw     ACC, vf11, vf2x  lq.xyzw     vf11, 0x00(vi6) ; Matrix * Position mult into vf6
    madday.xyzw    ACC, vf12, vf2y  lq.xyzw     vf12, 0x01(vi6) ;
    maddaz.xyzw    ACC, vf13, vf2z  lq.xyzw     vf13, 0x02(vi6) ;
    maddw.xyzw     vf6, vf14, vf0w  lq.xyzw     vf14, 0x03(vi6) ;

VU_SkinBlend_NT_Bone3:
    mulaw.xyzw     ACC, vf5,  vf9w  ilw.y       vi6, 0x03(vi4)y ; Put N4B4 into ACC    ; load bone 2 matrix pointer
    maddax.xyzw    ACC, vf11, vf1x  NOP                         ; Matrix * Normal mult into vf5
    madday.xyzw    ACC, vf12, vf1y  NOP                         ;
    maddz.xyzw     vf5, vf13, vf1z  NOP                         ;

    mulaw.xyzw     ACC, vf6,  vf9w  NOP                         ; Put V4B4 into ACC
    maddax.xyzw    ACC, vf11, vf2x  lq.xyzw     vf11, 0x00(vi6) ; Matrix * Position mult into vf6
    madday.xyzw    ACC, vf12, vf2y  lq.xyzw     vf12, 0x01(vi6) ;
    maddaz.xyzw    ACC, vf13, vf2z  lq.xyzw     vf13, 0x02(vi6) ;
    maddw.xyzw     vf6, vf14, vf0w  lq.xyzw     vf14, 0x03(vi6) ;

VU_SkinBlend_NT_Bone2:
    mulaz.xyzw     ACC, vf5,  vf9z  ilw.x       vi6, 0x03(vi4)x ; Put N3B3 into ACC ; load bone 1 matrix pointer
    maddax.xyzw    ACC, vf11, vf1x  NOP                         ; Matrix * Normal mult into vf5   
    madday.xyzw    ACC, vf12, vf1y  NOP
    maddz.xyzw     vf5, vf13, vf1z  NOP                         ;

    mulaz.xyzw     ACC, vf6,  vf9z  NOP                         ; Put V3B3 into ACC
    maddax.xyzw    ACC, vf11, vf2x  lq.xyzw     vf11, 0x00(vi6) ; Matrix * Position mult into vf6
    madday.xyzw    ACC, vf12, vf2y  lq.xyzw     vf12, 0x01(vi6) ;
    maddaz.xyzw    ACC, vf13, vf2z  lq.xyzw     vf13, 0x02(vi6) ;
    maddw.xyzw     vf6, vf14, vf0w  lq.xyzw     vf14, 0x03(vi6) ;

VU_SkinBlend_NT_Bone1:
    mulay.xyzw     ACC, vf5,  vf9y  iadd        vi4, vi4, vi3   ; Put N2B2 into ACC; increment input pointer by input pitch
    maddax.xyzw    ACC, vf11, vf1x  ilw.z       vi7, 0x02(vi4)z ; Matrix * Normal mult into vf5  ; Load bone 4 matrix pointer
    madday.xyzw    ACC, vf12, vf1y  ilw.w       vi6, 0x03(vi4)w ; Load next vertex matrix indices
    NOP                             lq.xyzw     vf10, 0x04(vi4) ; Load next vertex integer bone weights
    maddz.xyzw     vf5, vf13, vf1z  iand        vi7, vi7, vi8   ; mask off bone count

    NOP                             iadd        vi7, vi7, vi10  ; add scratch area pointer to jump table index
    mulay.xyzw     ACC, vf6,  vf9y  ilw.x       vi7,  0x00(vi7)x ; Put V2B2 into ACC  ; load next vertex jump table
    maddax.xyzw    ACC, vf11, vf2x  lq.xyzw     vf11, 0x00(vi6) ; Matrix * Position mult into vf6
    madday.xyzw    ACC, vf12, vf2y  lq.xyzw     vf12, 0x01(vi6) ;
    maddaz.xyzw    ACC, vf13, vf2z  lq.xyzw     vf13, 0x02(vi6) ;
    maddw.xyzw     vf6, vf14, vf0w  lq.xyzw     vf14, 0x03(vi6) ;

    mulx.xyzw      vf3, vf5, vf9x   lq.xyzw     vf1, 0x01(vi4)  ; Scale N1 by B1   ; Load next normal
    NOP                             isubiu      vi2, vi2, 1     ; decrement loop counter
    mulx.xyzw      vf4, vf6, vf9x   lq.xyzw     vf2, 0x02(vi4)  ; Scale V1 by B1   ; Load next pos
    NOP                             sqi.xyzw    vf8, (vi5++)    ; store UV and post increment poionter

    ; Loop tail
    NOP                             sqi.xyzw    vf3, (vi5++)    ;                                  ; store normal
    itof12.xyzw    vf1, vf1         ibgtz       vi2, VU_SkinBlendNT_Looptop ; convet next normal to floats
    itof15.xyzw    vf9, vf10        sqi.xyzw    vf4, (vi5++)    ; Convert next weigfhts to float   ; Store Positions

VU_SkinBlendNT_Loopbottom:
    NOP                             jr          vi15            ; Done, return to calling function
    NOP                             NOP





;;******************************************
;; 
;; VU_SkinBlend1BNT
;; 
;; Inputs
;; VI10 Scracth area pointer
;; VI15 Return address
;;
;; Outputs
;; 
;; Temporaries:
;;

VU_SKINBLEND1B_NT:
    NOP                                 xtop        vi04
    NOP                                 ilwr.x      vi02, (vi4)x        ; load vertex count
    NOP                                 iaddiu      vi03, vi00, 4       ; Input stride
    NOP                                 iaddiu      vi04, vi04, 2       ; first input vertex address
    NOP                                 iaddiu      vi05, vi04, 0       ; Output vertex data address            

    NOP                                 ilw.x       vi06, 0x03(vi04)x   ; load bone matrix pointer
    NOP                                 ilw.y       vi01, 0x03(vi04)y   ; load RLE count
    NOP                                 lq.xyzw     vf01, 0x01(vi04)    ; Load Normal
    NOP                                 lq.xyzw     vf02, 0x02(vi04)    ; Load Position
    NOP                                 lq.xyzw     vf11, 0x00(vi06)    ; Load first bone matrix  
    NOP                                 lq.xyzw     vf12, 0x01(vi06)    ;  
    itof12.xyzw  vf01, vf01             lq.xyzw     vf13, 0x02(vi06)    ; Convert normal to floats
    NOP                                 lq.xyzw     vf14, 0x03(vi06)    ;

VU_SkinBlend1BNT_Looptop:
    NOP                                 ibeq        vi01, vi00, VU_SkinBlend1BNT_Last
    NOP                                 isub        vi02, vi02, vi01    ; subtract out RLE run from vertex count

VU_SkinBlend1BNT_RLE:
    mulax.xyzw     ACC, vf11, vf01x     lq.xyzw     vf08, 0x00(vi04)    ; Load current UV
    madday.xyzw    ACC, vf12, vf01y     iadd        vi04, vi04, vi03    ; increment input pointer
    maddz.xyzw     vf5, vf13, vf01z     lq.xyzw     vf01, 0x01(vi04)    ; Load next normal 

    mulax.xyzw     ACC, vf11, vf02x     lq.xyzw     vf04, 0x02(vi04)    ; Load next Position into temp register
    madday.xyzw    ACC, vf12, vf02y     isubiu      vi01, vi01, 1       ; Decrement RLE loop counter
    maddaz.xyzw    ACC, vf13, vf02z     sqi.xyzw    vf08, (vi05++)      ; Store UV

    maddw.xyzw     vf6, vf14, vf00w     sqi.xyzw    vf05, (vi05++)      ; Store Normals
    itof12.xyzw    vf01, vf01           NOP                             ; Convert next normal to floats
    NOP                                 NOP
    mulw.xyzw      vf02, vf04, vf00w    ibgtz       vi01, VU_SkinBlend1BNT_RLE  ; Move next Position into correct register
    NOP                                 sqi.xyzw    vf06, (vi05++)      ; Store Positions

VU_SkinBlend1BNT_Last:
    mulax.xyzw     ACC, vf11, vf01x     lq.xyzw     vf08, 0x00(vi04)    ; Matrix * Normal mult into vf5      ; Load current UV
    madday.xyzw    ACC, vf12, vf01y     iadd        vi04, vi04, vi03    ; increment input pointer
    maddz.xyzw     vf5, vf13, vf01z     ilw.x       vi06, 0x03(vi04)x   ; Load next vertex matrix indices
    NOP                                 isubiu      vi02, vi02, 1       ; decrement loop counter

    mulax.xyzw     ACC, vf11, vf02x     lq.xyzw     vf01, 0x01(vi04)    ; Load next normal 
    madday.xyzw    ACC, vf12, vf02y     lq.xyzw     vf04, 0x02(vi04)    ; Load next Position into temp register
    maddaz.xyzw    ACC, vf13, vf02z     lq.xyzw     vf11, 0x00(vi06)    ; Load next matrix
    maddw.xyzw     vf6, vf14, vf00w     lq.xyzw     vf12, 0x01(vi06)    ;
    NOP                                 ilw.y       vi01, 0x03(vi04)y   ; load RLE count
    itof12.xyzw  vf01, vf01             lq.xyzw     vf13, 0x02(vi06)    ; COnvert next normal to floats
    NOP                                 lq.xyzw     vf14, 0x03(vi06)    ; 

    mulw.xyzw      vf02, vf04, vf00w    sqi.xyzw    vf08, (vi05++)      ; Move next Position into correct register;  Store UV
    NOP                                 sqi.xyzw    vf05, (vi05++)      ; Store Normals
    NOP                                 ibgtz       vi02, VU_SkinBlend1BNT_Looptop
    NOP                                 sqi.xyzw    vf06, (vi05++)      ; Store Positions

VU_SkinBlend1BNT_Loopbottom:
    NOP                                 jr          vi15                ; Done, return to calling function
    NOP                                 NOP

# 276 "../../../../pure3d/pddi/ps2/quad-vu/skinblend.vsm"





;;******************************************
;; 
;; VU_SkinBlendCT
;; 
;; Inputs
;; VI10 Scracth area pointer
;; VI15 Return address
;;
;; Outputs
;; 
;; Temporaries:
;;
VU_SKINBLEND_CT:
    ; Build jump table for bone count
    NOP                             iaddiu      vi2, vi0, VU_SkinBlend_CT_Bone1
    NOP                             iaddiu      vi3, vi0, VU_SkinBlend_CT_Bone2
    NOP                             iaddiu      vi4, vi0, VU_SkinBlend_CT_Bone3
    NOP                             iaddiu      vi5, vi0, VU_SkinBlend_CT_Bone4
    NOP                             isw.x       vi2, 0x00(vi10)x    ; Store jump table
    NOP                             isw.x       vi3, 0x01(vi10)x
    NOP                             isw.x       vi4, 0x02(vi10)x
    NOP                             isw.x       vi5, 0x03(vi10)x
    NOP                             iaddiu      vi8, vi0, 0x03 ; mask for jump table
    NOP                             xtop        vi04
    NOP                             ilwr.x      vi2, (vi4)x     ; load vertex count
    NOP                             iaddiu      vi3, vi0, 5     ; Input stride
    NOP                             iaddiu      vi4, vi4, 2     ; first input vertex address
    NOP                             iadd        vi5, vi4, vi0   ; first output vertex address

    NOP                             ilw.z       vi7, 0x02(vi4)z ; load bone count
    NOP                             ilw.w       vi6, 0x03(vi4)w ; load bone 4 matrix pointer
    NOP                             lq.xyzw     vf10, 0x04(vi4) ; load integer bone weights
    NOP                             lq.xyzw     vf2, 0x02(vi4)  ; Load Position
    itof15.xyzw vf9, vf10           iand        vi7, vi7, vi8   ; convert 1.15 weights to floats, mask table index
    NOP                             iadd        vi7, vi7, vi10  ; add scratch area pointer to jump table index
    NOP                             ilw.x       vi7, 0x00(vi7)x ; Load bone address
    NOP                             lq.xyzw     vf11, 0x00(vi6) ; Load Matrix into register VF11-VF14     
    NOP                             lq.xyzw     vf12, 0x01(vi6)      
    NOP                             lq.xyzw     vf13, 0x02(vi6)      
    NOP                             lq.xyzw     vf14, 0x03(vi6)      
VU_SkinBlendCT_Looptop:
    ; Code to skip ahead to the correct bone count goes here
    add.xyzw        vf5, vf0, vf0   jr          vi7             ; jump to correct bone
    add.xyzw        vf6, vf0, vf0   lq.xyzw     vf8, 0x00(vi4)  ; UV

VU_SkinBlend_CT_Bone4:

    NOP                             ilw.z       vi6, 0x03(vi4)z ; Matrix * Normal mult into vf5   ; load bone 3 matrix pointer
    NOP                             NOP                         ;
    NOP                             NOP                         ;

    mulax.xyzw     ACC, vf11, vf2x  lq.xyzw     vf11, 0x00(vi6) ; Matrix * Position mult into vf6
    madday.xyzw    ACC, vf12, vf2y  lq.xyzw     vf12, 0x01(vi6) ;
    maddaz.xyzw    ACC, vf13, vf2z  lq.xyzw     vf13, 0x02(vi6) ;
    maddw.xyzw     vf6, vf14, vf0w  lq.xyzw     vf14, 0x03(vi6) ;

VU_SkinBlend_CT_Bone3:
    NOP                             ilw.y       vi6, 0x03(vi4)y ; Load next matrix pointer
    NOP                             NOP                         ;
    NOP                             NOP                         ; 
    NOP                             NOP                         ; 

    mulaw.xyzw     ACC, vf6,  vf9w  NOP                         ; Put V4B4 into ACC
    maddax.xyzw    ACC, vf11, vf2x  lq.xyzw     vf11, 0x00(vi6) ; Matrix * Position mult into vf6
    madday.xyzw    ACC, vf12, vf2y  lq.xyzw     vf12, 0x01(vi6) ;
    maddaz.xyzw    ACC, vf13, vf2z  lq.xyzw     vf13, 0x02(vi6) ;
    maddw.xyzw     vf6, vf14, vf0w  lq.xyzw     vf14, 0x03(vi6) ;

VU_SkinBlend_CT_Bone2:
    NOP                             ilw.x       vi6, 0x03(vi4)x ; load bone 1 matrix pointer
    NOP                             NOP                         
    NOP                             NOP
    NOP                             NOP                         ;

    mulaz.xyzw     ACC, vf6,  vf9z  NOP                         ; Put V3B3 into ACC
    maddax.xyzw    ACC, vf11, vf2x  lq.xyzw     vf11, 0x00(vi6) ; Matrix * Position mult into vf6
    madday.xyzw    ACC, vf12, vf2y  lq.xyzw     vf12, 0x01(vi6) ;
    maddaz.xyzw    ACC, vf13, vf2z  lq.xyzw     vf13, 0x02(vi6) ;
    maddw.xyzw     vf6, vf14, vf0w  lq.xyzw     vf14, 0x03(vi6) ;

VU_SkinBlend_CT_Bone1:
    NOP                             lq.xyzw     vf1, 0x01(vi4)  ; Load current Colour
    NOP                             iadd        vi4, vi4, vi3   ; increment input pointer by input pitch
    NOP                             ilw.z       vi7, 0x02(vi4)z ; Load bone 4 matrix pointer
    NOP                             ilw.w       vi6, 0x03(vi4)w ; Load next vertex matrix indices
    NOP                             lq.xyzw     vf10, 0x04(vi4) ; Load next vertex integer bone weights
    NOP                             iand        vi7, vi7, vi8   ; mask off bone count

    NOP                             iadd        vi7, vi7, vi10  ; add scratch area pointer to jump table index
    mulay.xyzw     ACC, vf6,  vf9y  ilw.x       vi7, 0x00(vi7)x ; Put V2B2 into ACC  ; load next vertex jump table
    maddax.xyzw    ACC, vf11, vf2x  lq.xyzw     vf11, 0x00(vi6) ; Matrix * Position mult into vf6
    madday.xyzw    ACC, vf12, vf2y  lq.xyzw     vf12, 0x01(vi6) ;
    maddaz.xyzw    ACC, vf13, vf2z  lq.xyzw     vf13, 0x02(vi6) ;
    maddw.xyzw     vf6, vf14, vf0w  lq.xyzw     vf14, 0x03(vi6) ;

    NOP                             isubiu      vi2, vi2, 1     ; decrement loop counter
    mulx.xyzw      vf4, vf6, vf9x   lq.xyzw     vf2, 0x02(vi4)  ; Scale V1 by B1   ; Load next pos

    NOP                             sqi.xyzw    vf8, (vi5++)    ; store UV and post increment poionter
    NOP                             sqi.xyzw    vf1, (vi5++)    ;                                 ; store Colour
    NOP                             ibgtz       vi2, VU_SkinBlendCT_Looptop   ; Move colour into correct register
    itof15.xyzw    vf9, vf10        sqi.xyzw    vf4, (vi5++)    ; Convert next weigfhts to float   ; Store Positions

VU_SkinBlendCT_Loopbottom:
    NOP                             jr          vi15            ; Done, return to calling function
    NOP                             NOP





;;******************************************
;; 
;; VU_SkinBlend1BCT
;; 
;; Inputs
;; VI10 Scracth area pointer
;; VI15 Return address
;;
;; Outputs
;; 
;; Temporaries:
;;
VU_SKINBLEND1B_CT:

    NOP                             xtop        vi04
    NOP                             ilwr.x      vi2, (vi4)x     ; load vertex count
    NOP                             iaddiu      vi3, vi0, 4     ; Input stride
    NOP                             iaddiu      vi4, vi4, 2     ; first input vertex address
    NOP                             iaddiu      vi5, vi4, 0     ; Output vertex data address            

    NOP                             ilw.x       vi6, 0x03(vi4)x ; load bone matrix pointer
    NOP                             lq.xyzw     vf2, 0x02(vi4)  ; Load Position
    NOP                             lq.xyzw     vf11, 0x00(vi6)      
    NOP                             lq.xyzw     vf12, 0x01(vi6)      
    NOP                             lq.xyzw     vf13, 0x02(vi6)      
    NOP                             lq.xyzw     vf14, 0x03(vi6)      

VU_SkinBlend1BCT_Looptop:
    NOP                             lq.xyzw     vf8, 0x00(vi4)  ; Load UV
    NOP                             lq.xyzw     vf1, 0x01(vi4)  ; Load Colour
    NOP                             iadd        vi4, vi4, vi3   ; increment input pointer
    NOP                             ilw.x       vi6, 0x03(vi4)x ; Load next vertex matrix indices
    NOP                             isubiu      vi2, vi2, 1     ; decrement loop counter

    mulax.xyzw     ACC, vf11, vf2x  sqi.xyzw    vf8, (vi5++)    ; Store UV 
    madday.xyzw    ACC, vf12, vf2y  lq.xyzw     vf4,  0x02(vi4) ; Load next Position into temp register
    maddaz.xyzw    ACC, vf13, vf2z  lq.xyzw     vf11, 0x00(vi6) ; Load next matrix
    maddw.xyzw     vf6, vf14, vf0w  lq.xyzw     vf12, 0x01(vi6) ;
    NOP                             lq.xyzw     vf13, 0x02(vi6) ;
    mulw.xyzw      vf2, vf4, vf0w   lq.xyzw     vf14, 0x03(vi6) ; Move next Position into correct register

    NOP                             sqi.xyzw    vf1, (vi5++)   ; Store Colours
    NOP                             ibgtz       vi2, VU_SkinBlend1BCT_Looptop
    NOP                             sqi.xyzw    vf6, (vi5++)   ; Store Positions

VU_SkinBlend1BCT_Loopbottom:
    NOP                             jr          vi15            ; Done, return to calling function
    NOP                             NOP



# 62 "../../../../pure3d/pddi/ps2/quad-vu/main.dsm" 2

# 1 "../../../../pure3d/pddi/ps2/quad-vu/usercode/vu_user_code.h" 1
 




# 63 "../../../../pure3d/pddi/ps2/quad-vu/main.dsm" 2

VU_END:

PDDI_VU1_code_end:
.EndMPG
.EndDmaData
