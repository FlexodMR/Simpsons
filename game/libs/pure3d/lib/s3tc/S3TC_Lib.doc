{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f30\froman\fcharset238\fprq2 Times New Roman CE;}{\f31\froman\fcharset204\fprq2 Times New Roman Cyr;}
{\f33\froman\fcharset161\fprq2 Times New Roman Greek;}{\f34\froman\fcharset162\fprq2 Times New Roman Tur;}{\f35\froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f36\froman\fcharset178\fprq2 Times New Roman (Arabic);}
{\f37\froman\fcharset186\fprq2 Times New Roman Baltic;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;
\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 
\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext0 Normal;}{\*\cs10 \additive Default Paragraph Font;}}{\info{\author Seth Sowerby}{\operator Seth}{\creatim\yr1999\mo6\dy14\hr19\min32}{\revtim\yr2000\mo2\dy25\hr19\min7}
{\printim\yr2000\mo2\dy25\hr17\min53}{\version11}{\edmins547}{\nofpages6}{\nofwords1227}{\nofchars6997}{\*\company Volume 11 Software Development Ltd.}{\nofcharsws0}{\vern8247}}
\widowctrl\ftnbj\aendnotes\aftnstart0\hyphhotz0\aftnnar\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\lytprtmet\hyphcaps0\horzdoc\dghspace120\dgvspace120\dghorigin1701\dgvorigin1984\dghshow0\dgvshow3
\jcompress\viewkind1\viewscale100\pgbrdrhead\pgbrdrfoot\nolnhtadjtbl \fet0\sectd \linex0\headery709\footery709\colsx709\endnhere\sectdefaultcl {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang
{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang
{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain 
\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\fs28\lang2057\langfe1033\langnp2057 S3TC Library Functions
\par 
\par }\pard \ql \li0\ri-1800\widctlpar\faauto\adjustright\rin-1800\lin0\itap0 {\b\fs24\lang2057\langfe1033\langnp2057 S3TC_GetEncodeSize}{\lang2057\langfe1033\langnp2057 
\par 
\par The }{\b\lang2057\langfe1033\langnp2057 S3TC_GetEncodeSize}{\lang2057\langfe1033\langnp2057  function calculates the memory required for a compressed texture.}{\b\lang2057\langfe1033\langnp2057 
\par 
\par unsigned int S3TC_GetEncodeSize(
\par \tab unsigned long }{\lang2057\langfe1033\langnp2057 lWidth ,}{\b\lang2057\langfe1033\langnp2057 
\par \tab unsigned long }{\lang2057\langfe1033\langnp2057 lHeight ,}{\b\lang2057\langfe1033\langnp2057 
\par \tab unsigned int}{\lang2057\langfe1033\langnp2057  nEncodeType
\par }{\b\lang2057\langfe1033\langnp2057 );}{\lang2057\langfe1033\langnp2057 
\par 
\par }{\b\fs22\lang2057\langfe1033\langnp2057 Parameters}{\fs22\lang2057\langfe1033\langnp2057 
\par }{\lang2057\langfe1033\langnp2057 
\par lWidth
\par \tab Width of the texture to be compressed.
\par 
\par lHeight
\par \tab Height of the texture to be compressed.
\par 
\par nEncodeType
\par \tab Set of flags indicating the required encoding type. See }{\b\lang2057\langfe1033\langnp2057 S3TC_Encode}{\lang2057\langfe1033\langnp2057  for further details
\par 
\par }\pard \ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 {\b\fs22\lang2057\langfe1033\langnp2057 Return Values}{\fs22\lang2057\langfe1033\langnp2057 
\par }\pard \ql \li0\ri-1800\widctlpar\faauto\adjustright\rin-1800\lin0\itap0 {\lang2057\langfe1033\langnp2057 The function returns the number of bytes required for the compressed texture.
\par 
\par 
\par }{\b\fs24\lang2057\langfe1033\langnp2057 S3TC_Encode}{\lang2057\langfe1033\langnp2057 
\par 
\par The }{\b\lang2057\langfe1033\langnp2057 S3TC_Encode }{\lang2057\langfe1033\langnp2057 function encodes (compresses) the described texture as a S3TC texture.}{\b\lang2057\langfe1033\langnp2057 
\par 
\par int S3TC_Encode(
\par \tab S3_TEXTURE*}{\lang2057\langfe1033\langnp2057  pSrc,
\par }{\b\lang2057\langfe1033\langnp2057 \tab S3_TEXTURE*}{\lang2057\langfe1033\langnp2057  pDest,
\par \tab }{\b\lang2057\langfe1033\langnp2057 void* }{\lang2057\langfe1033\langnp2057 pDestBuf,}{\b\lang2057\langfe1033\langnp2057 
\par \tab unsigned int}{\lang2057\langfe1033\langnp2057  nEncodeType,
\par \tab }{\b\lang2057\langfe1033\langnp2057 S3TC_PROGRESS_CALLBACK}{\lang2057\langfe1033\langnp2057  pS3TCProgressProc,
\par \tab }{\b\lang2057\langfe1033\langnp2057 void*}{\lang2057\langfe1033\langnp2057  pArg1,
\par \tab }{\b\lang2057\langfe1033\langnp2057 void*}{\lang2057\langfe1033\langnp2057  pArg2
\par }{\b\lang2057\langfe1033\langnp2057 );}{\lang2057\langfe1033\langnp2057 
\par 
\par }{\b\fs22\lang2057\langfe1033\langnp2057 Parameters}{\fs22\lang2057\langfe1033\langnp2057 
\par }{\lang2057\langfe1033\langnp2057 
\par pSrc
\par \tab Pointer to a S3_TEXTURE structure describing the texture to be compressed.
\par 
\par pDest
\par \tab Pointer to a S3_TEXTURE structure that will be filled with the description of the compressed texture. 
\par 
\par pDestBuf
\par \tab Pointer to the destination buffer to store the compressed texture in. This buffer must be allocated with the size returned by }{\b\lang2057\langfe1033\langnp2057 S3TC_GetEncodeSize}{\lang2057\langfe1033\langnp2057 .
\par 
\par nEncodeType
\par \tab Set of flags indicating the required encoding type, comprised of an RGB encoding flag, an \tab alpha encoding flags and optional alpha need encoding flags.
\par 
\par \tab S3TC_ENCODE_RGB_FULL
\par \tab \tab Normal RGB encoding.
\par 
\par \tab S3TC_ENCODE_RGB_COLOR_KEY
\par }\pard \ql \li1440\ri-1800\widctlpar\faauto\adjustright\rin-1800\lin1440\itap0 {\lang2057\langfe1033\langnp2057 With RGB Color Key encoding, each pixel is compared with the upper and lower color key values. If it lies be
tween the two values then the pixel is treated as transparent and encoded as such. When compressing with S3TC_ENCODE_RGB_COLOR_KEY pSrc->ColorKey. nLowBoundary and pSrc->ColorKey. nHighBoundary should be set to the low and high color key values. S3TC_ENCO
DE_RGB_COLOR_KEY should not be used in conjunction with any other alpha encoding option.
\par }\pard \ql \li0\ri-1800\widctlpar\faauto\adjustright\rin-1800\lin0\itap0 {\lang2057\langfe1033\langnp2057 
\par \tab S3TC_ENCODE_RGB_ALPHA_COMPARE
\par }\pard \ql \li1440\ri-1800\widctlpar\faauto\adjustright\rin-1800\lin1440\itap0 {\lang2057\langfe1033\langnp2057 With RGB Alpha Compare encoding the alpha value of each pixel is compared with that alpha reference value. Pixels with an alpha value le
ss than the alpha reference value are treated as transparent and encoded as such. The alpha reference value can be set by calling S3TC_SetAlphaReference with the new alpha reference value. S3TC_ENCODE_RGB_ ALPHA_COMPARE should not be used in conjunction w
ith any other alpha encoding option.
\par 
\par }\pard \ql \li0\ri-1800\widctlpar\faauto\adjustright\rin-1800\lin0\itap0 {\lang2057\langfe1033\langnp2057 \tab S3TC_ENCODE_ALPHA_NONE
\par \tab \tab Do not encode alpha information.
\par 
\par \tab S3TC_ENCODE_ALPHA_EXPLICIT
\par }\pard \ql \li1440\ri-1800\widctlpar\faauto\adjustright\rin-1800\lin1440\itap0 {\lang2057\langfe1033\langnp2057 Encode alpha channel as an explicit 4 bits per pixel. This is equivalent to DirectX DXT3 compression. S3TC_ENCODE_ ALPHA_EXPLICIT s
hould not be used in conjunction with any other alpha encoding option.
\par }\pard \ql \li0\ri-1800\widctlpar\faauto\adjustright\rin-1800\lin0\itap0 {\lang2057\langfe1033\langnp2057 
\par \tab S3TC_ENCODE_ALPHA_INTERPOLATED
\par }\pard \ql \li1440\ri-1800\widctlpar\faauto\adjustright\rin-1800\lin1440\itap0 {\lang2057\langfe1033\langnp2057 
Encode alpha channel as an interpolated  6 to 8 bits per pixel. This is equivalent to DirectX  DXT5 compression. S3TC_ENCODE_ ALPHA_INTERPOLATED should not be used in conjunction with any other alpha encoding option.
\par }\pard \ql \li0\ri-1800\widctlpar\faauto\adjustright\rin-1800\lin0\itap0 {\lang2057\langfe1033\langnp2057 pS3TCProgressProc
\par \tab Pointer to a progess callback function (see }{\b\lang2057\langfe1033\langnp2057 S3TCProgressProc}{\lang2057\langfe1033\langnp2057 ). May be NULL.
\par 
\par pArg1
\par \tab Application defined parameter passed to progress callback function.
\par 
\par pArg2
\par \tab Application defined parameter passed to progress callback function.
\par }\pard \ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 {\b\fs22\lang2057\langfe1033\langnp2057 
\par Return Values}{\fs22\lang2057\langfe1033\langnp2057 
\par }\pard \ql \li0\ri-1800\widctlpar\faauto\adjustright\rin-1800\lin0\itap0 {\lang2057\langfe1033\langnp2057 None-zero if the encoding is cancelled, otherwise zero.
\par 
\par 
\par }{\b\fs24\lang2057\langfe1033\langnp2057 S3TCProgressProc}{\lang2057\langfe1033\langnp2057 
\par 
\par }\pard \ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 {\lang2057\langfe1033\langnp2057 The }{\b\lang2057\langfe1033\langnp2057 S3TCProgressProc }{\lang2057\langfe1033\langnp2057 is an application-defined callback function for the }{
\b\lang2057\langfe1033\langnp2057 S3TC_Encode }{\lang2057\langfe1033\langnp2057 function.
\par }\pard \ql \li0\ri-1800\widctlpar\faauto\adjustright\rin-1800\lin0\itap0 {\b\lang2057\langfe1033\langnp2057 int S3TCProgressCallback(
\par \tab float}{\lang2057\langfe1033\langnp2057  fProgress,}{\b\lang2057\langfe1033\langnp2057 
\par \tab void*}{\lang2057\langfe1033\langnp2057  pUser1,
\par }{\b\lang2057\langfe1033\langnp2057 \tab void*}{\lang2057\langfe1033\langnp2057  pUser2
\par }{\b\lang2057\langfe1033\langnp2057 );}{\lang2057\langfe1033\langnp2057 
\par 
\par }{\b\fs22\lang2057\langfe1033\langnp2057 Parameters}{\fs22\lang2057\langfe1033\langnp2057 
\par }{\lang2057\langfe1033\langnp2057 
\par fProgress
\par \tab Percentage completed of encoding.
\par 
\par pUser1
\par \tab Application defined parameter passed to }{\b\lang2057\langfe1033\langnp2057 S3TC_Encode }{\lang2057\langfe1033\langnp2057 function.
\par 
\par pUser2
\par \tab Application defined parameter passed to }{\b\lang2057\langfe1033\langnp2057 S3TC_Encode }{\lang2057\langfe1033\langnp2057 function.
\par 
\par }\pard \ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 {\b\fs22\lang2057\langfe1033\langnp2057 Return Values}{\fs22\lang2057\langfe1033\langnp2057 
\par }\pard \ql \li0\ri-1800\widctlpar\faauto\adjustright\rin-1800\lin0\itap0 {\lang2057\langfe1033\langnp2057 The functions should return non-zero to abort encoding otherwise it should return zero.
\par 
\par 
\par }{\b\fs24\lang2057\langfe1033\langnp2057 S3TC_SetAlphaReference}{\lang2057\langfe1033\langnp2057 
\par 
\par }\pard \ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 {\lang2057\langfe1033\langnp2057 The }{\b\lang2057\langfe1033\langnp2057 S3TC_SetAlphaReference }{\lang2057\langfe1033\langnp2057 
for sets the alpha reference value for alpha compare encoding.
\par }\pard \ql \li0\ri-1800\widctlpar\faauto\adjustright\rin-1800\lin0\itap0 {\b\lang2057\langfe1033\langnp2057 void S3TC_SetAlphaReference (
\par \tab int}{\lang2057\langfe1033\langnp2057  nRef
\par }{\b\lang2057\langfe1033\langnp2057 );}{\lang2057\langfe1033\langnp2057 
\par 
\par }{\b\fs22\lang2057\langfe1033\langnp2057 Parameters}{\fs22\lang2057\langfe1033\langnp2057 
\par }{\lang2057\langfe1033\langnp2057 
\par nRef
\par \tab The new alpha reference value.
\par 
\par }\pard \ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 {\b\fs22\lang2057\langfe1033\langnp2057 Return Values}{\fs22\lang2057\langfe1033\langnp2057 
\par }\pard \ql \li0\ri-1800\widctlpar\faauto\adjustright\rin-1800\lin0\itap0 {\lang2057\langfe1033\langnp2057 None.
\par 
\par 
\par }{\b\fs24\lang2057\langfe1033\langnp2057 S3TC_SetColorWeighting}{\lang2057\langfe1033\langnp2057 
\par 
\par }\pard \ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 {\lang2057\langfe1033\langnp2057 The }{\b\lang2057\langfe1033\langnp2057 S3TC_SetColorWeighting }{\lang2057\langfe1033\langnp2057 
for sets the alpha reference value for alpha compare encoding. By default the weightings are set to 0.3086, 0.6094, 0.0820.
\par }\pard \ql \li0\ri-1800\widctlpar\faauto\adjustright\rin-1800\lin0\itap0 {\b\lang2057\langfe1033\langnp2057 void S3TC_SetColorWeighting (
\par \tab float}{\lang2057\langfe1033\langnp2057  fRed,
\par }{\b\lang2057\langfe1033\langnp2057 \tab float}{\lang2057\langfe1033\langnp2057  fBlue,
\par }{\b\lang2057\langfe1033\langnp2057 \tab float}{\lang2057\langfe1033\langnp2057  fGreen
\par }{\b\lang2057\langfe1033\langnp2057 );}{\lang2057\langfe1033\langnp2057 
\par 
\par }{\b\fs22\lang2057\langfe1033\langnp2057 Parameters}{\fs22\lang2057\langfe1033\langnp2057 
\par }{\lang2057\langfe1033\langnp2057 
\par fRed
\par \tab The weighting value for the Red channel.
\par 
\par fGreen
\par \tab The weighting value for the Green channel.
\par 
\par fBlue
\par \tab The weighting value for the Blue channel.
\par 
\par }\pard \ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 {\b\fs22\lang2057\langfe1033\langnp2057 Return Values}{\fs22\lang2057\langfe1033\langnp2057 
\par }\pard \ql \li0\ri-1800\widctlpar\faauto\adjustright\rin-1800\lin0\itap0 {\lang2057\langfe1033\langnp2057 None.
\par 
\par 
\par }{\b\fs24\lang2057\langfe1033\langnp2057 S3TC_GetDecodeSize}{\lang2057\langfe1033\langnp2057 
\par 
\par The }{\b\lang2057\langfe1033\langnp2057 S3TC_GetDecodeSize}{\lang2057\langfe1033\langnp2057  function calculates the memory required for an uncompressed texture.}{\b\lang2057\langfe1033\langnp2057 
\par 
\par unsigned int S3TC_GetDecodeSize(
\par \tab unsigned long }{\lang2057\langfe1033\langnp2057 lWidth ,}{\b\lang2057\langfe1033\langnp2057 
\par \tab unsigned long }{\lang2057\langfe1033\langnp2057 lHeight }{\b\lang2057\langfe1033\langnp2057 
\par );}{\lang2057\langfe1033\langnp2057 
\par 
\par }{\b\fs22\lang2057\langfe1033\langnp2057 Parameters}{\fs22\lang2057\langfe1033\langnp2057 
\par }{\lang2057\langfe1033\langnp2057 
\par lWidth
\par \tab Width of the texture to be decompressed.
\par 
\par lHeight
\par \tab Height of the texture to be decompressed.
\par 
\par }\pard \ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 {\b\fs22\lang2057\langfe1033\langnp2057 Return Values}{\fs22\lang2057\langfe1033\langnp2057 
\par }\pard \ql \li0\ri-1800\widctlpar\faauto\adjustright\rin-1800\lin0\itap0 {\lang2057\langfe1033\langnp2057 The function returns the number of bytes required for the decompressed texture.
\par 
\par 
\par }{\b\fs24\lang2057\langfe1033\langnp2057 S3TC_Decode}{\lang2057\langfe1033\langnp2057 
\par 
\par The }{\b\lang2057\langfe1033\langnp2057 S3TC_Decode }{\lang2057\langfe1033\langnp2057 function decodes (decompresses) the described S3TC texture.}{\b\lang2057\langfe1033\langnp2057 
\par 
\par void S3TC_Decode(
\par \tab S3_TEXTURE *}{\lang2057\langfe1033\langnp2057  pSrc,
\par \tab }{\b\lang2057\langfe1033\langnp2057 S3_TEXTURE *}{\lang2057\langfe1033\langnp2057  pDest,
\par \tab }{\b\lang2057\langfe1033\langnp2057 void* }{\lang2057\langfe1033\langnp2057 pDestBuf,}{\b\lang2057\langfe1033\langnp2057 
\par );}{\lang2057\langfe1033\langnp2057 
\par 
\par }{\b\fs22\lang2057\langfe1033\langnp2057 Parameters}{\fs22\lang2057\langfe1033\langnp2057 
\par }{\lang2057\langfe1033\langnp2057 
\par pSrc
\par \tab Pointer to a S3_TEXTURE structure describing the S3TC texture to be decompressed.
\par 
\par pDest
\par \tab Pointer to a S3_TEXTURE structure that will be filled with the description of the decompressed texture. 
\par 
\par pDestBuf
\par \tab Pointer to the destination buffer to store the decompressed texture in. This buffer must be allocated with the size returned by }{\b\lang2057\langfe1033\langnp2057 S3TC_GetDecodeSize}{\lang2057\langfe1033\langnp2057 .
\par 
\par }\pard \ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 {\b\fs22\lang2057\langfe1033\langnp2057 Return Values}{\fs22\lang2057\langfe1033\langnp2057 
\par }\pard \ql \li0\ri-1800\widctlpar\faauto\adjustright\rin-1800\lin0\itap0 {\lang2057\langfe1033\langnp2057 None.
\par 
\par 
\par }{\fs28\lang2057\langfe1033\langnp2057 Example Code}{\lang2057\langfe1033\langnp2057 
\par }{\fs28\lang2057\langfe1033\langnp2057 
\par }{\b\fs24\lang2057\langfe1033\langnp2057 Compression}{\fs28\lang2057\langfe1033\langnp2057 
\par }{\lang2057\langfe1033\langnp2057 
\par void CompressARGB8888Texture(unsigned long lWidth, unsigned long lHeight, void* pTexture)
\par \{
\par \tab S3_TEXTURE textureIn;
\par \tab S3_TEXTURE textureOut;
\par \tab unsigned int nEncodeType = S3TC_ENCODE_RGB_FULL |\tab S3TC_ENCODE_ALPHA_INTERPOLATED;\tab 
\par \tab void* pCompressedTexture;
\par 
\par // Setup textureIn
\par \tab memset(&textureIn, 0, sizeof(S3_TEXTURE));
\par \tab textureIn.lWidth = lWidth;
\par \tab textureIn.lHeight = lHeight;
\par \tab textureIn.lPitch = lWidth * sizeof(COLOR);
\par \tab textureIn.pSurface = pTexture;
\par \tab textureIn.PixelFormat.nFlags = DDPF_RGB | DDPF_ALPHAPIXELS;
\par \tab textureIn.PixelFormat.nARGBBitCount = 32;
\par \tab textureIn.PixelFormat.nRedMask = 0xff0000;
\par \tab textureIn.PixelFormat.nGreenMask = 0x00ff00;
\par \tab textureIn.PixelFormat.nBlueMask = 0x0000ff;
\par \tab textureIn.PixelFormat.nAlphaMask = 0xff000000;
\par 
\par // Allocate memory for compressed texture
\par \tab pCompressedTexture = malloc(S3TC_GetEncodeSize(lWidth, lHeight, nEncodeType));
\par 
\par // Encode the texture
\par \tab S3TC_Encode(&textureIn, &textureOut, pCompressedTexture, nEncodeType, NULL, 0, 0);
\par \}
\par }{\fs28\lang2057\langfe1033\langnp2057 
\par 
\par }{\b\fs24\lang2057\langfe1033\langnp2057 Decompression}{\fs28\lang2057\langfe1033\langnp2057 
\par }{\lang2057\langfe1033\langnp2057 
\par void DecompressDXT3Texture(int nWidth, int nHeight, void* pTexture)
\par \{
\par \tab S3_TEXTURE textureIn;
\par \tab S3_TEXTURE textureOut;
\par \tab void* pDecompressedTexture;
\par 
\par // Setup descIn
\par \tab memset(&textureIn, 0, sizeof(S3_TEXTURE));
\par \tab textureIn.lWidth = lWidth;
\par \tab textureIn.lHeight = lHeight;
\par \tab textureIn.pSurface = pTexture;
\par \tab textureIn.PixelFormat.dwFlags = DDPF_COMPRESSED;
\par \tab textureIn.PixelFormat.dwRGBBitCount = S3TC_ENCODE_ALPHA_EXPLICIT;
\par \tab 
\par // Allocate memory for compressed texture
\par \tab pDecompressedTexture = malloc(S3TC_GetDecodeSize(lWidth, lHeight));
\par 
\par // Decode the texture
\par \tab S3TC_Decode(&textureIn,  &textureOut, pDecompressedTexture );
\par \}
\par }{\fs28\lang2057\langfe1033\langnp2057 
\par 
\par }{\b\fs24\lang2057\langfe1033\langnp2057 Using a Progress Callback}{\fs28\lang2057\langfe1033\langnp2057 
\par 
\par }{\lang2057\langfe1033\langnp2057 int S3TCProgressCallback(float fProgress, void* lpUser1, void* lpUser2)
\par \{
\par \tab char szText[80];
\par \tab sprintf(szText, "Compressing %s - %.1f complete.", (char*) lpUser1, fProgress);
\par \tab SetWindowText((HWND) lpUser2, szText);
\par \tab return 0;
\par \}
\par 
\par void CompressARGB8888Texture(unsigned long nWidth, int nHeight, void* pTexture, char* pszName, HWND hProgressWnd)
\par \{
\par \tab S3_TEXTURE textureIn;
\par \tab S3_TEXTURE textureOut;
\par \tab unsigned int nEncodeType = S3TC_ENCODE_RGB_FULL |\tab S3TC_ENCODE_ALPHA_INTERPOLATED;\tab 
\par \tab void* pCompressedTexture;
\par 
\par // Setup textureIn
\par \tab memset(&textureIn, 0, sizeof(S3_TEXTURE));
\par \tab textureIn.lWidth = lWidth;
\par \tab textureIn.lHeight = lHeight;
\par \tab textureIn.lPitch = lWidth * sizeof(COLOR);
\par \tab textureIn.pSurface = pTexture;
\par \tab textureIn.PixelFormat.nFlags = DDPF_RGB | DDPF_ALPHAPIXELS;
\par \tab textureIn.PixelFormat.nARGBBitCount = 32;
\par \tab textureIn.PixelFormat.nRedMask = 0xff0000;
\par \tab textureIn.PixelFormat.nGreenMask = 0x00ff00;
\par \tab textureIn.PixelFormat.nBlueMask = 0x0000ff;
\par \tab textureIn.PixelFormat.nAlphaMask = 0xff000000;
\par 
\par // Allocate memory for compressed texture
\par \tab pCompressedTexture = malloc(S3TC_GetEncodeSize(lWidth, lHeight, nEncodeType));
\par 
\par // Encode the texture
\par \tab S3TC_Encode(&textureIn, &textureOut, pCompressedTexture, nEncodeType, S3TCProgressCallback, pszName, hProgressWnd);
\par \}}{\fs28\lang2057\langfe1033\langnp2057 
\par }}