
// Generated by Schema+ V1.0 (C) Radical Games

#ifndef __7777
#define __7777

#include <ods/ods.hpp>

namespace ods {

//
// class types
//
struct _root; typedef pointer_templ<_root> root;
struct _framework; typedef pointer_templ<_framework> framework;
struct _source_control_plugin; typedef pointer_templ<_source_control_plugin> source_control_plugin;
struct _buildman; typedef pointer_templ<_buildman> buildman;
struct _fileman; typedef pointer_templ<_fileman> fileman;
struct _windowman; typedef pointer_templ<_windowman> windowman;
struct _menuman; typedef pointer_templ<_menuman> menuman;
struct _editorman; typedef pointer_templ<_editorman> editorman;
struct _performanceman; typedef pointer_templ<_performanceman> performanceman;
struct _main_canvas; typedef pointer_templ<_main_canvas> main_canvas;
struct _scman; typedef pointer_templ<_scman> scman;
struct _directory; typedef pointer_templ<_directory> directory;
struct _window; typedef pointer_templ<_window> window;
struct _command; typedef pointer_templ<_command> command;
struct _plugin_msg; typedef pointer_templ<_plugin_msg> plugin_msg;
struct _rectangle; typedef pointer_templ<_rectangle> rectangle;
struct _editor; typedef pointer_templ<_editor> editor;
struct _performance; typedef pointer_templ<_performance> performance;

//
// ref types
//

//
// array types
//
struct _window_array; typedef pointer_templ<_window_array> window_array;
struct _command_array; typedef pointer_templ<_command_array> command_array;
struct _directory_array; typedef pointer_templ<_directory_array> directory_array;
struct _string_array; typedef pointer_templ<_string_array> string_array;
struct _editor_array; typedef pointer_templ<_editor_array> editor_array;
struct _performance_array; typedef pointer_templ<_performance_array> performance_array;

//
// class attribute accessor functions
//

// cls type root

inline root root_new( block * p_memory );
inline void root_construct( const root & ptr );
inline void root_destroy( const root & ptr );
inline void root_delete( const root & ptr );
inline const framework root_framework( const root & );
inline void root_framework( const root &, const framework );
inline const source_control_plugin root_scman( const root & );
inline void root_scman( const root &, const source_control_plugin );
inline const buildman root_buildman( const root & );
inline void root_buildman( const root &, const buildman );
inline const fileman root_fileman( const root & );
inline void root_fileman( const root &, const fileman );
inline const windowman root_windowman( const root & );
inline void root_windowman( const root &, const windowman );
inline const menuman root_menuman( const root & );
inline void root_menuman( const root &, const menuman );
inline const editorman root_editorman( const root & );
inline void root_editorman( const root &, const editorman );
inline const performanceman root_performanceman( const root & );
inline void root_performanceman( const root &, const performanceman );

// cls type framework

inline framework framework_new( block * p_memory );
inline void framework_construct( const framework & ptr );
inline void framework_destroy( const framework & ptr );
inline void framework_delete( const framework & ptr );
inline const main_canvas framework_main_canvas( const framework & );
inline void framework_main_canvas( const framework &, const main_canvas );

// cls type source_control_plugin

inline source_control_plugin source_control_plugin_new( block * p_memory );
inline void source_control_plugin_construct( const source_control_plugin & ptr );
inline void source_control_plugin_destroy( const source_control_plugin & ptr );
inline void source_control_plugin_delete( const source_control_plugin & ptr );

// cls type buildman

inline buildman buildman_new( block * p_memory );
inline void buildman_construct( const buildman & ptr );
inline void buildman_destroy( const buildman & ptr );
inline void buildman_delete( const buildman & ptr );
inline void buildman_test_target_root_path( const buildman & , char * p_string, unsigned int len);
inline void buildman_test_target_root_path( const buildman &, const char * );
inline void buildman_sound_data_root_path( const buildman & , char * p_string, unsigned int len);
inline void buildman_sound_data_root_path( const buildman &, const char * );

// cls type fileman

inline fileman fileman_new( block * p_memory );
inline void fileman_construct( const fileman & ptr );
inline void fileman_destroy( const fileman & ptr );
inline void fileman_delete( const fileman & ptr );
inline const directory fileman_root( const fileman & );
inline void fileman_root( const fileman &, const directory );

// cls type windowman

inline windowman windowman_new( block * p_memory );
inline void windowman_construct( const windowman & ptr );
inline void windowman_destroy( const windowman & ptr );
inline void windowman_delete( const windowman & ptr );
inline const window_array windowman_windows( const windowman & );
inline void windowman_windows( const windowman &, const window_array );

// cls type menuman

inline menuman menuman_new( block * p_memory );
inline void menuman_construct( const menuman & ptr );
inline void menuman_destroy( const menuman & ptr );
inline void menuman_delete( const menuman & ptr );
inline const command_array menuman_commands( const menuman & );
inline void menuman_commands( const menuman &, const command_array );

// cls type editorman

inline editorman editorman_new( block * p_memory );
inline void editorman_construct( const editorman & ptr );
inline void editorman_destroy( const editorman & ptr );
inline void editorman_delete( const editorman & ptr );
inline const editor_array editorman_editors( const editorman & );
inline void editorman_editors( const editorman &, const editor_array );

// cls type performanceman

inline performanceman performanceman_new( block * p_memory );
inline void performanceman_construct( const performanceman & ptr );
inline void performanceman_destroy( const performanceman & ptr );
inline void performanceman_delete( const performanceman & ptr );
inline const performance_array performanceman_performances( const performanceman & );
inline void performanceman_performances( const performanceman &, const performance_array );

// cls type main_canvas

inline main_canvas main_canvas_new( block * p_memory );
inline void main_canvas_construct( const main_canvas & ptr );
inline void main_canvas_destroy( const main_canvas & ptr );
inline void main_canvas_delete( const main_canvas & ptr );
inline uint32 main_canvas_scroll_x( const main_canvas & );
inline void main_canvas_scroll_x( const main_canvas &, uint32 );
inline uint32 main_canvas_scroll_y( const main_canvas & );
inline void main_canvas_scroll_y( const main_canvas &, uint32 );

// cls type scman

inline scman scman_new( block * p_memory );
inline void scman_construct( const scman & ptr );
inline void scman_destroy( const scman & ptr );
inline void scman_delete( const scman & ptr );
inline void scman_perforce_port( const scman & , char * p_string, unsigned int len);
inline void scman_perforce_port( const scman &, const char * );
inline void scman_perforce_client( const scman & , char * p_string, unsigned int len);
inline void scman_perforce_client( const scman &, const char * );
inline void scman_perforce_user( const scman & , char * p_string, unsigned int len);
inline void scman_perforce_user( const scman &, const char * );
inline bool scman_work_offline( const scman & );
inline void scman_work_offline( const scman &, bool );

// cls type directory

inline directory directory_new( block * p_memory );
inline void directory_construct( const directory & ptr );
inline void directory_destroy( const directory & ptr );
inline void directory_delete( const directory & ptr );
inline void directory_name( const directory & , char * p_string, unsigned int len);
inline void directory_name( const directory &, const char * );
inline const directory_array directory_directories( const directory & );
inline void directory_directories( const directory &, const directory_array );
inline const string_array directory_files( const directory & );
inline void directory_files( const directory &, const string_array );

// cls type window

inline window window_new( block * p_memory );
inline void window_construct( const window & ptr );
inline void window_destroy( const window & ptr );
inline void window_delete( const window & ptr );
inline void window_instance_name( const window & , char * p_string, unsigned int len);
inline void window_instance_name( const window &, const char * );
inline void window_plugin_name( const window & , char * p_string, unsigned int len);
inline void window_plugin_name( const window &, const char * );
inline const rectangle window_position( const window & );
inline void window_position( const window &, const rectangle );
inline void window_window_title( const window & , char * p_string, unsigned int len);
inline void window_window_title( const window &, const char * );
inline bool window_closeable( const window & );
inline void window_closeable( const window &, bool );

// cls type command

inline command command_new( block * p_memory );
inline void command_construct( const command & ptr );
inline void command_destroy( const command & ptr );
inline void command_delete( const command & ptr );
inline void command_name( const command & , char * p_string, unsigned int len);
inline void command_name( const command &, const char * );
inline const plugin_msg command_plugin_msg( const command & );
inline void command_plugin_msg( const command &, const plugin_msg );

// cls type plugin_msg

inline plugin_msg plugin_msg_new( block * p_memory );
inline void plugin_msg_construct( const plugin_msg & ptr );
inline void plugin_msg_destroy( const plugin_msg & ptr );
inline void plugin_msg_delete( const plugin_msg & ptr );
inline uint32 plugin_msg_id( const plugin_msg & );
inline void plugin_msg_id( const plugin_msg &, uint32 );
inline void plugin_msg_target( const plugin_msg & , char * p_string, unsigned int len);
inline void plugin_msg_target( const plugin_msg &, const char * );

// cls type rectangle

inline rectangle rectangle_new( block * p_memory );
inline void rectangle_construct( const rectangle & ptr );
inline void rectangle_destroy( const rectangle & ptr );
inline void rectangle_delete( const rectangle & ptr );
inline uint32 rectangle_left( const rectangle & );
inline void rectangle_left( const rectangle &, uint32 );
inline uint32 rectangle_top( const rectangle & );
inline void rectangle_top( const rectangle &, uint32 );
inline uint32 rectangle_right( const rectangle & );
inline void rectangle_right( const rectangle &, uint32 );
inline uint32 rectangle_bottom( const rectangle & );
inline void rectangle_bottom( const rectangle &, uint32 );

// cls type editor

inline editor editor_new( block * p_memory );
inline void editor_construct( const editor & ptr );
inline void editor_destroy( const editor & ptr );
inline void editor_delete( const editor & ptr );
inline void editor_file_name( const editor & , char * p_string, unsigned int len);
inline void editor_file_name( const editor &, const char * );

// cls type performance

inline performance performance_new( block * p_memory );
inline void performance_construct( const performance & ptr );
inline void performance_destroy( const performance & ptr );
inline void performance_delete( const performance & ptr );
inline void performance_file_name( const performance & , char * p_string, unsigned int len);
inline void performance_file_name( const performance &, const char * );

//
// type safe dereferencing functions
//

//
// array manipulation functions
//
inline window_array window_array_new( block * );
inline window_array window_array_delete( const window_array & );
inline void window_array_construct( const window_array & );
inline void window_array_destroy( const window_array & );
inline unsigned int window_array_num_items( const window_array &);
inline void window_array_remove_item( const window_array &, unsigned int item);
inline const window window_array_item_at( const window_array & ptr, unsigned int index );
inline const window window_array_add_item( const window_array &);

inline command_array command_array_new( block * );
inline command_array command_array_delete( const command_array & );
inline void command_array_construct( const command_array & );
inline void command_array_destroy( const command_array & );
inline unsigned int command_array_num_items( const command_array &);
inline void command_array_remove_item( const command_array &, unsigned int item);
inline const command command_array_item_at( const command_array & ptr, unsigned int index );
inline const command command_array_add_item( const command_array &);

inline directory_array directory_array_new( block * );
inline directory_array directory_array_delete( const directory_array & );
inline void directory_array_construct( const directory_array & );
inline void directory_array_destroy( const directory_array & );
inline unsigned int directory_array_num_items( const directory_array &);
inline void directory_array_remove_item( const directory_array &, unsigned int item);
inline const directory directory_array_item_at( const directory_array & ptr, unsigned int index );
inline const directory directory_array_add_item( const directory_array &);

inline string_array string_array_new( block * );
inline string_array string_array_delete( const string_array & );
inline void string_array_construct( const string_array & );
inline void string_array_destroy( const string_array & );
inline unsigned int string_array_num_items( const string_array &);
inline void string_array_remove_item( const string_array &, unsigned int item);
inline void string_array_item_at( const string_array & ptr, unsigned int index, char * p_string, unsigned int len );
inline void string_array_item_at( const string_array & ptr, unsigned int index, const char * p_new_val );
inline void string_array_add_item( const string_array &, const char * p_string );

inline editor_array editor_array_new( block * );
inline editor_array editor_array_delete( const editor_array & );
inline void editor_array_construct( const editor_array & );
inline void editor_array_destroy( const editor_array & );
inline unsigned int editor_array_num_items( const editor_array &);
inline void editor_array_remove_item( const editor_array &, unsigned int item);
inline const editor editor_array_item_at( const editor_array & ptr, unsigned int index );
inline const editor editor_array_add_item( const editor_array &);

inline performance_array performance_array_new( block * );
inline performance_array performance_array_delete( const performance_array & );
inline void performance_array_construct( const performance_array & );
inline void performance_array_destroy( const performance_array & );
inline unsigned int performance_array_num_items( const performance_array &);
inline void performance_array_remove_item( const performance_array &, unsigned int item);
inline const performance performance_array_item_at( const performance_array & ptr, unsigned int index );
inline const performance performance_array_add_item( const performance_array &);


//
// class attribute accessor definitions
//

// cls type root

inline root root_new( block * p_memory )
{
    root ptr = (root) block_alloc( p_memory, 352, "root" ) ;
    root_construct( ptr );
    return ptr;
}
inline void root_construct( const root & ptr )
{
    framework_construct( pointer_templ< _framework>( ptr.memory( ), ptr.offset( ) + 0 ) );
    source_control_plugin_construct( pointer_templ< _source_control_plugin>( ptr.memory( ), ptr.offset( ) + 64 ) );
    buildman_construct( pointer_templ< _buildman>( ptr.memory( ), ptr.offset( ) + 64 ) );
    fileman_construct( pointer_templ< _fileman>( ptr.memory( ), ptr.offset( ) + 128 ) );
    windowman_construct( pointer_templ< _windowman>( ptr.memory( ), ptr.offset( ) + 224 ) );
    menuman_construct( pointer_templ< _menuman>( ptr.memory( ), ptr.offset( ) + 256 ) );
    editorman_construct( pointer_templ< _editorman>( ptr.memory( ), ptr.offset( ) + 288 ) );
    performanceman_construct( pointer_templ< _performanceman>( ptr.memory( ), ptr.offset( ) + 320 ) );
}
inline void root_destroy( const root & ptr )
{
    framework_destroy( pointer_templ< _framework>( ptr.memory( ), ptr.offset( ) + 0 ) );
    source_control_plugin_destroy( pointer_templ< _source_control_plugin>( ptr.memory( ), ptr.offset( ) + 64 ) );
    buildman_destroy( pointer_templ< _buildman>( ptr.memory( ), ptr.offset( ) + 64 ) );
    fileman_destroy( pointer_templ< _fileman>( ptr.memory( ), ptr.offset( ) + 128 ) );
    windowman_destroy( pointer_templ< _windowman>( ptr.memory( ), ptr.offset( ) + 224 ) );
    menuman_destroy( pointer_templ< _menuman>( ptr.memory( ), ptr.offset( ) + 256 ) );
    editorman_destroy( pointer_templ< _editorman>( ptr.memory( ), ptr.offset( ) + 288 ) );
    performanceman_destroy( pointer_templ< _performanceman>( ptr.memory( ), ptr.offset( ) + 320 ) );
}
inline void root_delete( const root & ptr )
{
    root_destroy( ptr );
    block_free( ptr, 352 );
}
inline const framework root_framework( const root & ptr)
{
    return pointer_templ< _framework>( ptr.memory( ), ptr.offset( ) + 0 );
}
inline const source_control_plugin root_scman( const root & ptr)
{
    return pointer_templ< _source_control_plugin>( ptr.memory( ), ptr.offset( ) + 64 );
}
inline const buildman root_buildman( const root & ptr)
{
    return pointer_templ< _buildman>( ptr.memory( ), ptr.offset( ) + 64 );
}
inline const fileman root_fileman( const root & ptr)
{
    return pointer_templ< _fileman>( ptr.memory( ), ptr.offset( ) + 128 );
}
inline const windowman root_windowman( const root & ptr)
{
    return pointer_templ< _windowman>( ptr.memory( ), ptr.offset( ) + 224 );
}
inline const menuman root_menuman( const root & ptr)
{
    return pointer_templ< _menuman>( ptr.memory( ), ptr.offset( ) + 256 );
}
inline const editorman root_editorman( const root & ptr)
{
    return pointer_templ< _editorman>( ptr.memory( ), ptr.offset( ) + 288 );
}
inline const performanceman root_performanceman( const root & ptr)
{
    return pointer_templ< _performanceman>( ptr.memory( ), ptr.offset( ) + 320 );
}

// cls type framework

inline framework framework_new( block * p_memory )
{
    framework ptr = (framework) block_alloc( p_memory, 64, "framework" ) ;
    framework_construct( ptr );
    return ptr;
}
inline void framework_construct( const framework & ptr )
{
    main_canvas_construct( pointer_templ< _main_canvas>( ptr.memory( ), ptr.offset( ) + 0 ) );
}
inline void framework_destroy( const framework & ptr )
{
    main_canvas_destroy( pointer_templ< _main_canvas>( ptr.memory( ), ptr.offset( ) + 0 ) );
}
inline void framework_delete( const framework & ptr )
{
    framework_destroy( ptr );
    block_free( ptr, 64 );
}
inline const main_canvas framework_main_canvas( const framework & ptr)
{
    return pointer_templ< _main_canvas>( ptr.memory( ), ptr.offset( ) + 0 );
}

// cls type source_control_plugin

inline source_control_plugin source_control_plugin_new( block * p_memory )
{
    source_control_plugin ptr = (source_control_plugin) block_alloc( p_memory, 0, "source_control_plugin" ) ;
    source_control_plugin_construct( ptr );
    return ptr;
}
inline void source_control_plugin_construct( const source_control_plugin & ptr )
{
}
inline void source_control_plugin_destroy( const source_control_plugin & ptr )
{
}
inline void source_control_plugin_delete( const source_control_plugin & ptr )
{
    source_control_plugin_destroy( ptr );
    block_free( ptr, 0 );
}

// cls type buildman

inline buildman buildman_new( block * p_memory )
{
    buildman ptr = (buildman) block_alloc( p_memory, 64, "buildman" ) ;
    buildman_construct( ptr );
    return ptr;
}
inline void buildman_construct( const buildman & ptr )
{
    string_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    string_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void buildman_destroy( const buildman & ptr )
{
    string_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    string_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void buildman_delete( const buildman & ptr )
{
    buildman_destroy( ptr );
    block_free( ptr, 64 );
}
inline void buildman_test_target_root_path( const buildman & ptr, char * p_string, unsigned int len)
{
    string_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 0 ), p_string, len );
}
inline void buildman_test_target_root_path( const buildman & ptr, const char * p_string )
{
    string_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 0 ), p_string );
}
inline void buildman_sound_data_root_path( const buildman & ptr, char * p_string, unsigned int len)
{
    string_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 32 ), p_string, len );
}
inline void buildman_sound_data_root_path( const buildman & ptr, const char * p_string )
{
    string_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 32 ), p_string );
}

// cls type fileman

inline fileman fileman_new( block * p_memory )
{
    fileman ptr = (fileman) block_alloc( p_memory, 96, "fileman" ) ;
    fileman_construct( ptr );
    return ptr;
}
inline void fileman_construct( const fileman & ptr )
{
    directory_construct( pointer_templ< _directory>( ptr.memory( ), ptr.offset( ) + 0 ) );
}
inline void fileman_destroy( const fileman & ptr )
{
    directory_destroy( pointer_templ< _directory>( ptr.memory( ), ptr.offset( ) + 0 ) );
}
inline void fileman_delete( const fileman & ptr )
{
    fileman_destroy( ptr );
    block_free( ptr, 96 );
}
inline const directory fileman_root( const fileman & ptr)
{
    return pointer_templ< _directory>( ptr.memory( ), ptr.offset( ) + 0 );
}

// cls type windowman

inline windowman windowman_new( block * p_memory )
{
    windowman ptr = (windowman) block_alloc( p_memory, 32, "windowman" ) ;
    windowman_construct( ptr );
    return ptr;
}
inline void windowman_construct( const windowman & ptr )
{
    window_array_construct( pointer_templ< _window_array>( ptr.memory( ), ptr.offset( ) + 0 ) );
}
inline void windowman_destroy( const windowman & ptr )
{
    window_array_destroy( pointer_templ< _window_array>( ptr.memory( ), ptr.offset( ) + 0 ) );
}
inline void windowman_delete( const windowman & ptr )
{
    windowman_destroy( ptr );
    block_free( ptr, 32 );
}
inline const window_array windowman_windows( const windowman & ptr)
{
    return pointer_templ< _window_array>( ptr.memory( ), ptr.offset( ) + 0 );
}

// cls type menuman

inline menuman menuman_new( block * p_memory )
{
    menuman ptr = (menuman) block_alloc( p_memory, 32, "menuman" ) ;
    menuman_construct( ptr );
    return ptr;
}
inline void menuman_construct( const menuman & ptr )
{
    command_array_construct( pointer_templ< _command_array>( ptr.memory( ), ptr.offset( ) + 0 ) );
}
inline void menuman_destroy( const menuman & ptr )
{
    command_array_destroy( pointer_templ< _command_array>( ptr.memory( ), ptr.offset( ) + 0 ) );
}
inline void menuman_delete( const menuman & ptr )
{
    menuman_destroy( ptr );
    block_free( ptr, 32 );
}
inline const command_array menuman_commands( const menuman & ptr)
{
    return pointer_templ< _command_array>( ptr.memory( ), ptr.offset( ) + 0 );
}

// cls type editorman

inline editorman editorman_new( block * p_memory )
{
    editorman ptr = (editorman) block_alloc( p_memory, 32, "editorman" ) ;
    editorman_construct( ptr );
    return ptr;
}
inline void editorman_construct( const editorman & ptr )
{
    editor_array_construct( pointer_templ< _editor_array>( ptr.memory( ), ptr.offset( ) + 0 ) );
}
inline void editorman_destroy( const editorman & ptr )
{
    editor_array_destroy( pointer_templ< _editor_array>( ptr.memory( ), ptr.offset( ) + 0 ) );
}
inline void editorman_delete( const editorman & ptr )
{
    editorman_destroy( ptr );
    block_free( ptr, 32 );
}
inline const editor_array editorman_editors( const editorman & ptr)
{
    return pointer_templ< _editor_array>( ptr.memory( ), ptr.offset( ) + 0 );
}

// cls type performanceman

inline performanceman performanceman_new( block * p_memory )
{
    performanceman ptr = (performanceman) block_alloc( p_memory, 32, "performanceman" ) ;
    performanceman_construct( ptr );
    return ptr;
}
inline void performanceman_construct( const performanceman & ptr )
{
    performance_array_construct( pointer_templ< _performance_array>( ptr.memory( ), ptr.offset( ) + 0 ) );
}
inline void performanceman_destroy( const performanceman & ptr )
{
    performance_array_destroy( pointer_templ< _performance_array>( ptr.memory( ), ptr.offset( ) + 0 ) );
}
inline void performanceman_delete( const performanceman & ptr )
{
    performanceman_destroy( ptr );
    block_free( ptr, 32 );
}
inline const performance_array performanceman_performances( const performanceman & ptr)
{
    return pointer_templ< _performance_array>( ptr.memory( ), ptr.offset( ) + 0 );
}

// cls type main_canvas

inline main_canvas main_canvas_new( block * p_memory )
{
    main_canvas ptr = (main_canvas) block_alloc( p_memory, 64, "main_canvas" ) ;
    main_canvas_construct( ptr );
    return ptr;
}
inline void main_canvas_construct( const main_canvas & ptr )
{
    uint32_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    uint32_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void main_canvas_destroy( const main_canvas & ptr )
{
    uint32_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    uint32_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void main_canvas_delete( const main_canvas & ptr )
{
    main_canvas_destroy( ptr );
    block_free( ptr, 64 );
}
inline uint32 main_canvas_scroll_x( const main_canvas & ptr)
{
    return uint32_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
}
inline void main_canvas_scroll_x( const main_canvas & ptr, uint32 value )
{
    uint32_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 0 ), value );
}
inline uint32 main_canvas_scroll_y( const main_canvas & ptr)
{
    return uint32_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void main_canvas_scroll_y( const main_canvas & ptr, uint32 value )
{
    uint32_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 32 ), value );
}

// cls type scman

inline scman scman_new( block * p_memory )
{
    scman ptr = (scman) block_alloc( p_memory, 104, "scman" ) ;
    scman_construct( ptr );
    return ptr;
}
inline void scman_construct( const scman & ptr )
{
    string_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    string_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
    string_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 64 ) );
    bool_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 96 ) );
}
inline void scman_destroy( const scman & ptr )
{
    string_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    string_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
    string_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 64 ) );
    bool_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 96 ) );
}
inline void scman_delete( const scman & ptr )
{
    scman_destroy( ptr );
    block_free( ptr, 104 );
}
inline void scman_perforce_port( const scman & ptr, char * p_string, unsigned int len)
{
    string_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 0 ), p_string, len );
}
inline void scman_perforce_port( const scman & ptr, const char * p_string )
{
    string_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 0 ), p_string );
}
inline void scman_perforce_client( const scman & ptr, char * p_string, unsigned int len)
{
    string_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 32 ), p_string, len );
}
inline void scman_perforce_client( const scman & ptr, const char * p_string )
{
    string_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 32 ), p_string );
}
inline void scman_perforce_user( const scman & ptr, char * p_string, unsigned int len)
{
    string_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 64 ), p_string, len );
}
inline void scman_perforce_user( const scman & ptr, const char * p_string )
{
    string_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 64 ), p_string );
}
inline bool scman_work_offline( const scman & ptr)
{
    return bool_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 96 ) );
}
inline void scman_work_offline( const scman & ptr, bool value )
{
    bool_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 96 ), value );
}

// cls type directory

inline directory directory_new( block * p_memory )
{
    directory ptr = (directory) block_alloc( p_memory, 96, "directory" ) ;
    directory_construct( ptr );
    return ptr;
}
inline void directory_construct( const directory & ptr )
{
    string_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    directory_array_construct( pointer_templ< _directory_array>( ptr.memory( ), ptr.offset( ) + 32 ) );
    string_array_construct( pointer_templ< _string_array>( ptr.memory( ), ptr.offset( ) + 64 ) );
}
inline void directory_destroy( const directory & ptr )
{
    string_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    directory_array_destroy( pointer_templ< _directory_array>( ptr.memory( ), ptr.offset( ) + 32 ) );
    string_array_destroy( pointer_templ< _string_array>( ptr.memory( ), ptr.offset( ) + 64 ) );
}
inline void directory_delete( const directory & ptr )
{
    directory_destroy( ptr );
    block_free( ptr, 96 );
}
inline void directory_name( const directory & ptr, char * p_string, unsigned int len)
{
    string_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 0 ), p_string, len );
}
inline void directory_name( const directory & ptr, const char * p_string )
{
    string_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 0 ), p_string );
}
inline const directory_array directory_directories( const directory & ptr)
{
    return pointer_templ< _directory_array>( ptr.memory( ), ptr.offset( ) + 32 );
}
inline const string_array directory_files( const directory & ptr)
{
    return pointer_templ< _string_array>( ptr.memory( ), ptr.offset( ) + 64 );
}

// cls type window

inline window window_new( block * p_memory )
{
    window ptr = (window) block_alloc( p_memory, 232, "window" ) ;
    window_construct( ptr );
    return ptr;
}
inline void window_construct( const window & ptr )
{
    string_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    string_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
    rectangle_construct( pointer_templ< _rectangle>( ptr.memory( ), ptr.offset( ) + 64 ) );
    string_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 192 ) );
    bool_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 224 ) );
}
inline void window_destroy( const window & ptr )
{
    string_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    string_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
    rectangle_destroy( pointer_templ< _rectangle>( ptr.memory( ), ptr.offset( ) + 64 ) );
    string_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 192 ) );
    bool_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 224 ) );
}
inline void window_delete( const window & ptr )
{
    window_destroy( ptr );
    block_free( ptr, 232 );
}
inline void window_instance_name( const window & ptr, char * p_string, unsigned int len)
{
    string_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 0 ), p_string, len );
}
inline void window_instance_name( const window & ptr, const char * p_string )
{
    string_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 0 ), p_string );
}
inline void window_plugin_name( const window & ptr, char * p_string, unsigned int len)
{
    string_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 32 ), p_string, len );
}
inline void window_plugin_name( const window & ptr, const char * p_string )
{
    string_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 32 ), p_string );
}
inline const rectangle window_position( const window & ptr)
{
    return pointer_templ< _rectangle>( ptr.memory( ), ptr.offset( ) + 64 );
}
inline void window_window_title( const window & ptr, char * p_string, unsigned int len)
{
    string_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 192 ), p_string, len );
}
inline void window_window_title( const window & ptr, const char * p_string )
{
    string_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 192 ), p_string );
}
inline bool window_closeable( const window & ptr)
{
    return bool_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 224 ) );
}
inline void window_closeable( const window & ptr, bool value )
{
    bool_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 224 ), value );
}

// cls type command

inline command command_new( block * p_memory )
{
    command ptr = (command) block_alloc( p_memory, 96, "command" ) ;
    command_construct( ptr );
    return ptr;
}
inline void command_construct( const command & ptr )
{
    string_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    plugin_msg_construct( pointer_templ< _plugin_msg>( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void command_destroy( const command & ptr )
{
    string_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    plugin_msg_destroy( pointer_templ< _plugin_msg>( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void command_delete( const command & ptr )
{
    command_destroy( ptr );
    block_free( ptr, 96 );
}
inline void command_name( const command & ptr, char * p_string, unsigned int len)
{
    string_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 0 ), p_string, len );
}
inline void command_name( const command & ptr, const char * p_string )
{
    string_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 0 ), p_string );
}
inline const plugin_msg command_plugin_msg( const command & ptr)
{
    return pointer_templ< _plugin_msg>( ptr.memory( ), ptr.offset( ) + 32 );
}

// cls type plugin_msg

inline plugin_msg plugin_msg_new( block * p_memory )
{
    plugin_msg ptr = (plugin_msg) block_alloc( p_memory, 64, "plugin_msg" ) ;
    plugin_msg_construct( ptr );
    return ptr;
}
inline void plugin_msg_construct( const plugin_msg & ptr )
{
    uint32_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    string_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void plugin_msg_destroy( const plugin_msg & ptr )
{
    uint32_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    string_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void plugin_msg_delete( const plugin_msg & ptr )
{
    plugin_msg_destroy( ptr );
    block_free( ptr, 64 );
}
inline uint32 plugin_msg_id( const plugin_msg & ptr)
{
    return uint32_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
}
inline void plugin_msg_id( const plugin_msg & ptr, uint32 value )
{
    uint32_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 0 ), value );
}
inline void plugin_msg_target( const plugin_msg & ptr, char * p_string, unsigned int len)
{
    string_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 32 ), p_string, len );
}
inline void plugin_msg_target( const plugin_msg & ptr, const char * p_string )
{
    string_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 32 ), p_string );
}

// cls type rectangle

inline rectangle rectangle_new( block * p_memory )
{
    rectangle ptr = (rectangle) block_alloc( p_memory, 128, "rectangle" ) ;
    rectangle_construct( ptr );
    return ptr;
}
inline void rectangle_construct( const rectangle & ptr )
{
    uint32_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    uint32_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
    uint32_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 64 ) );
    uint32_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 96 ) );
}
inline void rectangle_destroy( const rectangle & ptr )
{
    uint32_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    uint32_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
    uint32_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 64 ) );
    uint32_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 96 ) );
}
inline void rectangle_delete( const rectangle & ptr )
{
    rectangle_destroy( ptr );
    block_free( ptr, 128 );
}
inline uint32 rectangle_left( const rectangle & ptr)
{
    return uint32_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
}
inline void rectangle_left( const rectangle & ptr, uint32 value )
{
    uint32_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 0 ), value );
}
inline uint32 rectangle_top( const rectangle & ptr)
{
    return uint32_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void rectangle_top( const rectangle & ptr, uint32 value )
{
    uint32_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 32 ), value );
}
inline uint32 rectangle_right( const rectangle & ptr)
{
    return uint32_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 64 ) );
}
inline void rectangle_right( const rectangle & ptr, uint32 value )
{
    uint32_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 64 ), value );
}
inline uint32 rectangle_bottom( const rectangle & ptr)
{
    return uint32_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 96 ) );
}
inline void rectangle_bottom( const rectangle & ptr, uint32 value )
{
    uint32_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 96 ), value );
}

// cls type editor

inline editor editor_new( block * p_memory )
{
    editor ptr = (editor) block_alloc( p_memory, 32, "editor" ) ;
    editor_construct( ptr );
    return ptr;
}
inline void editor_construct( const editor & ptr )
{
    string_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
}
inline void editor_destroy( const editor & ptr )
{
    string_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
}
inline void editor_delete( const editor & ptr )
{
    editor_destroy( ptr );
    block_free( ptr, 32 );
}
inline void editor_file_name( const editor & ptr, char * p_string, unsigned int len)
{
    string_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 0 ), p_string, len );
}
inline void editor_file_name( const editor & ptr, const char * p_string )
{
    string_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 0 ), p_string );
}

// cls type performance

inline performance performance_new( block * p_memory )
{
    performance ptr = (performance) block_alloc( p_memory, 32, "performance" ) ;
    performance_construct( ptr );
    return ptr;
}
inline void performance_construct( const performance & ptr )
{
    string_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
}
inline void performance_destroy( const performance & ptr )
{
    string_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
}
inline void performance_delete( const performance & ptr )
{
    performance_destroy( ptr );
    block_free( ptr, 32 );
}
inline void performance_file_name( const performance & ptr, char * p_string, unsigned int len)
{
    string_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 0 ), p_string, len );
}
inline void performance_file_name( const performance & ptr, const char * p_string )
{
    string_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 0 ), p_string );
}

//
// type safe dereferencing functions
//

//
// type safe array functions
//


//-----------------------------------------------------------------------------
// window_array
//-----------------------------------------------------------------------------

#ifndef window_array_DEFINED
#define window_array_DEFINED

inline unsigned int window_array_num_items( const window_array & ptr )
{
    return array_instance_num_items( ptr );
}
inline void window_array_construct( const window_array & ptr )
{
    array_instance_construct( ptr, 232 );
}
inline const window window_array_item_at( const window_array & ptr, unsigned int index )
{
    return pointer_templ< _window>( array_instance_item_at( ptr, 232, index ) );
}
inline const window window_array_add_item( const window_array & ptr )
{
     window ptr_new_item = (window) array_instance_add_item( ptr, 232 );
     window_construct( ptr_new_item );
    return ptr_new_item;
}
inline void window_array_destroy( const window_array & ptr )
{
    unsigned int items = array_instance_num_items( ptr );
    for(unsigned int i = 0; i < items; i ++ )
    {
        window ptr_item = (window) array_instance_item_at( ptr, 232, i );
        window_destroy( ptr_item );
    }
    array_instance_destroy( ptr, 232 );
}
inline void window_array_remove_item( const window_array & ptr, unsigned int index)
{
    window ptr_item = (window) array_instance_item_at( ptr, 232, index );
    window_destroy( ptr_item );
    ptr_item = pointer_null;
    array_instance_remove_item( ptr, 232, index );
}
#endif // window_array_DEFINED


//-----------------------------------------------------------------------------
// command_array
//-----------------------------------------------------------------------------

#ifndef command_array_DEFINED
#define command_array_DEFINED

inline unsigned int command_array_num_items( const command_array & ptr )
{
    return array_instance_num_items( ptr );
}
inline void command_array_construct( const command_array & ptr )
{
    array_instance_construct( ptr, 96 );
}
inline const command command_array_item_at( const command_array & ptr, unsigned int index )
{
    return pointer_templ< _command>( array_instance_item_at( ptr, 96, index ) );
}
inline const command command_array_add_item( const command_array & ptr )
{
     command ptr_new_item = (command) array_instance_add_item( ptr, 96 );
     command_construct( ptr_new_item );
    return ptr_new_item;
}
inline void command_array_destroy( const command_array & ptr )
{
    unsigned int items = array_instance_num_items( ptr );
    for(unsigned int i = 0; i < items; i ++ )
    {
        command ptr_item = (command) array_instance_item_at( ptr, 96, i );
        command_destroy( ptr_item );
    }
    array_instance_destroy( ptr, 96 );
}
inline void command_array_remove_item( const command_array & ptr, unsigned int index)
{
    command ptr_item = (command) array_instance_item_at( ptr, 96, index );
    command_destroy( ptr_item );
    ptr_item = pointer_null;
    array_instance_remove_item( ptr, 96, index );
}
#endif // command_array_DEFINED


//-----------------------------------------------------------------------------
// directory_array
//-----------------------------------------------------------------------------

#ifndef directory_array_DEFINED
#define directory_array_DEFINED

inline unsigned int directory_array_num_items( const directory_array & ptr )
{
    return array_instance_num_items( ptr );
}
inline void directory_array_construct( const directory_array & ptr )
{
    array_instance_construct( ptr, 96 );
}
inline const directory directory_array_item_at( const directory_array & ptr, unsigned int index )
{
    return pointer_templ< _directory>( array_instance_item_at( ptr, 96, index ) );
}
inline const directory directory_array_add_item( const directory_array & ptr )
{
     directory ptr_new_item = (directory) array_instance_add_item( ptr, 96 );
     directory_construct( ptr_new_item );
    return ptr_new_item;
}
inline void directory_array_destroy( const directory_array & ptr )
{
    unsigned int items = array_instance_num_items( ptr );
    for(unsigned int i = 0; i < items; i ++ )
    {
        directory ptr_item = (directory) array_instance_item_at( ptr, 96, i );
        directory_destroy( ptr_item );
    }
    array_instance_destroy( ptr, 96 );
}
inline void directory_array_remove_item( const directory_array & ptr, unsigned int index)
{
    directory ptr_item = (directory) array_instance_item_at( ptr, 96, index );
    directory_destroy( ptr_item );
    ptr_item = pointer_null;
    array_instance_remove_item( ptr, 96, index );
}
#endif // directory_array_DEFINED


//-----------------------------------------------------------------------------
// string_array
//-----------------------------------------------------------------------------

#ifndef string_array_DEFINED
#define string_array_DEFINED

inline unsigned int string_array_num_items( const string_array & ptr )
{
    return array_instance_num_items( ptr );
}
inline void string_array_construct( const string_array & ptr )
{
    array_instance_construct( ptr, 32 );
}
inline void string_array_item_at( const string_array & ptr, unsigned int index, char * p_string, unsigned int len )
{
    return string_instance_read( array_instance_item_at( ptr, 32, index ), p_string, len );
}
inline void string_array_item_at( const string_array & ptr, unsigned int index, const char * p_new_val )
{
    pointer ptr_item = array_instance_item_at( ptr, 32, index );
    string_instance_destroy( ptr_item );
    string_instance_construct( ptr_item );
    string_instance_write( ptr_item, p_new_val );
}
inline void string_array_add_item( const string_array & ptr, const char * p_string )
{
    pointer ptr_new_item = array_instance_add_item( ptr, 32 );
    string_instance_construct( ptr_new_item );
    string_instance_write( ptr_new_item, p_string );
}
inline void string_array_remove_item( const string_array & ptr, unsigned int index )
{
    pointer ptr_item = array_instance_item_at( ptr, 32, index );
    string_instance_destroy( ptr_item );
    ptr_item = pointer_null;
    array_instance_remove_item( ptr, 32, index );
}
inline void string_array_destroy( const string_array & ptr )
{
    unsigned int items = array_instance_num_items( ptr );
    for(unsigned int i = 0; i < items; i ++ )
    {
        pointer ptr_item = array_instance_item_at( ptr, 32, i );
        string_instance_destroy( ptr_item );
    }
    array_instance_destroy( ptr, 32 );
}
#endif // string_array_DEFINED


//-----------------------------------------------------------------------------
// editor_array
//-----------------------------------------------------------------------------

#ifndef editor_array_DEFINED
#define editor_array_DEFINED

inline unsigned int editor_array_num_items( const editor_array & ptr )
{
    return array_instance_num_items( ptr );
}
inline void editor_array_construct( const editor_array & ptr )
{
    array_instance_construct( ptr, 32 );
}
inline const editor editor_array_item_at( const editor_array & ptr, unsigned int index )
{
    return pointer_templ< _editor>( array_instance_item_at( ptr, 32, index ) );
}
inline const editor editor_array_add_item( const editor_array & ptr )
{
     editor ptr_new_item = (editor) array_instance_add_item( ptr, 32 );
     editor_construct( ptr_new_item );
    return ptr_new_item;
}
inline void editor_array_destroy( const editor_array & ptr )
{
    unsigned int items = array_instance_num_items( ptr );
    for(unsigned int i = 0; i < items; i ++ )
    {
        editor ptr_item = (editor) array_instance_item_at( ptr, 32, i );
        editor_destroy( ptr_item );
    }
    array_instance_destroy( ptr, 32 );
}
inline void editor_array_remove_item( const editor_array & ptr, unsigned int index)
{
    editor ptr_item = (editor) array_instance_item_at( ptr, 32, index );
    editor_destroy( ptr_item );
    ptr_item = pointer_null;
    array_instance_remove_item( ptr, 32, index );
}
#endif // editor_array_DEFINED


//-----------------------------------------------------------------------------
// performance_array
//-----------------------------------------------------------------------------

#ifndef performance_array_DEFINED
#define performance_array_DEFINED

inline unsigned int performance_array_num_items( const performance_array & ptr )
{
    return array_instance_num_items( ptr );
}
inline void performance_array_construct( const performance_array & ptr )
{
    array_instance_construct( ptr, 32 );
}
inline const performance performance_array_item_at( const performance_array & ptr, unsigned int index )
{
    return pointer_templ< _performance>( array_instance_item_at( ptr, 32, index ) );
}
inline const performance performance_array_add_item( const performance_array & ptr )
{
     performance ptr_new_item = (performance) array_instance_add_item( ptr, 32 );
     performance_construct( ptr_new_item );
    return ptr_new_item;
}
inline void performance_array_destroy( const performance_array & ptr )
{
    unsigned int items = array_instance_num_items( ptr );
    for(unsigned int i = 0; i < items; i ++ )
    {
        performance ptr_item = (performance) array_instance_item_at( ptr, 32, i );
        performance_destroy( ptr_item );
    }
    array_instance_destroy( ptr, 32 );
}
inline void performance_array_remove_item( const performance_array & ptr, unsigned int index)
{
    performance ptr_item = (performance) array_instance_item_at( ptr, 32, index );
    performance_destroy( ptr_item );
    ptr_item = pointer_null;
    array_instance_remove_item( ptr, 32, index );
}
#endif // performance_array_DEFINED
}
#endif
