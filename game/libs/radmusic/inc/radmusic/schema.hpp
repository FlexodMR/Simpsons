
// Generated by Schema+ V1.0 (C) Radical Games

#ifndef __6239
#define __6239

#include <ods/ods.hpp>

namespace ods {

//
// class types
//
struct _comp; typedef pointer_templ<_comp> comp;
struct _group; typedef pointer_templ<_group> group;
struct _fade_transition; typedef pointer_templ<_fade_transition> fade_transition;
struct _stitch_transition; typedef pointer_templ<_stitch_transition> stitch_transition;
struct _event; typedef pointer_templ<_event> event;
struct _event_matrix; typedef pointer_templ<_event_matrix> event_matrix;
struct _state; typedef pointer_templ<_state> state;
struct _rsd_file; typedef pointer_templ<_rsd_file> rsd_file;
struct _stream; typedef pointer_templ<_stream> stream;
struct _clip; typedef pointer_templ<_clip> clip;
struct _region; typedef pointer_templ<_region> region;
struct _sequence; typedef pointer_templ<_sequence> sequence;
struct _layer; typedef pointer_templ<_layer> layer;
struct _event_clip; typedef pointer_templ<_event_clip> event_clip;
struct _event_stream; typedef pointer_templ<_event_stream> event_stream;
struct _event_silence; typedef pointer_templ<_event_silence> event_silence;
struct _event_var_volume; typedef pointer_templ<_event_var_volume> event_var_volume;
struct _event_var_pitch; typedef pointer_templ<_event_var_pitch> event_var_pitch;
struct _event_var_volume_rand_min; typedef pointer_templ<_event_var_volume_rand_min> event_var_volume_rand_min;
struct _event_var_volume_rand_max; typedef pointer_templ<_event_var_volume_rand_max> event_var_volume_rand_max;
struct _event_var_pitch_rand_min; typedef pointer_templ<_event_var_pitch_rand_min> event_var_pitch_rand_min;
struct _event_var_pitch_rand_max; typedef pointer_templ<_event_var_pitch_rand_max> event_var_pitch_rand_max;
struct _event_var_aux_gain; typedef pointer_templ<_event_var_aux_gain> event_var_aux_gain;
struct _event_var_positional; typedef pointer_templ<_event_var_positional> event_var_positional;
struct _event_var_pos_fall_off; typedef pointer_templ<_event_var_pos_fall_off> event_var_pos_fall_off;
struct _event_var_pos_dist_min; typedef pointer_templ<_event_var_pos_dist_min> event_var_pos_dist_min;
struct _event_var_pos_dist_max; typedef pointer_templ<_event_var_pos_dist_max> event_var_pos_dist_max;
struct _event_callback; typedef pointer_templ<_event_callback> event_callback;
struct _event_logic_and; typedef pointer_templ<_event_logic_and> event_logic_and;
struct _event_logic_or; typedef pointer_templ<_event_logic_or> event_logic_or;
struct _event_logic_repeat; typedef pointer_templ<_event_logic_repeat> event_logic_repeat;
struct _play_region_action; typedef pointer_templ<_play_region_action> play_region_action;
struct _push_region_action; typedef pointer_templ<_push_region_action> push_region_action;
struct _pop_region_action; typedef pointer_templ<_pop_region_action> pop_region_action;
struct _start_layer_action; typedef pointer_templ<_start_layer_action> start_layer_action;
struct _stop_layer_action; typedef pointer_templ<_stop_layer_action> stop_layer_action;
struct _rand_state_action; typedef pointer_templ<_rand_state_action> rand_state_action;
struct _audio_format; typedef pointer_templ<_audio_format> audio_format;
struct _tempo_track; typedef pointer_templ<_tempo_track> tempo_track;
struct _sequence_event; typedef pointer_templ<_sequence_event> sequence_event;
struct _beat_set; typedef pointer_templ<_beat_set> beat_set;
struct _action; typedef pointer_templ<_action> action;

//
// ref types
//
struct _group_ref; typedef pointer_templ<_group_ref> group_ref;
struct _rsd_file_ref; typedef pointer_templ<_rsd_file_ref> rsd_file_ref;
struct _sequence_event_ref; typedef pointer_templ<_sequence_event_ref> sequence_event_ref;
struct _stream_ref; typedef pointer_templ<_stream_ref> stream_ref;
struct _clip_ref; typedef pointer_templ<_clip_ref> clip_ref;
struct _region_ref; typedef pointer_templ<_region_ref> region_ref;
struct _state_ref; typedef pointer_templ<_state_ref> state_ref;
struct _action_ref; typedef pointer_templ<_action_ref> action_ref;
struct _event_matrix_ref; typedef pointer_templ<_event_matrix_ref> event_matrix_ref;
struct _layer_ref; typedef pointer_templ<_layer_ref> layer_ref;
struct _sequence_ref; typedef pointer_templ<_sequence_ref> sequence_ref;

//
// array types
//
struct _group_array; typedef pointer_templ<_group_array> group_array;
struct _fade_transition_array; typedef pointer_templ<_fade_transition_array> fade_transition_array;
struct _stitch_transition_array; typedef pointer_templ<_stitch_transition_array> stitch_transition_array;
struct _event_array; typedef pointer_templ<_event_array> event_array;
struct _event_matrix_array; typedef pointer_templ<_event_matrix_array> event_matrix_array;
struct _state_array; typedef pointer_templ<_state_array> state_array;
struct _rsd_file_array; typedef pointer_templ<_rsd_file_array> rsd_file_array;
struct _stream_array; typedef pointer_templ<_stream_array> stream_array;
struct _clip_array; typedef pointer_templ<_clip_array> clip_array;
struct _region_array; typedef pointer_templ<_region_array> region_array;
struct _sequence_array; typedef pointer_templ<_sequence_array> sequence_array;
struct _layer_array; typedef pointer_templ<_layer_array> layer_array;
struct _event_clip_array; typedef pointer_templ<_event_clip_array> event_clip_array;
struct _event_stream_array; typedef pointer_templ<_event_stream_array> event_stream_array;
struct _event_silence_array; typedef pointer_templ<_event_silence_array> event_silence_array;
struct _event_var_volume_array; typedef pointer_templ<_event_var_volume_array> event_var_volume_array;
struct _event_var_pitch_array; typedef pointer_templ<_event_var_pitch_array> event_var_pitch_array;
struct _event_var_volume_rand_min_array; typedef pointer_templ<_event_var_volume_rand_min_array> event_var_volume_rand_min_array;
struct _event_var_volume_rand_max_array; typedef pointer_templ<_event_var_volume_rand_max_array> event_var_volume_rand_max_array;
struct _event_var_pitch_rand_min_array; typedef pointer_templ<_event_var_pitch_rand_min_array> event_var_pitch_rand_min_array;
struct _event_var_pitch_rand_max_array; typedef pointer_templ<_event_var_pitch_rand_max_array> event_var_pitch_rand_max_array;
struct _event_var_aux_gain_array; typedef pointer_templ<_event_var_aux_gain_array> event_var_aux_gain_array;
struct _event_var_positional_array; typedef pointer_templ<_event_var_positional_array> event_var_positional_array;
struct _event_var_pos_fall_off_array; typedef pointer_templ<_event_var_pos_fall_off_array> event_var_pos_fall_off_array;
struct _event_var_pos_dist_min_array; typedef pointer_templ<_event_var_pos_dist_min_array> event_var_pos_dist_min_array;
struct _event_var_pos_dist_max_array; typedef pointer_templ<_event_var_pos_dist_max_array> event_var_pos_dist_max_array;
struct _event_callback_array; typedef pointer_templ<_event_callback_array> event_callback_array;
struct _event_logic_and_array; typedef pointer_templ<_event_logic_and_array> event_logic_and_array;
struct _event_logic_or_array; typedef pointer_templ<_event_logic_or_array> event_logic_or_array;
struct _event_logic_repeat_array; typedef pointer_templ<_event_logic_repeat_array> event_logic_repeat_array;
struct _play_region_action_array; typedef pointer_templ<_play_region_action_array> play_region_action_array;
struct _push_region_action_array; typedef pointer_templ<_push_region_action_array> push_region_action_array;
struct _pop_region_action_array; typedef pointer_templ<_pop_region_action_array> pop_region_action_array;
struct _start_layer_action_array; typedef pointer_templ<_start_layer_action_array> start_layer_action_array;
struct _stop_layer_action_array; typedef pointer_templ<_stop_layer_action_array> stop_layer_action_array;
struct _rand_state_action_array; typedef pointer_templ<_rand_state_action_array> rand_state_action_array;
struct _stream_ref_array; typedef pointer_templ<_stream_ref_array> stream_ref_array;
struct _clip_ref_array; typedef pointer_templ<_clip_ref_array> clip_ref_array;
struct _region_ref_array; typedef pointer_templ<_region_ref_array> region_ref_array;
struct _state_ref_array; typedef pointer_templ<_state_ref_array> state_ref_array;
struct _action_ref_array; typedef pointer_templ<_action_ref_array> action_ref_array;
struct _action_ref_array_array; typedef pointer_templ<_action_ref_array_array> action_ref_array_array;
struct _string_array; typedef pointer_templ<_string_array> string_array;
struct _layer_ref_array; typedef pointer_templ<_layer_ref_array> layer_ref_array;
struct _float_array; typedef pointer_templ<_float_array> float_array;
struct _sequence_event_ref_array; typedef pointer_templ<_sequence_event_ref_array> sequence_event_ref_array;

//
// class attribute accessor functions
//

// cls type comp

inline comp comp_new( block * p_memory );
inline void comp_construct( const comp & ptr );
inline void comp_destroy( const comp & ptr );
inline void comp_delete( const comp & ptr );
inline uint32 comp_sound_memory_max( const comp & );
inline void comp_sound_memory_max( const comp &, uint32 );
inline uint32 comp_cache_memory_max( const comp & );
inline void comp_cache_memory_max( const comp &, uint32 );
inline uint32 comp_stream_size_min( const comp & );
inline void comp_stream_size_min( const comp &, uint32 );
inline const group_array comp_root_groups( const comp & );
inline void comp_root_groups( const comp &, const group_array );
inline const fade_transition_array comp_fade_transitions( const comp & );
inline void comp_fade_transitions( const comp &, const fade_transition_array );
inline const stitch_transition_array comp_stitch_transitions( const comp & );
inline void comp_stitch_transitions( const comp &, const stitch_transition_array );
inline const event_array comp_events( const comp & );
inline void comp_events( const comp &, const event_array );
inline const event_matrix_array comp_event_matricies( const comp & );
inline void comp_event_matricies( const comp &, const event_matrix_array );
inline const state_array comp_states( const comp & );
inline void comp_states( const comp &, const state_array );
inline const rsd_file_array comp_rsd_files( const comp & );
inline void comp_rsd_files( const comp &, const rsd_file_array );
inline const stream_array comp_streams( const comp & );
inline void comp_streams( const comp &, const stream_array );
inline const clip_array comp_clips( const comp & );
inline void comp_clips( const comp &, const clip_array );
inline const region_array comp_regions( const comp & );
inline void comp_regions( const comp &, const region_array );
inline const sequence_array comp_sequences( const comp & );
inline void comp_sequences( const comp &, const sequence_array );
inline const layer_array comp_layers( const comp & );
inline void comp_layers( const comp &, const layer_array );
inline const event_clip_array comp_event_clip_array( const comp & );
inline void comp_event_clip_array( const comp &, const event_clip_array );
inline const event_stream_array comp_event_stream_array( const comp & );
inline void comp_event_stream_array( const comp &, const event_stream_array );
inline const event_silence_array comp_event_silence_array( const comp & );
inline void comp_event_silence_array( const comp &, const event_silence_array );
inline const event_var_volume_array comp_event_var_volume_array( const comp & );
inline void comp_event_var_volume_array( const comp &, const event_var_volume_array );
inline const event_var_pitch_array comp_event_var_pitch_array( const comp & );
inline void comp_event_var_pitch_array( const comp &, const event_var_pitch_array );
inline const event_var_volume_rand_min_array comp_event_var_volume_rand_min_array( const comp & );
inline void comp_event_var_volume_rand_min_array( const comp &, const event_var_volume_rand_min_array );
inline const event_var_volume_rand_max_array comp_event_var_volume_rand_max_array( const comp & );
inline void comp_event_var_volume_rand_max_array( const comp &, const event_var_volume_rand_max_array );
inline const event_var_pitch_rand_min_array comp_event_var_pitch_rand_min_array( const comp & );
inline void comp_event_var_pitch_rand_min_array( const comp &, const event_var_pitch_rand_min_array );
inline const event_var_pitch_rand_max_array comp_event_var_pitch_rand_max_array( const comp & );
inline void comp_event_var_pitch_rand_max_array( const comp &, const event_var_pitch_rand_max_array );
inline const event_var_aux_gain_array comp_event_var_aux_gain_array( const comp & );
inline void comp_event_var_aux_gain_array( const comp &, const event_var_aux_gain_array );
inline const event_var_positional_array comp_event_var_positional_array( const comp & );
inline void comp_event_var_positional_array( const comp &, const event_var_positional_array );
inline const event_var_pos_fall_off_array comp_event_var_pos_fall_off_array( const comp & );
inline void comp_event_var_pos_fall_off_array( const comp &, const event_var_pos_fall_off_array );
inline const event_var_pos_dist_min_array comp_event_var_pos_dist_min_array( const comp & );
inline void comp_event_var_pos_dist_min_array( const comp &, const event_var_pos_dist_min_array );
inline const event_var_pos_dist_max_array comp_event_var_pos_dist_max_array( const comp & );
inline void comp_event_var_pos_dist_max_array( const comp &, const event_var_pos_dist_max_array );
inline const event_callback_array comp_event_callback_array( const comp & );
inline void comp_event_callback_array( const comp &, const event_callback_array );
inline const event_logic_and_array comp_event_logic_and_array( const comp & );
inline void comp_event_logic_and_array( const comp &, const event_logic_and_array );
inline const event_logic_or_array comp_event_logic_or_array( const comp & );
inline void comp_event_logic_or_array( const comp &, const event_logic_or_array );
inline const event_logic_repeat_array comp_event_logic_repeat_array( const comp & );
inline void comp_event_logic_repeat_array( const comp &, const event_logic_repeat_array );
inline const play_region_action_array comp_play_region_action_array( const comp & );
inline void comp_play_region_action_array( const comp &, const play_region_action_array );
inline const push_region_action_array comp_push_region_action_array( const comp & );
inline void comp_push_region_action_array( const comp &, const push_region_action_array );
inline const pop_region_action_array comp_pop_region_action_array( const comp & );
inline void comp_pop_region_action_array( const comp &, const pop_region_action_array );
inline const start_layer_action_array comp_start_layer_action_array( const comp & );
inline void comp_start_layer_action_array( const comp &, const start_layer_action_array );
inline const stop_layer_action_array comp_stop_layer_action_array( const comp & );
inline void comp_stop_layer_action_array( const comp &, const stop_layer_action_array );
inline const rand_state_action_array comp_rand_state_action_array( const comp & );
inline void comp_rand_state_action_array( const comp &, const rand_state_action_array );

// cls type group

inline group group_new( block * p_memory );
inline void group_construct( const group & ptr );
inline void group_destroy( const group & ptr );
inline void group_delete( const group & ptr );
inline void group_name( const group & , char * p_string, unsigned int len);
inline void group_name( const group &, const char * );
inline const group_array group_children( const group & );
inline void group_children( const group &, const group_array );
inline const stream_ref_array group_stream_refs( const group & );
inline void group_stream_refs( const group &, const stream_ref_array );
inline const clip_ref_array group_clip_refs( const group & );
inline void group_clip_refs( const group &, const clip_ref_array );
inline const region_ref_array group_region_refs( const group & );
inline void group_region_refs( const group &, const region_ref_array );
inline const group group_parent_ref( const group & );
inline void group_parent_ref( const group &, const group & );
inline uint32 group_tree_depth( const group & );
inline void group_tree_depth( const group &, uint32 );

// cls type fade_transition

inline fade_transition fade_transition_new( block * p_memory );
inline void fade_transition_construct( const fade_transition & ptr );
inline void fade_transition_destroy( const fade_transition & ptr );
inline void fade_transition_delete( const fade_transition & ptr );
inline const region fade_transition_source_region_ref( const fade_transition & );
inline void fade_transition_source_region_ref( const fade_transition &, const region & );
inline const region fade_transition_target_region_ref( const fade_transition & );
inline void fade_transition_target_region_ref( const fade_transition &, const region & );
inline float fade_transition_source_time( const fade_transition & );
inline void fade_transition_source_time( const fade_transition &, float );
inline float fade_transition_source_start( const fade_transition & );
inline void fade_transition_source_start( const fade_transition &, float );
inline float fade_transition_target_time( const fade_transition & );
inline void fade_transition_target_time( const fade_transition &, float );
inline float fade_transition_target_start( const fade_transition & );
inline void fade_transition_target_start( const fade_transition &, float );
inline const beat_set fade_transition_beat_set( const fade_transition & );
inline void fade_transition_beat_set( const fade_transition &, const beat_set );

// cls type stitch_transition

inline stitch_transition stitch_transition_new( block * p_memory );
inline void stitch_transition_construct( const stitch_transition & ptr );
inline void stitch_transition_destroy( const stitch_transition & ptr );
inline void stitch_transition_delete( const stitch_transition & ptr );
inline const region stitch_transition_source_region_ref( const stitch_transition & );
inline void stitch_transition_source_region_ref( const stitch_transition &, const region & );
inline const region stitch_transition_target_region_ref( const stitch_transition & );
inline void stitch_transition_target_region_ref( const stitch_transition &, const region & );
inline const region stitch_transition_transition_region_ref( const stitch_transition & );
inline void stitch_transition_transition_region_ref( const stitch_transition &, const region & );

// cls type event

inline event event_new( block * p_memory );
inline void event_construct( const event & ptr );
inline void event_destroy( const event & ptr );
inline void event_delete( const event & ptr );
inline void event_name( const event & , char * p_string, unsigned int len);
inline void event_name( const event &, const char * );
inline const action_ref_array_array event_action_arrays( const event & );
inline void event_action_arrays( const event &, const action_ref_array_array );
inline const event_matrix event_event_matrix_ref( const event & );
inline void event_event_matrix_ref( const event &, const event_matrix & );

// cls type event_matrix

inline event_matrix event_matrix_new( block * p_memory );
inline void event_matrix_construct( const event_matrix & ptr );
inline void event_matrix_destroy( const event_matrix & ptr );
inline void event_matrix_delete( const event_matrix & ptr );
inline const state_ref_array event_matrix_state_ref_array( const event_matrix & );
inline void event_matrix_state_ref_array( const event_matrix &, const state_ref_array );

// cls type state

inline state state_new( block * p_memory );
inline void state_construct( const state & ptr );
inline void state_destroy( const state & ptr );
inline void state_delete( const state & ptr );
inline void state_name( const state & , char * p_string, unsigned int len);
inline void state_name( const state &, const char * );
inline const string_array state_values( const state & );
inline void state_values( const state &, const string_array );

// cls type rsd_file

inline rsd_file rsd_file_new( block * p_memory );
inline void rsd_file_construct( const rsd_file & ptr );
inline void rsd_file_destroy( const rsd_file & ptr );
inline void rsd_file_delete( const rsd_file & ptr );
inline void rsd_file_file_name( const rsd_file & , char * p_string, unsigned int len);
inline void rsd_file_file_name( const rsd_file &, const char * );
inline uint32 rsd_file_size( const rsd_file & );
inline void rsd_file_size( const rsd_file &, uint32 );
inline const audio_format rsd_file_audio_format( const rsd_file & );
inline void rsd_file_audio_format( const rsd_file &, const audio_format );

// cls type stream

inline stream stream_new( block * p_memory );
inline void stream_construct( const stream & ptr );
inline void stream_destroy( const stream & ptr );
inline void stream_delete( const stream & ptr );
inline void stream_name( const stream & , char * p_string, unsigned int len);
inline void stream_name( const stream &, const char * );
inline const group stream_parent_group_ref( const stream & );
inline void stream_parent_group_ref( const stream &, const group & );
inline const rsd_file stream_rsd_file_ref( const stream & );
inline void stream_rsd_file_ref( const stream &, const rsd_file & );
inline bool stream_streamed( const stream & );
inline void stream_streamed( const stream &, bool );
inline const tempo_track stream_tempo_track( const stream & );
inline void stream_tempo_track( const stream &, const tempo_track );

// cls type clip

inline clip clip_new( block * p_memory );
inline void clip_construct( const clip & ptr );
inline void clip_destroy( const clip & ptr );
inline void clip_delete( const clip & ptr );
inline void clip_name( const clip & , char * p_string, unsigned int len);
inline void clip_name( const clip &, const char * );
inline const group clip_parent_group_ref( const clip & );
inline void clip_parent_group_ref( const clip &, const group & );
inline const rsd_file clip_rsd_file_ref( const clip & );
inline void clip_rsd_file_ref( const clip &, const rsd_file & );
inline const tempo_track clip_tempo_track( const clip & );
inline void clip_tempo_track( const clip &, const tempo_track );

// cls type region

inline region region_new( block * p_memory );
inline void region_construct( const region & ptr );
inline void region_destroy( const region & ptr );
inline void region_delete( const region & ptr );
inline void region_name( const region & , char * p_string, unsigned int len);
inline void region_name( const region &, const char * );
inline const layer_ref_array region_layer_refs( const region & );
inline void region_layer_refs( const region &, const layer_ref_array );
inline const region region_exit_region_ref( const region & );
inline void region_exit_region_ref( const region &, const region & );
inline const group region_group_ref( const region & );
inline void region_group_ref( const region &, const group & );
inline float region_volume( const region & );
inline void region_volume( const region &, float );

// cls type sequence

inline sequence sequence_new( block * p_memory );
inline void sequence_construct( const sequence & ptr );
inline void sequence_destroy( const sequence & ptr );
inline void sequence_delete( const sequence & ptr );
inline const sequence_event sequence_root_event( const sequence & );
inline void sequence_root_event( const sequence &, const sequence_event & );
inline uint32 sequence_stack_size( const sequence & );
inline void sequence_stack_size( const sequence &, uint32 );

// cls type layer

inline layer layer_new( block * p_memory );
inline void layer_construct( const layer & ptr );
inline void layer_destroy( const layer & ptr );
inline void layer_delete( const layer & ptr );
inline void layer_name( const layer & , char * p_string, unsigned int len);
inline void layer_name( const layer &, const char * );
inline bool layer_constant( const layer & );
inline void layer_constant( const layer &, bool );
inline const beat_set layer_beat_set( const layer & );
inline void layer_beat_set( const layer &, const beat_set );
inline const sequence layer_sequence_ref( const layer & );
inline void layer_sequence_ref( const layer &, const sequence & );
inline float layer_volume( const layer & );
inline void layer_volume( const layer &, float );

// cls type event_clip

inline event_clip event_clip_new( block * p_memory );
inline void event_clip_construct( const event_clip & ptr );
inline void event_clip_destroy( const event_clip & ptr );
inline void event_clip_delete( const event_clip & ptr );
inline uint32 event_clip_type( const event_clip & );
inline void event_clip_type( const event_clip &, uint32 );
inline const clip event_clip_clip_ref( const event_clip & );
inline void event_clip_clip_ref( const event_clip &, const clip & );

// cls type event_stream

inline event_stream event_stream_new( block * p_memory );
inline void event_stream_construct( const event_stream & ptr );
inline void event_stream_destroy( const event_stream & ptr );
inline void event_stream_delete( const event_stream & ptr );
inline uint32 event_stream_type( const event_stream & );
inline void event_stream_type( const event_stream &, uint32 );
inline const stream event_stream_stream_ref( const event_stream & );
inline void event_stream_stream_ref( const event_stream &, const stream & );

// cls type event_silence

inline event_silence event_silence_new( block * p_memory );
inline void event_silence_construct( const event_silence & ptr );
inline void event_silence_destroy( const event_silence & ptr );
inline void event_silence_delete( const event_silence & ptr );
inline uint32 event_silence_type( const event_silence & );
inline void event_silence_type( const event_silence &, uint32 );
inline float event_silence_min_time( const event_silence & );
inline void event_silence_min_time( const event_silence &, float );
inline float event_silence_max_time( const event_silence & );
inline void event_silence_max_time( const event_silence &, float );

// cls type event_var_volume

inline event_var_volume event_var_volume_new( block * p_memory );
inline void event_var_volume_construct( const event_var_volume & ptr );
inline void event_var_volume_destroy( const event_var_volume & ptr );
inline void event_var_volume_delete( const event_var_volume & ptr );
inline uint32 event_var_volume_type( const event_var_volume & );
inline void event_var_volume_type( const event_var_volume &, uint32 );
inline float event_var_volume_volume( const event_var_volume & );
inline void event_var_volume_volume( const event_var_volume &, float );

// cls type event_var_pitch

inline event_var_pitch event_var_pitch_new( block * p_memory );
inline void event_var_pitch_construct( const event_var_pitch & ptr );
inline void event_var_pitch_destroy( const event_var_pitch & ptr );
inline void event_var_pitch_delete( const event_var_pitch & ptr );
inline uint32 event_var_pitch_type( const event_var_pitch & );
inline void event_var_pitch_type( const event_var_pitch &, uint32 );
inline float event_var_pitch_pitch( const event_var_pitch & );
inline void event_var_pitch_pitch( const event_var_pitch &, float );

// cls type event_var_volume_rand_min

inline event_var_volume_rand_min event_var_volume_rand_min_new( block * p_memory );
inline void event_var_volume_rand_min_construct( const event_var_volume_rand_min & ptr );
inline void event_var_volume_rand_min_destroy( const event_var_volume_rand_min & ptr );
inline void event_var_volume_rand_min_delete( const event_var_volume_rand_min & ptr );
inline uint32 event_var_volume_rand_min_type( const event_var_volume_rand_min & );
inline void event_var_volume_rand_min_type( const event_var_volume_rand_min &, uint32 );
inline float event_var_volume_rand_min_volume_rand_min( const event_var_volume_rand_min & );
inline void event_var_volume_rand_min_volume_rand_min( const event_var_volume_rand_min &, float );

// cls type event_var_volume_rand_max

inline event_var_volume_rand_max event_var_volume_rand_max_new( block * p_memory );
inline void event_var_volume_rand_max_construct( const event_var_volume_rand_max & ptr );
inline void event_var_volume_rand_max_destroy( const event_var_volume_rand_max & ptr );
inline void event_var_volume_rand_max_delete( const event_var_volume_rand_max & ptr );
inline uint32 event_var_volume_rand_max_type( const event_var_volume_rand_max & );
inline void event_var_volume_rand_max_type( const event_var_volume_rand_max &, uint32 );
inline float event_var_volume_rand_max_volume_rand_max( const event_var_volume_rand_max & );
inline void event_var_volume_rand_max_volume_rand_max( const event_var_volume_rand_max &, float );

// cls type event_var_pitch_rand_min

inline event_var_pitch_rand_min event_var_pitch_rand_min_new( block * p_memory );
inline void event_var_pitch_rand_min_construct( const event_var_pitch_rand_min & ptr );
inline void event_var_pitch_rand_min_destroy( const event_var_pitch_rand_min & ptr );
inline void event_var_pitch_rand_min_delete( const event_var_pitch_rand_min & ptr );
inline uint32 event_var_pitch_rand_min_type( const event_var_pitch_rand_min & );
inline void event_var_pitch_rand_min_type( const event_var_pitch_rand_min &, uint32 );
inline float event_var_pitch_rand_min_pitch_rand_min( const event_var_pitch_rand_min & );
inline void event_var_pitch_rand_min_pitch_rand_min( const event_var_pitch_rand_min &, float );

// cls type event_var_pitch_rand_max

inline event_var_pitch_rand_max event_var_pitch_rand_max_new( block * p_memory );
inline void event_var_pitch_rand_max_construct( const event_var_pitch_rand_max & ptr );
inline void event_var_pitch_rand_max_destroy( const event_var_pitch_rand_max & ptr );
inline void event_var_pitch_rand_max_delete( const event_var_pitch_rand_max & ptr );
inline uint32 event_var_pitch_rand_max_type( const event_var_pitch_rand_max & );
inline void event_var_pitch_rand_max_type( const event_var_pitch_rand_max &, uint32 );
inline float event_var_pitch_rand_max_pitch_rand_max( const event_var_pitch_rand_max & );
inline void event_var_pitch_rand_max_pitch_rand_max( const event_var_pitch_rand_max &, float );

// cls type event_var_aux_gain

inline event_var_aux_gain event_var_aux_gain_new( block * p_memory );
inline void event_var_aux_gain_construct( const event_var_aux_gain & ptr );
inline void event_var_aux_gain_destroy( const event_var_aux_gain & ptr );
inline void event_var_aux_gain_delete( const event_var_aux_gain & ptr );
inline uint32 event_var_aux_gain_type( const event_var_aux_gain & );
inline void event_var_aux_gain_type( const event_var_aux_gain &, uint32 );
inline uint32 event_var_aux_gain_aux_number( const event_var_aux_gain & );
inline void event_var_aux_gain_aux_number( const event_var_aux_gain &, uint32 );
inline float event_var_aux_gain_aux_gain( const event_var_aux_gain & );
inline void event_var_aux_gain_aux_gain( const event_var_aux_gain &, float );

// cls type event_var_positional

inline event_var_positional event_var_positional_new( block * p_memory );
inline void event_var_positional_construct( const event_var_positional & ptr );
inline void event_var_positional_destroy( const event_var_positional & ptr );
inline void event_var_positional_delete( const event_var_positional & ptr );
inline uint32 event_var_positional_type( const event_var_positional & );
inline void event_var_positional_type( const event_var_positional &, uint32 );
inline bool event_var_positional_positional( const event_var_positional & );
inline void event_var_positional_positional( const event_var_positional &, bool );

// cls type event_var_pos_fall_off

inline event_var_pos_fall_off event_var_pos_fall_off_new( block * p_memory );
inline void event_var_pos_fall_off_construct( const event_var_pos_fall_off & ptr );
inline void event_var_pos_fall_off_destroy( const event_var_pos_fall_off & ptr );
inline void event_var_pos_fall_off_delete( const event_var_pos_fall_off & ptr );
inline uint32 event_var_pos_fall_off_type( const event_var_pos_fall_off & );
inline void event_var_pos_fall_off_type( const event_var_pos_fall_off &, uint32 );
inline float event_var_pos_fall_off_pos_fall_off( const event_var_pos_fall_off & );
inline void event_var_pos_fall_off_pos_fall_off( const event_var_pos_fall_off &, float );

// cls type event_var_pos_dist_min

inline event_var_pos_dist_min event_var_pos_dist_min_new( block * p_memory );
inline void event_var_pos_dist_min_construct( const event_var_pos_dist_min & ptr );
inline void event_var_pos_dist_min_destroy( const event_var_pos_dist_min & ptr );
inline void event_var_pos_dist_min_delete( const event_var_pos_dist_min & ptr );
inline uint32 event_var_pos_dist_min_type( const event_var_pos_dist_min & );
inline void event_var_pos_dist_min_type( const event_var_pos_dist_min &, uint32 );
inline float event_var_pos_dist_min_pos_dist_min( const event_var_pos_dist_min & );
inline void event_var_pos_dist_min_pos_dist_min( const event_var_pos_dist_min &, float );

// cls type event_var_pos_dist_max

inline event_var_pos_dist_max event_var_pos_dist_max_new( block * p_memory );
inline void event_var_pos_dist_max_construct( const event_var_pos_dist_max & ptr );
inline void event_var_pos_dist_max_destroy( const event_var_pos_dist_max & ptr );
inline void event_var_pos_dist_max_delete( const event_var_pos_dist_max & ptr );
inline uint32 event_var_pos_dist_max_type( const event_var_pos_dist_max & );
inline void event_var_pos_dist_max_type( const event_var_pos_dist_max &, uint32 );
inline float event_var_pos_dist_max_pos_dist_max( const event_var_pos_dist_max & );
inline void event_var_pos_dist_max_pos_dist_max( const event_var_pos_dist_max &, float );

// cls type event_callback

inline event_callback event_callback_new( block * p_memory );
inline void event_callback_construct( const event_callback & ptr );
inline void event_callback_destroy( const event_callback & ptr );
inline void event_callback_delete( const event_callback & ptr );
inline uint32 event_callback_type( const event_callback & );
inline void event_callback_type( const event_callback &, uint32 );
inline void event_callback_callback_name( const event_callback & , char * p_string, unsigned int len);
inline void event_callback_callback_name( const event_callback &, const char * );

// cls type event_logic_and

inline event_logic_and event_logic_and_new( block * p_memory );
inline void event_logic_and_construct( const event_logic_and & ptr );
inline void event_logic_and_destroy( const event_logic_and & ptr );
inline void event_logic_and_delete( const event_logic_and & ptr );
inline uint32 event_logic_and_type( const event_logic_and & );
inline void event_logic_and_type( const event_logic_and &, uint32 );
inline const sequence_event_ref_array event_logic_and_events( const event_logic_and & );
inline void event_logic_and_events( const event_logic_and &, const sequence_event_ref_array );

// cls type event_logic_or

inline event_logic_or event_logic_or_new( block * p_memory );
inline void event_logic_or_construct( const event_logic_or & ptr );
inline void event_logic_or_destroy( const event_logic_or & ptr );
inline void event_logic_or_delete( const event_logic_or & ptr );
inline uint32 event_logic_or_type( const event_logic_or & );
inline void event_logic_or_type( const event_logic_or &, uint32 );
inline const sequence_event_ref_array event_logic_or_events( const event_logic_or & );
inline void event_logic_or_events( const event_logic_or &, const sequence_event_ref_array );

// cls type event_logic_repeat

inline event_logic_repeat event_logic_repeat_new( block * p_memory );
inline void event_logic_repeat_construct( const event_logic_repeat & ptr );
inline void event_logic_repeat_destroy( const event_logic_repeat & ptr );
inline void event_logic_repeat_delete( const event_logic_repeat & ptr );
inline uint32 event_logic_repeat_type( const event_logic_repeat & );
inline void event_logic_repeat_type( const event_logic_repeat &, uint32 );
inline uint32 event_logic_repeat_min_times( const event_logic_repeat & );
inline void event_logic_repeat_min_times( const event_logic_repeat &, uint32 );
inline uint32 event_logic_repeat_max_times( const event_logic_repeat & );
inline void event_logic_repeat_max_times( const event_logic_repeat &, uint32 );
inline const sequence_event event_logic_repeat_event_ref( const event_logic_repeat & );
inline void event_logic_repeat_event_ref( const event_logic_repeat &, const sequence_event & );

// cls type play_region_action

inline play_region_action play_region_action_new( block * p_memory );
inline void play_region_action_construct( const play_region_action & ptr );
inline void play_region_action_destroy( const play_region_action & ptr );
inline void play_region_action_delete( const play_region_action & ptr );
inline uint32 play_region_action_type( const play_region_action & );
inline void play_region_action_type( const play_region_action &, uint32 );
inline const region play_region_action_region_ref( const play_region_action & );
inline void play_region_action_region_ref( const play_region_action &, const region & );
inline uint32 play_region_action_region_resume_type( const play_region_action & );
inline void play_region_action_region_resume_type( const play_region_action &, uint32 );

// cls type push_region_action

inline push_region_action push_region_action_new( block * p_memory );
inline void push_region_action_construct( const push_region_action & ptr );
inline void push_region_action_destroy( const push_region_action & ptr );
inline void push_region_action_delete( const push_region_action & ptr );
inline uint32 push_region_action_type( const push_region_action & );
inline void push_region_action_type( const push_region_action &, uint32 );
inline const region push_region_action_region_ref( const push_region_action & );
inline void push_region_action_region_ref( const push_region_action &, const region & );
inline uint32 push_region_action_target_region_resume_type( const push_region_action & );
inline void push_region_action_target_region_resume_type( const push_region_action &, uint32 );
inline uint32 push_region_action_current_region_resume_type( const push_region_action & );
inline void push_region_action_current_region_resume_type( const push_region_action &, uint32 );

// cls type pop_region_action

inline pop_region_action pop_region_action_new( block * p_memory );
inline void pop_region_action_construct( const pop_region_action & ptr );
inline void pop_region_action_destroy( const pop_region_action & ptr );
inline void pop_region_action_delete( const pop_region_action & ptr );
inline uint32 pop_region_action_type( const pop_region_action & );
inline void pop_region_action_type( const pop_region_action &, uint32 );
inline const region pop_region_action_region_ref( const pop_region_action & );
inline void pop_region_action_region_ref( const pop_region_action &, const region & );

// cls type start_layer_action

inline start_layer_action start_layer_action_new( block * p_memory );
inline void start_layer_action_construct( const start_layer_action & ptr );
inline void start_layer_action_destroy( const start_layer_action & ptr );
inline void start_layer_action_delete( const start_layer_action & ptr );
inline uint32 start_layer_action_type( const start_layer_action & );
inline void start_layer_action_type( const start_layer_action &, uint32 );
inline void start_layer_action_layer_name( const start_layer_action & , char * p_string, unsigned int len);
inline void start_layer_action_layer_name( const start_layer_action &, const char * );

// cls type stop_layer_action

inline stop_layer_action stop_layer_action_new( block * p_memory );
inline void stop_layer_action_construct( const stop_layer_action & ptr );
inline void stop_layer_action_destroy( const stop_layer_action & ptr );
inline void stop_layer_action_delete( const stop_layer_action & ptr );
inline uint32 stop_layer_action_type( const stop_layer_action & );
inline void stop_layer_action_type( const stop_layer_action &, uint32 );
inline void stop_layer_action_layer_name( const stop_layer_action & , char * p_string, unsigned int len);
inline void stop_layer_action_layer_name( const stop_layer_action &, const char * );

// cls type rand_state_action

inline rand_state_action rand_state_action_new( block * p_memory );
inline void rand_state_action_construct( const rand_state_action & ptr );
inline void rand_state_action_destroy( const rand_state_action & ptr );
inline void rand_state_action_delete( const rand_state_action & ptr );
inline uint32 rand_state_action_type( const rand_state_action & );
inline void rand_state_action_type( const rand_state_action &, uint32 );
inline const state rand_state_action_state_ref( const rand_state_action & );
inline void rand_state_action_state_ref( const rand_state_action &, const state & );

// cls type audio_format

inline audio_format audio_format_new( block * p_memory );
inline void audio_format_construct( const audio_format & ptr );
inline void audio_format_destroy( const audio_format & ptr );
inline void audio_format_delete( const audio_format & ptr );
inline uint32 audio_format_encoding( const audio_format & );
inline void audio_format_encoding( const audio_format &, uint32 );
inline uint32 audio_format_channels( const audio_format & );
inline void audio_format_channels( const audio_format &, uint32 );
inline uint32 audio_format_bit_resolution( const audio_format & );
inline void audio_format_bit_resolution( const audio_format &, uint32 );
inline uint32 audio_format_sampling_rate( const audio_format & );
inline void audio_format_sampling_rate( const audio_format &, uint32 );

// cls type tempo_track

inline tempo_track tempo_track_new( block * p_memory );
inline void tempo_track_construct( const tempo_track & ptr );
inline void tempo_track_destroy( const tempo_track & ptr );
inline void tempo_track_delete( const tempo_track & ptr );
inline float tempo_track_bpm( const tempo_track & );
inline void tempo_track_bpm( const tempo_track &, float );
inline float tempo_track_start_beat( const tempo_track & );
inline void tempo_track_start_beat( const tempo_track &, float );
inline uint32 tempo_track_time_sig_numerator( const tempo_track & );
inline void tempo_track_time_sig_numerator( const tempo_track &, uint32 );
inline uint32 tempo_track_time_sig_denominator( const tempo_track & );
inline void tempo_track_time_sig_denominator( const tempo_track &, uint32 );

// cls type sequence_event

inline sequence_event sequence_event_new( block * p_memory );
inline void sequence_event_construct( const sequence_event & ptr );
inline void sequence_event_destroy( const sequence_event & ptr );
inline void sequence_event_delete( const sequence_event & ptr );
inline uint32 sequence_event_type( const sequence_event & );
inline void sequence_event_type( const sequence_event &, uint32 );

// cls type beat_set

inline beat_set beat_set_new( block * p_memory );
inline void beat_set_construct( const beat_set & ptr );
inline void beat_set_destroy( const beat_set & ptr );
inline void beat_set_delete( const beat_set & ptr );
inline const float_array beat_set_beats( const beat_set & );
inline void beat_set_beats( const beat_set &, const float_array );

// cls type action

inline action action_new( block * p_memory );
inline void action_construct( const action & ptr );
inline void action_destroy( const action & ptr );
inline void action_delete( const action & ptr );
inline uint32 action_type( const action & );
inline void action_type( const action &, uint32 );

//
// type safe dereferencing functions
//
inline void group_ref_construct( const group_ref & ptr );
inline void group_ref_destroy( const group_ref & ptr );
inline group deref( const group_ref & ptr );
inline void rsd_file_ref_construct( const rsd_file_ref & ptr );
inline void rsd_file_ref_destroy( const rsd_file_ref & ptr );
inline rsd_file deref( const rsd_file_ref & ptr );
inline void sequence_event_ref_construct( const sequence_event_ref & ptr );
inline void sequence_event_ref_destroy( const sequence_event_ref & ptr );
inline sequence_event deref( const sequence_event_ref & ptr );
inline void stream_ref_construct( const stream_ref & ptr );
inline void stream_ref_destroy( const stream_ref & ptr );
inline stream deref( const stream_ref & ptr );
inline void clip_ref_construct( const clip_ref & ptr );
inline void clip_ref_destroy( const clip_ref & ptr );
inline clip deref( const clip_ref & ptr );
inline void region_ref_construct( const region_ref & ptr );
inline void region_ref_destroy( const region_ref & ptr );
inline region deref( const region_ref & ptr );
inline void state_ref_construct( const state_ref & ptr );
inline void state_ref_destroy( const state_ref & ptr );
inline state deref( const state_ref & ptr );
inline void action_ref_construct( const action_ref & ptr );
inline void action_ref_destroy( const action_ref & ptr );
inline action deref( const action_ref & ptr );
inline void event_matrix_ref_construct( const event_matrix_ref & ptr );
inline void event_matrix_ref_destroy( const event_matrix_ref & ptr );
inline event_matrix deref( const event_matrix_ref & ptr );
inline void layer_ref_construct( const layer_ref & ptr );
inline void layer_ref_destroy( const layer_ref & ptr );
inline layer deref( const layer_ref & ptr );
inline void sequence_ref_construct( const sequence_ref & ptr );
inline void sequence_ref_destroy( const sequence_ref & ptr );
inline sequence deref( const sequence_ref & ptr );

//
// array manipulation functions
//
inline group_array group_array_new( block * );
inline group_array group_array_delete( const group_array & );
inline void group_array_construct( const group_array & );
inline void group_array_destroy( const group_array & );
inline unsigned int group_array_num_items( const group_array &);
inline void group_array_remove_item( const group_array &, unsigned int item);
inline const group group_array_item_at( const group_array & ptr, unsigned int index );
inline const group group_array_add_item( const group_array &);

inline fade_transition_array fade_transition_array_new( block * );
inline fade_transition_array fade_transition_array_delete( const fade_transition_array & );
inline void fade_transition_array_construct( const fade_transition_array & );
inline void fade_transition_array_destroy( const fade_transition_array & );
inline unsigned int fade_transition_array_num_items( const fade_transition_array &);
inline void fade_transition_array_remove_item( const fade_transition_array &, unsigned int item);
inline const fade_transition fade_transition_array_item_at( const fade_transition_array & ptr, unsigned int index );
inline const fade_transition fade_transition_array_add_item( const fade_transition_array &);

inline stitch_transition_array stitch_transition_array_new( block * );
inline stitch_transition_array stitch_transition_array_delete( const stitch_transition_array & );
inline void stitch_transition_array_construct( const stitch_transition_array & );
inline void stitch_transition_array_destroy( const stitch_transition_array & );
inline unsigned int stitch_transition_array_num_items( const stitch_transition_array &);
inline void stitch_transition_array_remove_item( const stitch_transition_array &, unsigned int item);
inline const stitch_transition stitch_transition_array_item_at( const stitch_transition_array & ptr, unsigned int index );
inline const stitch_transition stitch_transition_array_add_item( const stitch_transition_array &);

inline event_array event_array_new( block * );
inline event_array event_array_delete( const event_array & );
inline void event_array_construct( const event_array & );
inline void event_array_destroy( const event_array & );
inline unsigned int event_array_num_items( const event_array &);
inline void event_array_remove_item( const event_array &, unsigned int item);
inline const event event_array_item_at( const event_array & ptr, unsigned int index );
inline const event event_array_add_item( const event_array &);

inline event_matrix_array event_matrix_array_new( block * );
inline event_matrix_array event_matrix_array_delete( const event_matrix_array & );
inline void event_matrix_array_construct( const event_matrix_array & );
inline void event_matrix_array_destroy( const event_matrix_array & );
inline unsigned int event_matrix_array_num_items( const event_matrix_array &);
inline void event_matrix_array_remove_item( const event_matrix_array &, unsigned int item);
inline const event_matrix event_matrix_array_item_at( const event_matrix_array & ptr, unsigned int index );
inline const event_matrix event_matrix_array_add_item( const event_matrix_array &);

inline state_array state_array_new( block * );
inline state_array state_array_delete( const state_array & );
inline void state_array_construct( const state_array & );
inline void state_array_destroy( const state_array & );
inline unsigned int state_array_num_items( const state_array &);
inline void state_array_remove_item( const state_array &, unsigned int item);
inline const state state_array_item_at( const state_array & ptr, unsigned int index );
inline const state state_array_add_item( const state_array &);

inline rsd_file_array rsd_file_array_new( block * );
inline rsd_file_array rsd_file_array_delete( const rsd_file_array & );
inline void rsd_file_array_construct( const rsd_file_array & );
inline void rsd_file_array_destroy( const rsd_file_array & );
inline unsigned int rsd_file_array_num_items( const rsd_file_array &);
inline void rsd_file_array_remove_item( const rsd_file_array &, unsigned int item);
inline const rsd_file rsd_file_array_item_at( const rsd_file_array & ptr, unsigned int index );
inline const rsd_file rsd_file_array_add_item( const rsd_file_array &);

inline stream_array stream_array_new( block * );
inline stream_array stream_array_delete( const stream_array & );
inline void stream_array_construct( const stream_array & );
inline void stream_array_destroy( const stream_array & );
inline unsigned int stream_array_num_items( const stream_array &);
inline void stream_array_remove_item( const stream_array &, unsigned int item);
inline const stream stream_array_item_at( const stream_array & ptr, unsigned int index );
inline const stream stream_array_add_item( const stream_array &);

inline clip_array clip_array_new( block * );
inline clip_array clip_array_delete( const clip_array & );
inline void clip_array_construct( const clip_array & );
inline void clip_array_destroy( const clip_array & );
inline unsigned int clip_array_num_items( const clip_array &);
inline void clip_array_remove_item( const clip_array &, unsigned int item);
inline const clip clip_array_item_at( const clip_array & ptr, unsigned int index );
inline const clip clip_array_add_item( const clip_array &);

inline region_array region_array_new( block * );
inline region_array region_array_delete( const region_array & );
inline void region_array_construct( const region_array & );
inline void region_array_destroy( const region_array & );
inline unsigned int region_array_num_items( const region_array &);
inline void region_array_remove_item( const region_array &, unsigned int item);
inline const region region_array_item_at( const region_array & ptr, unsigned int index );
inline const region region_array_add_item( const region_array &);

inline sequence_array sequence_array_new( block * );
inline sequence_array sequence_array_delete( const sequence_array & );
inline void sequence_array_construct( const sequence_array & );
inline void sequence_array_destroy( const sequence_array & );
inline unsigned int sequence_array_num_items( const sequence_array &);
inline void sequence_array_remove_item( const sequence_array &, unsigned int item);
inline const sequence sequence_array_item_at( const sequence_array & ptr, unsigned int index );
inline const sequence sequence_array_add_item( const sequence_array &);

inline layer_array layer_array_new( block * );
inline layer_array layer_array_delete( const layer_array & );
inline void layer_array_construct( const layer_array & );
inline void layer_array_destroy( const layer_array & );
inline unsigned int layer_array_num_items( const layer_array &);
inline void layer_array_remove_item( const layer_array &, unsigned int item);
inline const layer layer_array_item_at( const layer_array & ptr, unsigned int index );
inline const layer layer_array_add_item( const layer_array &);

inline event_clip_array event_clip_array_new( block * );
inline event_clip_array event_clip_array_delete( const event_clip_array & );
inline void event_clip_array_construct( const event_clip_array & );
inline void event_clip_array_destroy( const event_clip_array & );
inline unsigned int event_clip_array_num_items( const event_clip_array &);
inline void event_clip_array_remove_item( const event_clip_array &, unsigned int item);
inline const event_clip event_clip_array_item_at( const event_clip_array & ptr, unsigned int index );
inline const event_clip event_clip_array_add_item( const event_clip_array &);

inline event_stream_array event_stream_array_new( block * );
inline event_stream_array event_stream_array_delete( const event_stream_array & );
inline void event_stream_array_construct( const event_stream_array & );
inline void event_stream_array_destroy( const event_stream_array & );
inline unsigned int event_stream_array_num_items( const event_stream_array &);
inline void event_stream_array_remove_item( const event_stream_array &, unsigned int item);
inline const event_stream event_stream_array_item_at( const event_stream_array & ptr, unsigned int index );
inline const event_stream event_stream_array_add_item( const event_stream_array &);

inline event_silence_array event_silence_array_new( block * );
inline event_silence_array event_silence_array_delete( const event_silence_array & );
inline void event_silence_array_construct( const event_silence_array & );
inline void event_silence_array_destroy( const event_silence_array & );
inline unsigned int event_silence_array_num_items( const event_silence_array &);
inline void event_silence_array_remove_item( const event_silence_array &, unsigned int item);
inline const event_silence event_silence_array_item_at( const event_silence_array & ptr, unsigned int index );
inline const event_silence event_silence_array_add_item( const event_silence_array &);

inline event_var_volume_array event_var_volume_array_new( block * );
inline event_var_volume_array event_var_volume_array_delete( const event_var_volume_array & );
inline void event_var_volume_array_construct( const event_var_volume_array & );
inline void event_var_volume_array_destroy( const event_var_volume_array & );
inline unsigned int event_var_volume_array_num_items( const event_var_volume_array &);
inline void event_var_volume_array_remove_item( const event_var_volume_array &, unsigned int item);
inline const event_var_volume event_var_volume_array_item_at( const event_var_volume_array & ptr, unsigned int index );
inline const event_var_volume event_var_volume_array_add_item( const event_var_volume_array &);

inline event_var_pitch_array event_var_pitch_array_new( block * );
inline event_var_pitch_array event_var_pitch_array_delete( const event_var_pitch_array & );
inline void event_var_pitch_array_construct( const event_var_pitch_array & );
inline void event_var_pitch_array_destroy( const event_var_pitch_array & );
inline unsigned int event_var_pitch_array_num_items( const event_var_pitch_array &);
inline void event_var_pitch_array_remove_item( const event_var_pitch_array &, unsigned int item);
inline const event_var_pitch event_var_pitch_array_item_at( const event_var_pitch_array & ptr, unsigned int index );
inline const event_var_pitch event_var_pitch_array_add_item( const event_var_pitch_array &);

inline event_var_volume_rand_min_array event_var_volume_rand_min_array_new( block * );
inline event_var_volume_rand_min_array event_var_volume_rand_min_array_delete( const event_var_volume_rand_min_array & );
inline void event_var_volume_rand_min_array_construct( const event_var_volume_rand_min_array & );
inline void event_var_volume_rand_min_array_destroy( const event_var_volume_rand_min_array & );
inline unsigned int event_var_volume_rand_min_array_num_items( const event_var_volume_rand_min_array &);
inline void event_var_volume_rand_min_array_remove_item( const event_var_volume_rand_min_array &, unsigned int item);
inline const event_var_volume_rand_min event_var_volume_rand_min_array_item_at( const event_var_volume_rand_min_array & ptr, unsigned int index );
inline const event_var_volume_rand_min event_var_volume_rand_min_array_add_item( const event_var_volume_rand_min_array &);

inline event_var_volume_rand_max_array event_var_volume_rand_max_array_new( block * );
inline event_var_volume_rand_max_array event_var_volume_rand_max_array_delete( const event_var_volume_rand_max_array & );
inline void event_var_volume_rand_max_array_construct( const event_var_volume_rand_max_array & );
inline void event_var_volume_rand_max_array_destroy( const event_var_volume_rand_max_array & );
inline unsigned int event_var_volume_rand_max_array_num_items( const event_var_volume_rand_max_array &);
inline void event_var_volume_rand_max_array_remove_item( const event_var_volume_rand_max_array &, unsigned int item);
inline const event_var_volume_rand_max event_var_volume_rand_max_array_item_at( const event_var_volume_rand_max_array & ptr, unsigned int index );
inline const event_var_volume_rand_max event_var_volume_rand_max_array_add_item( const event_var_volume_rand_max_array &);

inline event_var_pitch_rand_min_array event_var_pitch_rand_min_array_new( block * );
inline event_var_pitch_rand_min_array event_var_pitch_rand_min_array_delete( const event_var_pitch_rand_min_array & );
inline void event_var_pitch_rand_min_array_construct( const event_var_pitch_rand_min_array & );
inline void event_var_pitch_rand_min_array_destroy( const event_var_pitch_rand_min_array & );
inline unsigned int event_var_pitch_rand_min_array_num_items( const event_var_pitch_rand_min_array &);
inline void event_var_pitch_rand_min_array_remove_item( const event_var_pitch_rand_min_array &, unsigned int item);
inline const event_var_pitch_rand_min event_var_pitch_rand_min_array_item_at( const event_var_pitch_rand_min_array & ptr, unsigned int index );
inline const event_var_pitch_rand_min event_var_pitch_rand_min_array_add_item( const event_var_pitch_rand_min_array &);

inline event_var_pitch_rand_max_array event_var_pitch_rand_max_array_new( block * );
inline event_var_pitch_rand_max_array event_var_pitch_rand_max_array_delete( const event_var_pitch_rand_max_array & );
inline void event_var_pitch_rand_max_array_construct( const event_var_pitch_rand_max_array & );
inline void event_var_pitch_rand_max_array_destroy( const event_var_pitch_rand_max_array & );
inline unsigned int event_var_pitch_rand_max_array_num_items( const event_var_pitch_rand_max_array &);
inline void event_var_pitch_rand_max_array_remove_item( const event_var_pitch_rand_max_array &, unsigned int item);
inline const event_var_pitch_rand_max event_var_pitch_rand_max_array_item_at( const event_var_pitch_rand_max_array & ptr, unsigned int index );
inline const event_var_pitch_rand_max event_var_pitch_rand_max_array_add_item( const event_var_pitch_rand_max_array &);

inline event_var_aux_gain_array event_var_aux_gain_array_new( block * );
inline event_var_aux_gain_array event_var_aux_gain_array_delete( const event_var_aux_gain_array & );
inline void event_var_aux_gain_array_construct( const event_var_aux_gain_array & );
inline void event_var_aux_gain_array_destroy( const event_var_aux_gain_array & );
inline unsigned int event_var_aux_gain_array_num_items( const event_var_aux_gain_array &);
inline void event_var_aux_gain_array_remove_item( const event_var_aux_gain_array &, unsigned int item);
inline const event_var_aux_gain event_var_aux_gain_array_item_at( const event_var_aux_gain_array & ptr, unsigned int index );
inline const event_var_aux_gain event_var_aux_gain_array_add_item( const event_var_aux_gain_array &);

inline event_var_positional_array event_var_positional_array_new( block * );
inline event_var_positional_array event_var_positional_array_delete( const event_var_positional_array & );
inline void event_var_positional_array_construct( const event_var_positional_array & );
inline void event_var_positional_array_destroy( const event_var_positional_array & );
inline unsigned int event_var_positional_array_num_items( const event_var_positional_array &);
inline void event_var_positional_array_remove_item( const event_var_positional_array &, unsigned int item);
inline const event_var_positional event_var_positional_array_item_at( const event_var_positional_array & ptr, unsigned int index );
inline const event_var_positional event_var_positional_array_add_item( const event_var_positional_array &);

inline event_var_pos_fall_off_array event_var_pos_fall_off_array_new( block * );
inline event_var_pos_fall_off_array event_var_pos_fall_off_array_delete( const event_var_pos_fall_off_array & );
inline void event_var_pos_fall_off_array_construct( const event_var_pos_fall_off_array & );
inline void event_var_pos_fall_off_array_destroy( const event_var_pos_fall_off_array & );
inline unsigned int event_var_pos_fall_off_array_num_items( const event_var_pos_fall_off_array &);
inline void event_var_pos_fall_off_array_remove_item( const event_var_pos_fall_off_array &, unsigned int item);
inline const event_var_pos_fall_off event_var_pos_fall_off_array_item_at( const event_var_pos_fall_off_array & ptr, unsigned int index );
inline const event_var_pos_fall_off event_var_pos_fall_off_array_add_item( const event_var_pos_fall_off_array &);

inline event_var_pos_dist_min_array event_var_pos_dist_min_array_new( block * );
inline event_var_pos_dist_min_array event_var_pos_dist_min_array_delete( const event_var_pos_dist_min_array & );
inline void event_var_pos_dist_min_array_construct( const event_var_pos_dist_min_array & );
inline void event_var_pos_dist_min_array_destroy( const event_var_pos_dist_min_array & );
inline unsigned int event_var_pos_dist_min_array_num_items( const event_var_pos_dist_min_array &);
inline void event_var_pos_dist_min_array_remove_item( const event_var_pos_dist_min_array &, unsigned int item);
inline const event_var_pos_dist_min event_var_pos_dist_min_array_item_at( const event_var_pos_dist_min_array & ptr, unsigned int index );
inline const event_var_pos_dist_min event_var_pos_dist_min_array_add_item( const event_var_pos_dist_min_array &);

inline event_var_pos_dist_max_array event_var_pos_dist_max_array_new( block * );
inline event_var_pos_dist_max_array event_var_pos_dist_max_array_delete( const event_var_pos_dist_max_array & );
inline void event_var_pos_dist_max_array_construct( const event_var_pos_dist_max_array & );
inline void event_var_pos_dist_max_array_destroy( const event_var_pos_dist_max_array & );
inline unsigned int event_var_pos_dist_max_array_num_items( const event_var_pos_dist_max_array &);
inline void event_var_pos_dist_max_array_remove_item( const event_var_pos_dist_max_array &, unsigned int item);
inline const event_var_pos_dist_max event_var_pos_dist_max_array_item_at( const event_var_pos_dist_max_array & ptr, unsigned int index );
inline const event_var_pos_dist_max event_var_pos_dist_max_array_add_item( const event_var_pos_dist_max_array &);

inline event_callback_array event_callback_array_new( block * );
inline event_callback_array event_callback_array_delete( const event_callback_array & );
inline void event_callback_array_construct( const event_callback_array & );
inline void event_callback_array_destroy( const event_callback_array & );
inline unsigned int event_callback_array_num_items( const event_callback_array &);
inline void event_callback_array_remove_item( const event_callback_array &, unsigned int item);
inline const event_callback event_callback_array_item_at( const event_callback_array & ptr, unsigned int index );
inline const event_callback event_callback_array_add_item( const event_callback_array &);

inline event_logic_and_array event_logic_and_array_new( block * );
inline event_logic_and_array event_logic_and_array_delete( const event_logic_and_array & );
inline void event_logic_and_array_construct( const event_logic_and_array & );
inline void event_logic_and_array_destroy( const event_logic_and_array & );
inline unsigned int event_logic_and_array_num_items( const event_logic_and_array &);
inline void event_logic_and_array_remove_item( const event_logic_and_array &, unsigned int item);
inline const event_logic_and event_logic_and_array_item_at( const event_logic_and_array & ptr, unsigned int index );
inline const event_logic_and event_logic_and_array_add_item( const event_logic_and_array &);

inline event_logic_or_array event_logic_or_array_new( block * );
inline event_logic_or_array event_logic_or_array_delete( const event_logic_or_array & );
inline void event_logic_or_array_construct( const event_logic_or_array & );
inline void event_logic_or_array_destroy( const event_logic_or_array & );
inline unsigned int event_logic_or_array_num_items( const event_logic_or_array &);
inline void event_logic_or_array_remove_item( const event_logic_or_array &, unsigned int item);
inline const event_logic_or event_logic_or_array_item_at( const event_logic_or_array & ptr, unsigned int index );
inline const event_logic_or event_logic_or_array_add_item( const event_logic_or_array &);

inline event_logic_repeat_array event_logic_repeat_array_new( block * );
inline event_logic_repeat_array event_logic_repeat_array_delete( const event_logic_repeat_array & );
inline void event_logic_repeat_array_construct( const event_logic_repeat_array & );
inline void event_logic_repeat_array_destroy( const event_logic_repeat_array & );
inline unsigned int event_logic_repeat_array_num_items( const event_logic_repeat_array &);
inline void event_logic_repeat_array_remove_item( const event_logic_repeat_array &, unsigned int item);
inline const event_logic_repeat event_logic_repeat_array_item_at( const event_logic_repeat_array & ptr, unsigned int index );
inline const event_logic_repeat event_logic_repeat_array_add_item( const event_logic_repeat_array &);

inline play_region_action_array play_region_action_array_new( block * );
inline play_region_action_array play_region_action_array_delete( const play_region_action_array & );
inline void play_region_action_array_construct( const play_region_action_array & );
inline void play_region_action_array_destroy( const play_region_action_array & );
inline unsigned int play_region_action_array_num_items( const play_region_action_array &);
inline void play_region_action_array_remove_item( const play_region_action_array &, unsigned int item);
inline const play_region_action play_region_action_array_item_at( const play_region_action_array & ptr, unsigned int index );
inline const play_region_action play_region_action_array_add_item( const play_region_action_array &);

inline push_region_action_array push_region_action_array_new( block * );
inline push_region_action_array push_region_action_array_delete( const push_region_action_array & );
inline void push_region_action_array_construct( const push_region_action_array & );
inline void push_region_action_array_destroy( const push_region_action_array & );
inline unsigned int push_region_action_array_num_items( const push_region_action_array &);
inline void push_region_action_array_remove_item( const push_region_action_array &, unsigned int item);
inline const push_region_action push_region_action_array_item_at( const push_region_action_array & ptr, unsigned int index );
inline const push_region_action push_region_action_array_add_item( const push_region_action_array &);

inline pop_region_action_array pop_region_action_array_new( block * );
inline pop_region_action_array pop_region_action_array_delete( const pop_region_action_array & );
inline void pop_region_action_array_construct( const pop_region_action_array & );
inline void pop_region_action_array_destroy( const pop_region_action_array & );
inline unsigned int pop_region_action_array_num_items( const pop_region_action_array &);
inline void pop_region_action_array_remove_item( const pop_region_action_array &, unsigned int item);
inline const pop_region_action pop_region_action_array_item_at( const pop_region_action_array & ptr, unsigned int index );
inline const pop_region_action pop_region_action_array_add_item( const pop_region_action_array &);

inline start_layer_action_array start_layer_action_array_new( block * );
inline start_layer_action_array start_layer_action_array_delete( const start_layer_action_array & );
inline void start_layer_action_array_construct( const start_layer_action_array & );
inline void start_layer_action_array_destroy( const start_layer_action_array & );
inline unsigned int start_layer_action_array_num_items( const start_layer_action_array &);
inline void start_layer_action_array_remove_item( const start_layer_action_array &, unsigned int item);
inline const start_layer_action start_layer_action_array_item_at( const start_layer_action_array & ptr, unsigned int index );
inline const start_layer_action start_layer_action_array_add_item( const start_layer_action_array &);

inline stop_layer_action_array stop_layer_action_array_new( block * );
inline stop_layer_action_array stop_layer_action_array_delete( const stop_layer_action_array & );
inline void stop_layer_action_array_construct( const stop_layer_action_array & );
inline void stop_layer_action_array_destroy( const stop_layer_action_array & );
inline unsigned int stop_layer_action_array_num_items( const stop_layer_action_array &);
inline void stop_layer_action_array_remove_item( const stop_layer_action_array &, unsigned int item);
inline const stop_layer_action stop_layer_action_array_item_at( const stop_layer_action_array & ptr, unsigned int index );
inline const stop_layer_action stop_layer_action_array_add_item( const stop_layer_action_array &);

inline rand_state_action_array rand_state_action_array_new( block * );
inline rand_state_action_array rand_state_action_array_delete( const rand_state_action_array & );
inline void rand_state_action_array_construct( const rand_state_action_array & );
inline void rand_state_action_array_destroy( const rand_state_action_array & );
inline unsigned int rand_state_action_array_num_items( const rand_state_action_array &);
inline void rand_state_action_array_remove_item( const rand_state_action_array &, unsigned int item);
inline const rand_state_action rand_state_action_array_item_at( const rand_state_action_array & ptr, unsigned int index );
inline const rand_state_action rand_state_action_array_add_item( const rand_state_action_array &);

inline stream_ref_array stream_ref_array_new( block * );
inline stream_ref_array stream_ref_array_delete( const stream_ref_array & );
inline void stream_ref_array_construct( const stream_ref_array & );
inline void stream_ref_array_destroy( const stream_ref_array & );
inline unsigned int stream_ref_array_num_items( const stream_ref_array &);
inline void stream_ref_array_remove_item( const stream_ref_array &, unsigned int item);
inline const stream stream_ref_array_item_at( const stream_ref_array & ptr, unsigned int index );
inline void stream_ref_array_add_item( const stream_ref_array &, const stream & ptr_item);

inline clip_ref_array clip_ref_array_new( block * );
inline clip_ref_array clip_ref_array_delete( const clip_ref_array & );
inline void clip_ref_array_construct( const clip_ref_array & );
inline void clip_ref_array_destroy( const clip_ref_array & );
inline unsigned int clip_ref_array_num_items( const clip_ref_array &);
inline void clip_ref_array_remove_item( const clip_ref_array &, unsigned int item);
inline const clip clip_ref_array_item_at( const clip_ref_array & ptr, unsigned int index );
inline void clip_ref_array_add_item( const clip_ref_array &, const clip & ptr_item);

inline region_ref_array region_ref_array_new( block * );
inline region_ref_array region_ref_array_delete( const region_ref_array & );
inline void region_ref_array_construct( const region_ref_array & );
inline void region_ref_array_destroy( const region_ref_array & );
inline unsigned int region_ref_array_num_items( const region_ref_array &);
inline void region_ref_array_remove_item( const region_ref_array &, unsigned int item);
inline const region region_ref_array_item_at( const region_ref_array & ptr, unsigned int index );
inline void region_ref_array_add_item( const region_ref_array &, const region & ptr_item);

inline state_ref_array state_ref_array_new( block * );
inline state_ref_array state_ref_array_delete( const state_ref_array & );
inline void state_ref_array_construct( const state_ref_array & );
inline void state_ref_array_destroy( const state_ref_array & );
inline unsigned int state_ref_array_num_items( const state_ref_array &);
inline void state_ref_array_remove_item( const state_ref_array &, unsigned int item);
inline const state state_ref_array_item_at( const state_ref_array & ptr, unsigned int index );
inline void state_ref_array_add_item( const state_ref_array &, const state & ptr_item);

inline action_ref_array action_ref_array_new( block * );
inline action_ref_array action_ref_array_delete( const action_ref_array & );
inline void action_ref_array_construct( const action_ref_array & );
inline void action_ref_array_destroy( const action_ref_array & );
inline unsigned int action_ref_array_num_items( const action_ref_array &);
inline void action_ref_array_remove_item( const action_ref_array &, unsigned int item);
inline const action action_ref_array_item_at( const action_ref_array & ptr, unsigned int index );
inline void action_ref_array_add_item( const action_ref_array &, const action & ptr_item);

inline action_ref_array_array action_ref_array_array_new( block * );
inline action_ref_array_array action_ref_array_array_delete( const action_ref_array_array & );
inline void action_ref_array_array_construct( const action_ref_array_array & );
inline void action_ref_array_array_destroy( const action_ref_array_array & );
inline unsigned int action_ref_array_array_num_items( const action_ref_array_array &);
inline void action_ref_array_array_remove_item( const action_ref_array_array &, unsigned int item);
inline const action_ref_array action_ref_array_array_item_at( const action_ref_array_array & ptr, unsigned int index );
inline const action_ref_array action_ref_array_array_add_item( const action_ref_array_array &);

inline string_array string_array_new( block * );
inline string_array string_array_delete( const string_array & );
inline void string_array_construct( const string_array & );
inline void string_array_destroy( const string_array & );
inline unsigned int string_array_num_items( const string_array &);
inline void string_array_remove_item( const string_array &, unsigned int item);
inline void string_array_item_at( const string_array & ptr, unsigned int index, char * p_string, unsigned int len );
inline void string_array_item_at( const string_array & ptr, unsigned int index, const char * p_new_val );
inline void string_array_add_item( const string_array &, const char * p_string );

inline layer_ref_array layer_ref_array_new( block * );
inline layer_ref_array layer_ref_array_delete( const layer_ref_array & );
inline void layer_ref_array_construct( const layer_ref_array & );
inline void layer_ref_array_destroy( const layer_ref_array & );
inline unsigned int layer_ref_array_num_items( const layer_ref_array &);
inline void layer_ref_array_remove_item( const layer_ref_array &, unsigned int item);
inline const layer layer_ref_array_item_at( const layer_ref_array & ptr, unsigned int index );
inline void layer_ref_array_add_item( const layer_ref_array &, const layer & ptr_item);

inline float_array float_array_new( block * );
inline float_array float_array_delete( const float_array & );
inline void float_array_construct( const float_array & );
inline void float_array_destroy( const float_array & );
inline unsigned int float_array_num_items( const float_array &);
inline void float_array_remove_item( const float_array &, unsigned int item);
inline const float float_array_item_at( const float_array & ptr, unsigned int index );
inline void float_array_add_item( const float_array &, float item);

inline sequence_event_ref_array sequence_event_ref_array_new( block * );
inline sequence_event_ref_array sequence_event_ref_array_delete( const sequence_event_ref_array & );
inline void sequence_event_ref_array_construct( const sequence_event_ref_array & );
inline void sequence_event_ref_array_destroy( const sequence_event_ref_array & );
inline unsigned int sequence_event_ref_array_num_items( const sequence_event_ref_array &);
inline void sequence_event_ref_array_remove_item( const sequence_event_ref_array &, unsigned int item);
inline const sequence_event sequence_event_ref_array_item_at( const sequence_event_ref_array & ptr, unsigned int index );
inline void sequence_event_ref_array_add_item( const sequence_event_ref_array &, const sequence_event & ptr_item);


//
// class attribute accessor definitions
//

// cls type comp

inline comp comp_new( block * p_memory )
{
    comp ptr = (comp) block_alloc( p_memory, 1248, "comp" ) ;
    comp_construct( ptr );
    return ptr;
}
inline void comp_construct( const comp & ptr )
{
    uint32_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    uint32_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
    uint32_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 64 ) );
    group_array_construct( pointer_templ< _group_array>( ptr.memory( ), ptr.offset( ) + 96 ) );
    fade_transition_array_construct( pointer_templ< _fade_transition_array>( ptr.memory( ), ptr.offset( ) + 128 ) );
    stitch_transition_array_construct( pointer_templ< _stitch_transition_array>( ptr.memory( ), ptr.offset( ) + 160 ) );
    event_array_construct( pointer_templ< _event_array>( ptr.memory( ), ptr.offset( ) + 192 ) );
    event_matrix_array_construct( pointer_templ< _event_matrix_array>( ptr.memory( ), ptr.offset( ) + 224 ) );
    state_array_construct( pointer_templ< _state_array>( ptr.memory( ), ptr.offset( ) + 256 ) );
    rsd_file_array_construct( pointer_templ< _rsd_file_array>( ptr.memory( ), ptr.offset( ) + 288 ) );
    stream_array_construct( pointer_templ< _stream_array>( ptr.memory( ), ptr.offset( ) + 320 ) );
    clip_array_construct( pointer_templ< _clip_array>( ptr.memory( ), ptr.offset( ) + 352 ) );
    region_array_construct( pointer_templ< _region_array>( ptr.memory( ), ptr.offset( ) + 384 ) );
    sequence_array_construct( pointer_templ< _sequence_array>( ptr.memory( ), ptr.offset( ) + 416 ) );
    layer_array_construct( pointer_templ< _layer_array>( ptr.memory( ), ptr.offset( ) + 448 ) );
    event_clip_array_construct( pointer_templ< _event_clip_array>( ptr.memory( ), ptr.offset( ) + 480 ) );
    event_stream_array_construct( pointer_templ< _event_stream_array>( ptr.memory( ), ptr.offset( ) + 512 ) );
    event_silence_array_construct( pointer_templ< _event_silence_array>( ptr.memory( ), ptr.offset( ) + 544 ) );
    event_var_volume_array_construct( pointer_templ< _event_var_volume_array>( ptr.memory( ), ptr.offset( ) + 576 ) );
    event_var_pitch_array_construct( pointer_templ< _event_var_pitch_array>( ptr.memory( ), ptr.offset( ) + 608 ) );
    event_var_volume_rand_min_array_construct( pointer_templ< _event_var_volume_rand_min_array>( ptr.memory( ), ptr.offset( ) + 640 ) );
    event_var_volume_rand_max_array_construct( pointer_templ< _event_var_volume_rand_max_array>( ptr.memory( ), ptr.offset( ) + 672 ) );
    event_var_pitch_rand_min_array_construct( pointer_templ< _event_var_pitch_rand_min_array>( ptr.memory( ), ptr.offset( ) + 704 ) );
    event_var_pitch_rand_max_array_construct( pointer_templ< _event_var_pitch_rand_max_array>( ptr.memory( ), ptr.offset( ) + 736 ) );
    event_var_aux_gain_array_construct( pointer_templ< _event_var_aux_gain_array>( ptr.memory( ), ptr.offset( ) + 768 ) );
    event_var_positional_array_construct( pointer_templ< _event_var_positional_array>( ptr.memory( ), ptr.offset( ) + 800 ) );
    event_var_pos_fall_off_array_construct( pointer_templ< _event_var_pos_fall_off_array>( ptr.memory( ), ptr.offset( ) + 832 ) );
    event_var_pos_dist_min_array_construct( pointer_templ< _event_var_pos_dist_min_array>( ptr.memory( ), ptr.offset( ) + 864 ) );
    event_var_pos_dist_max_array_construct( pointer_templ< _event_var_pos_dist_max_array>( ptr.memory( ), ptr.offset( ) + 896 ) );
    event_callback_array_construct( pointer_templ< _event_callback_array>( ptr.memory( ), ptr.offset( ) + 928 ) );
    event_logic_and_array_construct( pointer_templ< _event_logic_and_array>( ptr.memory( ), ptr.offset( ) + 960 ) );
    event_logic_or_array_construct( pointer_templ< _event_logic_or_array>( ptr.memory( ), ptr.offset( ) + 992 ) );
    event_logic_repeat_array_construct( pointer_templ< _event_logic_repeat_array>( ptr.memory( ), ptr.offset( ) + 1024 ) );
    play_region_action_array_construct( pointer_templ< _play_region_action_array>( ptr.memory( ), ptr.offset( ) + 1056 ) );
    push_region_action_array_construct( pointer_templ< _push_region_action_array>( ptr.memory( ), ptr.offset( ) + 1088 ) );
    pop_region_action_array_construct( pointer_templ< _pop_region_action_array>( ptr.memory( ), ptr.offset( ) + 1120 ) );
    start_layer_action_array_construct( pointer_templ< _start_layer_action_array>( ptr.memory( ), ptr.offset( ) + 1152 ) );
    stop_layer_action_array_construct( pointer_templ< _stop_layer_action_array>( ptr.memory( ), ptr.offset( ) + 1184 ) );
    rand_state_action_array_construct( pointer_templ< _rand_state_action_array>( ptr.memory( ), ptr.offset( ) + 1216 ) );
}
inline void comp_destroy( const comp & ptr )
{
    uint32_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    uint32_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
    uint32_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 64 ) );
    group_array_destroy( pointer_templ< _group_array>( ptr.memory( ), ptr.offset( ) + 96 ) );
    fade_transition_array_destroy( pointer_templ< _fade_transition_array>( ptr.memory( ), ptr.offset( ) + 128 ) );
    stitch_transition_array_destroy( pointer_templ< _stitch_transition_array>( ptr.memory( ), ptr.offset( ) + 160 ) );
    event_array_destroy( pointer_templ< _event_array>( ptr.memory( ), ptr.offset( ) + 192 ) );
    event_matrix_array_destroy( pointer_templ< _event_matrix_array>( ptr.memory( ), ptr.offset( ) + 224 ) );
    state_array_destroy( pointer_templ< _state_array>( ptr.memory( ), ptr.offset( ) + 256 ) );
    rsd_file_array_destroy( pointer_templ< _rsd_file_array>( ptr.memory( ), ptr.offset( ) + 288 ) );
    stream_array_destroy( pointer_templ< _stream_array>( ptr.memory( ), ptr.offset( ) + 320 ) );
    clip_array_destroy( pointer_templ< _clip_array>( ptr.memory( ), ptr.offset( ) + 352 ) );
    region_array_destroy( pointer_templ< _region_array>( ptr.memory( ), ptr.offset( ) + 384 ) );
    sequence_array_destroy( pointer_templ< _sequence_array>( ptr.memory( ), ptr.offset( ) + 416 ) );
    layer_array_destroy( pointer_templ< _layer_array>( ptr.memory( ), ptr.offset( ) + 448 ) );
    event_clip_array_destroy( pointer_templ< _event_clip_array>( ptr.memory( ), ptr.offset( ) + 480 ) );
    event_stream_array_destroy( pointer_templ< _event_stream_array>( ptr.memory( ), ptr.offset( ) + 512 ) );
    event_silence_array_destroy( pointer_templ< _event_silence_array>( ptr.memory( ), ptr.offset( ) + 544 ) );
    event_var_volume_array_destroy( pointer_templ< _event_var_volume_array>( ptr.memory( ), ptr.offset( ) + 576 ) );
    event_var_pitch_array_destroy( pointer_templ< _event_var_pitch_array>( ptr.memory( ), ptr.offset( ) + 608 ) );
    event_var_volume_rand_min_array_destroy( pointer_templ< _event_var_volume_rand_min_array>( ptr.memory( ), ptr.offset( ) + 640 ) );
    event_var_volume_rand_max_array_destroy( pointer_templ< _event_var_volume_rand_max_array>( ptr.memory( ), ptr.offset( ) + 672 ) );
    event_var_pitch_rand_min_array_destroy( pointer_templ< _event_var_pitch_rand_min_array>( ptr.memory( ), ptr.offset( ) + 704 ) );
    event_var_pitch_rand_max_array_destroy( pointer_templ< _event_var_pitch_rand_max_array>( ptr.memory( ), ptr.offset( ) + 736 ) );
    event_var_aux_gain_array_destroy( pointer_templ< _event_var_aux_gain_array>( ptr.memory( ), ptr.offset( ) + 768 ) );
    event_var_positional_array_destroy( pointer_templ< _event_var_positional_array>( ptr.memory( ), ptr.offset( ) + 800 ) );
    event_var_pos_fall_off_array_destroy( pointer_templ< _event_var_pos_fall_off_array>( ptr.memory( ), ptr.offset( ) + 832 ) );
    event_var_pos_dist_min_array_destroy( pointer_templ< _event_var_pos_dist_min_array>( ptr.memory( ), ptr.offset( ) + 864 ) );
    event_var_pos_dist_max_array_destroy( pointer_templ< _event_var_pos_dist_max_array>( ptr.memory( ), ptr.offset( ) + 896 ) );
    event_callback_array_destroy( pointer_templ< _event_callback_array>( ptr.memory( ), ptr.offset( ) + 928 ) );
    event_logic_and_array_destroy( pointer_templ< _event_logic_and_array>( ptr.memory( ), ptr.offset( ) + 960 ) );
    event_logic_or_array_destroy( pointer_templ< _event_logic_or_array>( ptr.memory( ), ptr.offset( ) + 992 ) );
    event_logic_repeat_array_destroy( pointer_templ< _event_logic_repeat_array>( ptr.memory( ), ptr.offset( ) + 1024 ) );
    play_region_action_array_destroy( pointer_templ< _play_region_action_array>( ptr.memory( ), ptr.offset( ) + 1056 ) );
    push_region_action_array_destroy( pointer_templ< _push_region_action_array>( ptr.memory( ), ptr.offset( ) + 1088 ) );
    pop_region_action_array_destroy( pointer_templ< _pop_region_action_array>( ptr.memory( ), ptr.offset( ) + 1120 ) );
    start_layer_action_array_destroy( pointer_templ< _start_layer_action_array>( ptr.memory( ), ptr.offset( ) + 1152 ) );
    stop_layer_action_array_destroy( pointer_templ< _stop_layer_action_array>( ptr.memory( ), ptr.offset( ) + 1184 ) );
    rand_state_action_array_destroy( pointer_templ< _rand_state_action_array>( ptr.memory( ), ptr.offset( ) + 1216 ) );
}
inline void comp_delete( const comp & ptr )
{
    comp_destroy( ptr );
    block_free( ptr, 1248 );
}
inline uint32 comp_sound_memory_max( const comp & ptr)
{
    return uint32_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
}
inline void comp_sound_memory_max( const comp & ptr, uint32 value )
{
    uint32_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 0 ), value );
}
inline uint32 comp_cache_memory_max( const comp & ptr)
{
    return uint32_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void comp_cache_memory_max( const comp & ptr, uint32 value )
{
    uint32_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 32 ), value );
}
inline uint32 comp_stream_size_min( const comp & ptr)
{
    return uint32_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 64 ) );
}
inline void comp_stream_size_min( const comp & ptr, uint32 value )
{
    uint32_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 64 ), value );
}
inline const group_array comp_root_groups( const comp & ptr)
{
    return pointer_templ< _group_array>( ptr.memory( ), ptr.offset( ) + 96 );
}
inline const fade_transition_array comp_fade_transitions( const comp & ptr)
{
    return pointer_templ< _fade_transition_array>( ptr.memory( ), ptr.offset( ) + 128 );
}
inline const stitch_transition_array comp_stitch_transitions( const comp & ptr)
{
    return pointer_templ< _stitch_transition_array>( ptr.memory( ), ptr.offset( ) + 160 );
}
inline const event_array comp_events( const comp & ptr)
{
    return pointer_templ< _event_array>( ptr.memory( ), ptr.offset( ) + 192 );
}
inline const event_matrix_array comp_event_matricies( const comp & ptr)
{
    return pointer_templ< _event_matrix_array>( ptr.memory( ), ptr.offset( ) + 224 );
}
inline const state_array comp_states( const comp & ptr)
{
    return pointer_templ< _state_array>( ptr.memory( ), ptr.offset( ) + 256 );
}
inline const rsd_file_array comp_rsd_files( const comp & ptr)
{
    return pointer_templ< _rsd_file_array>( ptr.memory( ), ptr.offset( ) + 288 );
}
inline const stream_array comp_streams( const comp & ptr)
{
    return pointer_templ< _stream_array>( ptr.memory( ), ptr.offset( ) + 320 );
}
inline const clip_array comp_clips( const comp & ptr)
{
    return pointer_templ< _clip_array>( ptr.memory( ), ptr.offset( ) + 352 );
}
inline const region_array comp_regions( const comp & ptr)
{
    return pointer_templ< _region_array>( ptr.memory( ), ptr.offset( ) + 384 );
}
inline const sequence_array comp_sequences( const comp & ptr)
{
    return pointer_templ< _sequence_array>( ptr.memory( ), ptr.offset( ) + 416 );
}
inline const layer_array comp_layers( const comp & ptr)
{
    return pointer_templ< _layer_array>( ptr.memory( ), ptr.offset( ) + 448 );
}
inline const event_clip_array comp_event_clip_array( const comp & ptr)
{
    return pointer_templ< _event_clip_array>( ptr.memory( ), ptr.offset( ) + 480 );
}
inline const event_stream_array comp_event_stream_array( const comp & ptr)
{
    return pointer_templ< _event_stream_array>( ptr.memory( ), ptr.offset( ) + 512 );
}
inline const event_silence_array comp_event_silence_array( const comp & ptr)
{
    return pointer_templ< _event_silence_array>( ptr.memory( ), ptr.offset( ) + 544 );
}
inline const event_var_volume_array comp_event_var_volume_array( const comp & ptr)
{
    return pointer_templ< _event_var_volume_array>( ptr.memory( ), ptr.offset( ) + 576 );
}
inline const event_var_pitch_array comp_event_var_pitch_array( const comp & ptr)
{
    return pointer_templ< _event_var_pitch_array>( ptr.memory( ), ptr.offset( ) + 608 );
}
inline const event_var_volume_rand_min_array comp_event_var_volume_rand_min_array( const comp & ptr)
{
    return pointer_templ< _event_var_volume_rand_min_array>( ptr.memory( ), ptr.offset( ) + 640 );
}
inline const event_var_volume_rand_max_array comp_event_var_volume_rand_max_array( const comp & ptr)
{
    return pointer_templ< _event_var_volume_rand_max_array>( ptr.memory( ), ptr.offset( ) + 672 );
}
inline const event_var_pitch_rand_min_array comp_event_var_pitch_rand_min_array( const comp & ptr)
{
    return pointer_templ< _event_var_pitch_rand_min_array>( ptr.memory( ), ptr.offset( ) + 704 );
}
inline const event_var_pitch_rand_max_array comp_event_var_pitch_rand_max_array( const comp & ptr)
{
    return pointer_templ< _event_var_pitch_rand_max_array>( ptr.memory( ), ptr.offset( ) + 736 );
}
inline const event_var_aux_gain_array comp_event_var_aux_gain_array( const comp & ptr)
{
    return pointer_templ< _event_var_aux_gain_array>( ptr.memory( ), ptr.offset( ) + 768 );
}
inline const event_var_positional_array comp_event_var_positional_array( const comp & ptr)
{
    return pointer_templ< _event_var_positional_array>( ptr.memory( ), ptr.offset( ) + 800 );
}
inline const event_var_pos_fall_off_array comp_event_var_pos_fall_off_array( const comp & ptr)
{
    return pointer_templ< _event_var_pos_fall_off_array>( ptr.memory( ), ptr.offset( ) + 832 );
}
inline const event_var_pos_dist_min_array comp_event_var_pos_dist_min_array( const comp & ptr)
{
    return pointer_templ< _event_var_pos_dist_min_array>( ptr.memory( ), ptr.offset( ) + 864 );
}
inline const event_var_pos_dist_max_array comp_event_var_pos_dist_max_array( const comp & ptr)
{
    return pointer_templ< _event_var_pos_dist_max_array>( ptr.memory( ), ptr.offset( ) + 896 );
}
inline const event_callback_array comp_event_callback_array( const comp & ptr)
{
    return pointer_templ< _event_callback_array>( ptr.memory( ), ptr.offset( ) + 928 );
}
inline const event_logic_and_array comp_event_logic_and_array( const comp & ptr)
{
    return pointer_templ< _event_logic_and_array>( ptr.memory( ), ptr.offset( ) + 960 );
}
inline const event_logic_or_array comp_event_logic_or_array( const comp & ptr)
{
    return pointer_templ< _event_logic_or_array>( ptr.memory( ), ptr.offset( ) + 992 );
}
inline const event_logic_repeat_array comp_event_logic_repeat_array( const comp & ptr)
{
    return pointer_templ< _event_logic_repeat_array>( ptr.memory( ), ptr.offset( ) + 1024 );
}
inline const play_region_action_array comp_play_region_action_array( const comp & ptr)
{
    return pointer_templ< _play_region_action_array>( ptr.memory( ), ptr.offset( ) + 1056 );
}
inline const push_region_action_array comp_push_region_action_array( const comp & ptr)
{
    return pointer_templ< _push_region_action_array>( ptr.memory( ), ptr.offset( ) + 1088 );
}
inline const pop_region_action_array comp_pop_region_action_array( const comp & ptr)
{
    return pointer_templ< _pop_region_action_array>( ptr.memory( ), ptr.offset( ) + 1120 );
}
inline const start_layer_action_array comp_start_layer_action_array( const comp & ptr)
{
    return pointer_templ< _start_layer_action_array>( ptr.memory( ), ptr.offset( ) + 1152 );
}
inline const stop_layer_action_array comp_stop_layer_action_array( const comp & ptr)
{
    return pointer_templ< _stop_layer_action_array>( ptr.memory( ), ptr.offset( ) + 1184 );
}
inline const rand_state_action_array comp_rand_state_action_array( const comp & ptr)
{
    return pointer_templ< _rand_state_action_array>( ptr.memory( ), ptr.offset( ) + 1216 );
}

// cls type group

inline group group_new( block * p_memory )
{
    group ptr = (group) block_alloc( p_memory, 224, "group" ) ;
    group_construct( ptr );
    return ptr;
}
inline void group_construct( const group & ptr )
{
    string_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    group_array_construct( pointer_templ< _group_array>( ptr.memory( ), ptr.offset( ) + 32 ) );
    stream_ref_array_construct( pointer_templ< _stream_ref_array>( ptr.memory( ), ptr.offset( ) + 64 ) );
    clip_ref_array_construct( pointer_templ< _clip_ref_array>( ptr.memory( ), ptr.offset( ) + 96 ) );
    region_ref_array_construct( pointer_templ< _region_ref_array>( ptr.memory( ), ptr.offset( ) + 128 ) );
    group_ref_construct( pointer_templ< _group_ref>( ptr.memory( ), ptr.offset( ) + 160 ) );
    uint32_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 192 ) );
}
inline void group_destroy( const group & ptr )
{
    string_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    group_array_destroy( pointer_templ< _group_array>( ptr.memory( ), ptr.offset( ) + 32 ) );
    stream_ref_array_destroy( pointer_templ< _stream_ref_array>( ptr.memory( ), ptr.offset( ) + 64 ) );
    clip_ref_array_destroy( pointer_templ< _clip_ref_array>( ptr.memory( ), ptr.offset( ) + 96 ) );
    region_ref_array_destroy( pointer_templ< _region_ref_array>( ptr.memory( ), ptr.offset( ) + 128 ) );
    group_ref_destroy( pointer_templ< _group_ref>( ptr.memory( ), ptr.offset( ) + 160 ) );
    uint32_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 192 ) );
}
inline void group_delete( const group & ptr )
{
    group_destroy( ptr );
    block_free( ptr, 224 );
}
inline void group_name( const group & ptr, char * p_string, unsigned int len)
{
    string_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 0 ), p_string, len );
}
inline void group_name( const group & ptr, const char * p_string )
{
    string_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 0 ), p_string );
}
inline const group_array group_children( const group & ptr)
{
    return pointer_templ< _group_array>( ptr.memory( ), ptr.offset( ) + 32 );
}
inline const stream_ref_array group_stream_refs( const group & ptr)
{
    return pointer_templ< _stream_ref_array>( ptr.memory( ), ptr.offset( ) + 64 );
}
inline const clip_ref_array group_clip_refs( const group & ptr)
{
    return pointer_templ< _clip_ref_array>( ptr.memory( ), ptr.offset( ) + 96 );
}
inline const region_ref_array group_region_refs( const group & ptr)
{
    return pointer_templ< _region_ref_array>( ptr.memory( ), ptr.offset( ) + 128 );
}
inline const group group_parent_ref( const group & ptr)
{
    return (group) ref_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 160 ) );
}
inline void group_parent_ref( const group & ptr, const group & ptr_item )
{
    ref_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 160 ), ptr_item );
}
inline uint32 group_tree_depth( const group & ptr)
{
    return uint32_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 192 ) );
}
inline void group_tree_depth( const group & ptr, uint32 value )
{
    uint32_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 192 ), value );
}

// cls type fade_transition

inline fade_transition fade_transition_new( block * p_memory )
{
    fade_transition ptr = (fade_transition) block_alloc( p_memory, 224, "fade_transition" ) ;
    fade_transition_construct( ptr );
    return ptr;
}
inline void fade_transition_construct( const fade_transition & ptr )
{
    region_ref_construct( pointer_templ< _region_ref>( ptr.memory( ), ptr.offset( ) + 0 ) );
    region_ref_construct( pointer_templ< _region_ref>( ptr.memory( ), ptr.offset( ) + 32 ) );
    float_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 64 ) );
    float_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 96 ) );
    float_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 128 ) );
    float_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 160 ) );
    beat_set_construct( pointer_templ< _beat_set>( ptr.memory( ), ptr.offset( ) + 192 ) );
}
inline void fade_transition_destroy( const fade_transition & ptr )
{
    region_ref_destroy( pointer_templ< _region_ref>( ptr.memory( ), ptr.offset( ) + 0 ) );
    region_ref_destroy( pointer_templ< _region_ref>( ptr.memory( ), ptr.offset( ) + 32 ) );
    float_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 64 ) );
    float_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 96 ) );
    float_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 128 ) );
    float_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 160 ) );
    beat_set_destroy( pointer_templ< _beat_set>( ptr.memory( ), ptr.offset( ) + 192 ) );
}
inline void fade_transition_delete( const fade_transition & ptr )
{
    fade_transition_destroy( ptr );
    block_free( ptr, 224 );
}
inline const region fade_transition_source_region_ref( const fade_transition & ptr)
{
    return (region) ref_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
}
inline void fade_transition_source_region_ref( const fade_transition & ptr, const region & ptr_item )
{
    ref_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 0 ), ptr_item );
}
inline const region fade_transition_target_region_ref( const fade_transition & ptr)
{
    return (region) ref_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void fade_transition_target_region_ref( const fade_transition & ptr, const region & ptr_item )
{
    ref_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 32 ), ptr_item );
}
inline float fade_transition_source_time( const fade_transition & ptr)
{
    return float_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 64 ) );
}
inline void fade_transition_source_time( const fade_transition & ptr, float value )
{
    float_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 64 ), value );
}
inline float fade_transition_source_start( const fade_transition & ptr)
{
    return float_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 96 ) );
}
inline void fade_transition_source_start( const fade_transition & ptr, float value )
{
    float_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 96 ), value );
}
inline float fade_transition_target_time( const fade_transition & ptr)
{
    return float_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 128 ) );
}
inline void fade_transition_target_time( const fade_transition & ptr, float value )
{
    float_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 128 ), value );
}
inline float fade_transition_target_start( const fade_transition & ptr)
{
    return float_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 160 ) );
}
inline void fade_transition_target_start( const fade_transition & ptr, float value )
{
    float_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 160 ), value );
}
inline const beat_set fade_transition_beat_set( const fade_transition & ptr)
{
    return pointer_templ< _beat_set>( ptr.memory( ), ptr.offset( ) + 192 );
}

// cls type stitch_transition

inline stitch_transition stitch_transition_new( block * p_memory )
{
    stitch_transition ptr = (stitch_transition) block_alloc( p_memory, 96, "stitch_transition" ) ;
    stitch_transition_construct( ptr );
    return ptr;
}
inline void stitch_transition_construct( const stitch_transition & ptr )
{
    region_ref_construct( pointer_templ< _region_ref>( ptr.memory( ), ptr.offset( ) + 0 ) );
    region_ref_construct( pointer_templ< _region_ref>( ptr.memory( ), ptr.offset( ) + 32 ) );
    region_ref_construct( pointer_templ< _region_ref>( ptr.memory( ), ptr.offset( ) + 64 ) );
}
inline void stitch_transition_destroy( const stitch_transition & ptr )
{
    region_ref_destroy( pointer_templ< _region_ref>( ptr.memory( ), ptr.offset( ) + 0 ) );
    region_ref_destroy( pointer_templ< _region_ref>( ptr.memory( ), ptr.offset( ) + 32 ) );
    region_ref_destroy( pointer_templ< _region_ref>( ptr.memory( ), ptr.offset( ) + 64 ) );
}
inline void stitch_transition_delete( const stitch_transition & ptr )
{
    stitch_transition_destroy( ptr );
    block_free( ptr, 96 );
}
inline const region stitch_transition_source_region_ref( const stitch_transition & ptr)
{
    return (region) ref_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
}
inline void stitch_transition_source_region_ref( const stitch_transition & ptr, const region & ptr_item )
{
    ref_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 0 ), ptr_item );
}
inline const region stitch_transition_target_region_ref( const stitch_transition & ptr)
{
    return (region) ref_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void stitch_transition_target_region_ref( const stitch_transition & ptr, const region & ptr_item )
{
    ref_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 32 ), ptr_item );
}
inline const region stitch_transition_transition_region_ref( const stitch_transition & ptr)
{
    return (region) ref_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 64 ) );
}
inline void stitch_transition_transition_region_ref( const stitch_transition & ptr, const region & ptr_item )
{
    ref_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 64 ), ptr_item );
}

// cls type event

inline event event_new( block * p_memory )
{
    event ptr = (event) block_alloc( p_memory, 96, "event" ) ;
    event_construct( ptr );
    return ptr;
}
inline void event_construct( const event & ptr )
{
    string_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    action_ref_array_array_construct( pointer_templ< _action_ref_array_array>( ptr.memory( ), ptr.offset( ) + 32 ) );
    event_matrix_ref_construct( pointer_templ< _event_matrix_ref>( ptr.memory( ), ptr.offset( ) + 64 ) );
}
inline void event_destroy( const event & ptr )
{
    string_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    action_ref_array_array_destroy( pointer_templ< _action_ref_array_array>( ptr.memory( ), ptr.offset( ) + 32 ) );
    event_matrix_ref_destroy( pointer_templ< _event_matrix_ref>( ptr.memory( ), ptr.offset( ) + 64 ) );
}
inline void event_delete( const event & ptr )
{
    event_destroy( ptr );
    block_free( ptr, 96 );
}
inline void event_name( const event & ptr, char * p_string, unsigned int len)
{
    string_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 0 ), p_string, len );
}
inline void event_name( const event & ptr, const char * p_string )
{
    string_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 0 ), p_string );
}
inline const action_ref_array_array event_action_arrays( const event & ptr)
{
    return pointer_templ< _action_ref_array_array>( ptr.memory( ), ptr.offset( ) + 32 );
}
inline const event_matrix event_event_matrix_ref( const event & ptr)
{
    return (event_matrix) ref_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 64 ) );
}
inline void event_event_matrix_ref( const event & ptr, const event_matrix & ptr_item )
{
    ref_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 64 ), ptr_item );
}

// cls type event_matrix

inline event_matrix event_matrix_new( block * p_memory )
{
    event_matrix ptr = (event_matrix) block_alloc( p_memory, 32, "event_matrix" ) ;
    event_matrix_construct( ptr );
    return ptr;
}
inline void event_matrix_construct( const event_matrix & ptr )
{
    state_ref_array_construct( pointer_templ< _state_ref_array>( ptr.memory( ), ptr.offset( ) + 0 ) );
}
inline void event_matrix_destroy( const event_matrix & ptr )
{
    state_ref_array_destroy( pointer_templ< _state_ref_array>( ptr.memory( ), ptr.offset( ) + 0 ) );
}
inline void event_matrix_delete( const event_matrix & ptr )
{
    event_matrix_destroy( ptr );
    block_free( ptr, 32 );
}
inline const state_ref_array event_matrix_state_ref_array( const event_matrix & ptr)
{
    return pointer_templ< _state_ref_array>( ptr.memory( ), ptr.offset( ) + 0 );
}

// cls type state

inline state state_new( block * p_memory )
{
    state ptr = (state) block_alloc( p_memory, 64, "state" ) ;
    state_construct( ptr );
    return ptr;
}
inline void state_construct( const state & ptr )
{
    string_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    string_array_construct( pointer_templ< _string_array>( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void state_destroy( const state & ptr )
{
    string_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    string_array_destroy( pointer_templ< _string_array>( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void state_delete( const state & ptr )
{
    state_destroy( ptr );
    block_free( ptr, 64 );
}
inline void state_name( const state & ptr, char * p_string, unsigned int len)
{
    string_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 0 ), p_string, len );
}
inline void state_name( const state & ptr, const char * p_string )
{
    string_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 0 ), p_string );
}
inline const string_array state_values( const state & ptr)
{
    return pointer_templ< _string_array>( ptr.memory( ), ptr.offset( ) + 32 );
}

// cls type rsd_file

inline rsd_file rsd_file_new( block * p_memory )
{
    rsd_file ptr = (rsd_file) block_alloc( p_memory, 192, "rsd_file" ) ;
    rsd_file_construct( ptr );
    return ptr;
}
inline void rsd_file_construct( const rsd_file & ptr )
{
    string_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    uint32_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
    audio_format_construct( pointer_templ< _audio_format>( ptr.memory( ), ptr.offset( ) + 64 ) );
}
inline void rsd_file_destroy( const rsd_file & ptr )
{
    string_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    uint32_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
    audio_format_destroy( pointer_templ< _audio_format>( ptr.memory( ), ptr.offset( ) + 64 ) );
}
inline void rsd_file_delete( const rsd_file & ptr )
{
    rsd_file_destroy( ptr );
    block_free( ptr, 192 );
}
inline void rsd_file_file_name( const rsd_file & ptr, char * p_string, unsigned int len)
{
    string_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 0 ), p_string, len );
}
inline void rsd_file_file_name( const rsd_file & ptr, const char * p_string )
{
    string_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 0 ), p_string );
}
inline uint32 rsd_file_size( const rsd_file & ptr)
{
    return uint32_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void rsd_file_size( const rsd_file & ptr, uint32 value )
{
    uint32_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 32 ), value );
}
inline const audio_format rsd_file_audio_format( const rsd_file & ptr)
{
    return pointer_templ< _audio_format>( ptr.memory( ), ptr.offset( ) + 64 );
}

// cls type stream

inline stream stream_new( block * p_memory )
{
    stream ptr = (stream) block_alloc( p_memory, 232, "stream" ) ;
    stream_construct( ptr );
    return ptr;
}
inline void stream_construct( const stream & ptr )
{
    string_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    group_ref_construct( pointer_templ< _group_ref>( ptr.memory( ), ptr.offset( ) + 32 ) );
    rsd_file_ref_construct( pointer_templ< _rsd_file_ref>( ptr.memory( ), ptr.offset( ) + 64 ) );
    bool_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 96 ) );
    tempo_track_construct( pointer_templ< _tempo_track>( ptr.memory( ), ptr.offset( ) + 104 ) );
}
inline void stream_destroy( const stream & ptr )
{
    string_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    group_ref_destroy( pointer_templ< _group_ref>( ptr.memory( ), ptr.offset( ) + 32 ) );
    rsd_file_ref_destroy( pointer_templ< _rsd_file_ref>( ptr.memory( ), ptr.offset( ) + 64 ) );
    bool_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 96 ) );
    tempo_track_destroy( pointer_templ< _tempo_track>( ptr.memory( ), ptr.offset( ) + 104 ) );
}
inline void stream_delete( const stream & ptr )
{
    stream_destroy( ptr );
    block_free( ptr, 232 );
}
inline void stream_name( const stream & ptr, char * p_string, unsigned int len)
{
    string_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 0 ), p_string, len );
}
inline void stream_name( const stream & ptr, const char * p_string )
{
    string_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 0 ), p_string );
}
inline const group stream_parent_group_ref( const stream & ptr)
{
    return (group) ref_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void stream_parent_group_ref( const stream & ptr, const group & ptr_item )
{
    ref_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 32 ), ptr_item );
}
inline const rsd_file stream_rsd_file_ref( const stream & ptr)
{
    return (rsd_file) ref_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 64 ) );
}
inline void stream_rsd_file_ref( const stream & ptr, const rsd_file & ptr_item )
{
    ref_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 64 ), ptr_item );
}
inline bool stream_streamed( const stream & ptr)
{
    return bool_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 96 ) );
}
inline void stream_streamed( const stream & ptr, bool value )
{
    bool_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 96 ), value );
}
inline const tempo_track stream_tempo_track( const stream & ptr)
{
    return pointer_templ< _tempo_track>( ptr.memory( ), ptr.offset( ) + 104 );
}

// cls type clip

inline clip clip_new( block * p_memory )
{
    clip ptr = (clip) block_alloc( p_memory, 224, "clip" ) ;
    clip_construct( ptr );
    return ptr;
}
inline void clip_construct( const clip & ptr )
{
    string_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    group_ref_construct( pointer_templ< _group_ref>( ptr.memory( ), ptr.offset( ) + 32 ) );
    rsd_file_ref_construct( pointer_templ< _rsd_file_ref>( ptr.memory( ), ptr.offset( ) + 64 ) );
    tempo_track_construct( pointer_templ< _tempo_track>( ptr.memory( ), ptr.offset( ) + 96 ) );
}
inline void clip_destroy( const clip & ptr )
{
    string_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    group_ref_destroy( pointer_templ< _group_ref>( ptr.memory( ), ptr.offset( ) + 32 ) );
    rsd_file_ref_destroy( pointer_templ< _rsd_file_ref>( ptr.memory( ), ptr.offset( ) + 64 ) );
    tempo_track_destroy( pointer_templ< _tempo_track>( ptr.memory( ), ptr.offset( ) + 96 ) );
}
inline void clip_delete( const clip & ptr )
{
    clip_destroy( ptr );
    block_free( ptr, 224 );
}
inline void clip_name( const clip & ptr, char * p_string, unsigned int len)
{
    string_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 0 ), p_string, len );
}
inline void clip_name( const clip & ptr, const char * p_string )
{
    string_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 0 ), p_string );
}
inline const group clip_parent_group_ref( const clip & ptr)
{
    return (group) ref_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void clip_parent_group_ref( const clip & ptr, const group & ptr_item )
{
    ref_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 32 ), ptr_item );
}
inline const rsd_file clip_rsd_file_ref( const clip & ptr)
{
    return (rsd_file) ref_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 64 ) );
}
inline void clip_rsd_file_ref( const clip & ptr, const rsd_file & ptr_item )
{
    ref_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 64 ), ptr_item );
}
inline const tempo_track clip_tempo_track( const clip & ptr)
{
    return pointer_templ< _tempo_track>( ptr.memory( ), ptr.offset( ) + 96 );
}

// cls type region

inline region region_new( block * p_memory )
{
    region ptr = (region) block_alloc( p_memory, 160, "region" ) ;
    region_construct( ptr );
    return ptr;
}
inline void region_construct( const region & ptr )
{
    string_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    layer_ref_array_construct( pointer_templ< _layer_ref_array>( ptr.memory( ), ptr.offset( ) + 32 ) );
    region_ref_construct( pointer_templ< _region_ref>( ptr.memory( ), ptr.offset( ) + 64 ) );
    group_ref_construct( pointer_templ< _group_ref>( ptr.memory( ), ptr.offset( ) + 96 ) );
    float_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 128 ) );
}
inline void region_destroy( const region & ptr )
{
    string_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    layer_ref_array_destroy( pointer_templ< _layer_ref_array>( ptr.memory( ), ptr.offset( ) + 32 ) );
    region_ref_destroy( pointer_templ< _region_ref>( ptr.memory( ), ptr.offset( ) + 64 ) );
    group_ref_destroy( pointer_templ< _group_ref>( ptr.memory( ), ptr.offset( ) + 96 ) );
    float_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 128 ) );
}
inline void region_delete( const region & ptr )
{
    region_destroy( ptr );
    block_free( ptr, 160 );
}
inline void region_name( const region & ptr, char * p_string, unsigned int len)
{
    string_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 0 ), p_string, len );
}
inline void region_name( const region & ptr, const char * p_string )
{
    string_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 0 ), p_string );
}
inline const layer_ref_array region_layer_refs( const region & ptr)
{
    return pointer_templ< _layer_ref_array>( ptr.memory( ), ptr.offset( ) + 32 );
}
inline const region region_exit_region_ref( const region & ptr)
{
    return (region) ref_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 64 ) );
}
inline void region_exit_region_ref( const region & ptr, const region & ptr_item )
{
    ref_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 64 ), ptr_item );
}
inline const group region_group_ref( const region & ptr)
{
    return (group) ref_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 96 ) );
}
inline void region_group_ref( const region & ptr, const group & ptr_item )
{
    ref_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 96 ), ptr_item );
}
inline float region_volume( const region & ptr)
{
    return float_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 128 ) );
}
inline void region_volume( const region & ptr, float value )
{
    float_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 128 ), value );
}

// cls type sequence

inline sequence sequence_new( block * p_memory )
{
    sequence ptr = (sequence) block_alloc( p_memory, 64, "sequence" ) ;
    sequence_construct( ptr );
    return ptr;
}
inline void sequence_construct( const sequence & ptr )
{
    sequence_event_ref_construct( pointer_templ< _sequence_event_ref>( ptr.memory( ), ptr.offset( ) + 0 ) );
    uint32_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void sequence_destroy( const sequence & ptr )
{
    sequence_event_ref_destroy( pointer_templ< _sequence_event_ref>( ptr.memory( ), ptr.offset( ) + 0 ) );
    uint32_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void sequence_delete( const sequence & ptr )
{
    sequence_destroy( ptr );
    block_free( ptr, 64 );
}
inline const sequence_event sequence_root_event( const sequence & ptr)
{
    return (sequence_event) ref_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
}
inline void sequence_root_event( const sequence & ptr, const sequence_event & ptr_item )
{
    ref_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 0 ), ptr_item );
}
inline uint32 sequence_stack_size( const sequence & ptr)
{
    return uint32_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void sequence_stack_size( const sequence & ptr, uint32 value )
{
    uint32_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 32 ), value );
}

// cls type layer

inline layer layer_new( block * p_memory )
{
    layer ptr = (layer) block_alloc( p_memory, 136, "layer" ) ;
    layer_construct( ptr );
    return ptr;
}
inline void layer_construct( const layer & ptr )
{
    string_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    bool_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
    beat_set_construct( pointer_templ< _beat_set>( ptr.memory( ), ptr.offset( ) + 40 ) );
    sequence_ref_construct( pointer_templ< _sequence_ref>( ptr.memory( ), ptr.offset( ) + 72 ) );
    float_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 104 ) );
}
inline void layer_destroy( const layer & ptr )
{
    string_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    bool_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
    beat_set_destroy( pointer_templ< _beat_set>( ptr.memory( ), ptr.offset( ) + 40 ) );
    sequence_ref_destroy( pointer_templ< _sequence_ref>( ptr.memory( ), ptr.offset( ) + 72 ) );
    float_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 104 ) );
}
inline void layer_delete( const layer & ptr )
{
    layer_destroy( ptr );
    block_free( ptr, 136 );
}
inline void layer_name( const layer & ptr, char * p_string, unsigned int len)
{
    string_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 0 ), p_string, len );
}
inline void layer_name( const layer & ptr, const char * p_string )
{
    string_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 0 ), p_string );
}
inline bool layer_constant( const layer & ptr)
{
    return bool_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void layer_constant( const layer & ptr, bool value )
{
    bool_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 32 ), value );
}
inline const beat_set layer_beat_set( const layer & ptr)
{
    return pointer_templ< _beat_set>( ptr.memory( ), ptr.offset( ) + 40 );
}
inline const sequence layer_sequence_ref( const layer & ptr)
{
    return (sequence) ref_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 72 ) );
}
inline void layer_sequence_ref( const layer & ptr, const sequence & ptr_item )
{
    ref_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 72 ), ptr_item );
}
inline float layer_volume( const layer & ptr)
{
    return float_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 104 ) );
}
inline void layer_volume( const layer & ptr, float value )
{
    float_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 104 ), value );
}

// cls type event_clip

inline event_clip event_clip_new( block * p_memory )
{
    event_clip ptr = (event_clip) block_alloc( p_memory, 64, "event_clip" ) ;
    event_clip_construct( ptr );
    return ptr;
}
inline void event_clip_construct( const event_clip & ptr )
{
    uint32_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    clip_ref_construct( pointer_templ< _clip_ref>( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void event_clip_destroy( const event_clip & ptr )
{
    uint32_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    clip_ref_destroy( pointer_templ< _clip_ref>( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void event_clip_delete( const event_clip & ptr )
{
    event_clip_destroy( ptr );
    block_free( ptr, 64 );
}
inline uint32 event_clip_type( const event_clip & ptr)
{
    return uint32_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
}
inline void event_clip_type( const event_clip & ptr, uint32 value )
{
    uint32_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 0 ), value );
}
inline const clip event_clip_clip_ref( const event_clip & ptr)
{
    return (clip) ref_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void event_clip_clip_ref( const event_clip & ptr, const clip & ptr_item )
{
    ref_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 32 ), ptr_item );
}

// cls type event_stream

inline event_stream event_stream_new( block * p_memory )
{
    event_stream ptr = (event_stream) block_alloc( p_memory, 64, "event_stream" ) ;
    event_stream_construct( ptr );
    return ptr;
}
inline void event_stream_construct( const event_stream & ptr )
{
    uint32_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    stream_ref_construct( pointer_templ< _stream_ref>( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void event_stream_destroy( const event_stream & ptr )
{
    uint32_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    stream_ref_destroy( pointer_templ< _stream_ref>( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void event_stream_delete( const event_stream & ptr )
{
    event_stream_destroy( ptr );
    block_free( ptr, 64 );
}
inline uint32 event_stream_type( const event_stream & ptr)
{
    return uint32_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
}
inline void event_stream_type( const event_stream & ptr, uint32 value )
{
    uint32_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 0 ), value );
}
inline const stream event_stream_stream_ref( const event_stream & ptr)
{
    return (stream) ref_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void event_stream_stream_ref( const event_stream & ptr, const stream & ptr_item )
{
    ref_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 32 ), ptr_item );
}

// cls type event_silence

inline event_silence event_silence_new( block * p_memory )
{
    event_silence ptr = (event_silence) block_alloc( p_memory, 96, "event_silence" ) ;
    event_silence_construct( ptr );
    return ptr;
}
inline void event_silence_construct( const event_silence & ptr )
{
    uint32_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    float_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
    float_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 64 ) );
}
inline void event_silence_destroy( const event_silence & ptr )
{
    uint32_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    float_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
    float_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 64 ) );
}
inline void event_silence_delete( const event_silence & ptr )
{
    event_silence_destroy( ptr );
    block_free( ptr, 96 );
}
inline uint32 event_silence_type( const event_silence & ptr)
{
    return uint32_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
}
inline void event_silence_type( const event_silence & ptr, uint32 value )
{
    uint32_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 0 ), value );
}
inline float event_silence_min_time( const event_silence & ptr)
{
    return float_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void event_silence_min_time( const event_silence & ptr, float value )
{
    float_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 32 ), value );
}
inline float event_silence_max_time( const event_silence & ptr)
{
    return float_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 64 ) );
}
inline void event_silence_max_time( const event_silence & ptr, float value )
{
    float_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 64 ), value );
}

// cls type event_var_volume

inline event_var_volume event_var_volume_new( block * p_memory )
{
    event_var_volume ptr = (event_var_volume) block_alloc( p_memory, 64, "event_var_volume" ) ;
    event_var_volume_construct( ptr );
    return ptr;
}
inline void event_var_volume_construct( const event_var_volume & ptr )
{
    uint32_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    float_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void event_var_volume_destroy( const event_var_volume & ptr )
{
    uint32_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    float_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void event_var_volume_delete( const event_var_volume & ptr )
{
    event_var_volume_destroy( ptr );
    block_free( ptr, 64 );
}
inline uint32 event_var_volume_type( const event_var_volume & ptr)
{
    return uint32_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
}
inline void event_var_volume_type( const event_var_volume & ptr, uint32 value )
{
    uint32_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 0 ), value );
}
inline float event_var_volume_volume( const event_var_volume & ptr)
{
    return float_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void event_var_volume_volume( const event_var_volume & ptr, float value )
{
    float_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 32 ), value );
}

// cls type event_var_pitch

inline event_var_pitch event_var_pitch_new( block * p_memory )
{
    event_var_pitch ptr = (event_var_pitch) block_alloc( p_memory, 64, "event_var_pitch" ) ;
    event_var_pitch_construct( ptr );
    return ptr;
}
inline void event_var_pitch_construct( const event_var_pitch & ptr )
{
    uint32_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    float_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void event_var_pitch_destroy( const event_var_pitch & ptr )
{
    uint32_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    float_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void event_var_pitch_delete( const event_var_pitch & ptr )
{
    event_var_pitch_destroy( ptr );
    block_free( ptr, 64 );
}
inline uint32 event_var_pitch_type( const event_var_pitch & ptr)
{
    return uint32_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
}
inline void event_var_pitch_type( const event_var_pitch & ptr, uint32 value )
{
    uint32_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 0 ), value );
}
inline float event_var_pitch_pitch( const event_var_pitch & ptr)
{
    return float_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void event_var_pitch_pitch( const event_var_pitch & ptr, float value )
{
    float_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 32 ), value );
}

// cls type event_var_volume_rand_min

inline event_var_volume_rand_min event_var_volume_rand_min_new( block * p_memory )
{
    event_var_volume_rand_min ptr = (event_var_volume_rand_min) block_alloc( p_memory, 64, "event_var_volume_rand_min" ) ;
    event_var_volume_rand_min_construct( ptr );
    return ptr;
}
inline void event_var_volume_rand_min_construct( const event_var_volume_rand_min & ptr )
{
    uint32_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    float_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void event_var_volume_rand_min_destroy( const event_var_volume_rand_min & ptr )
{
    uint32_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    float_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void event_var_volume_rand_min_delete( const event_var_volume_rand_min & ptr )
{
    event_var_volume_rand_min_destroy( ptr );
    block_free( ptr, 64 );
}
inline uint32 event_var_volume_rand_min_type( const event_var_volume_rand_min & ptr)
{
    return uint32_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
}
inline void event_var_volume_rand_min_type( const event_var_volume_rand_min & ptr, uint32 value )
{
    uint32_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 0 ), value );
}
inline float event_var_volume_rand_min_volume_rand_min( const event_var_volume_rand_min & ptr)
{
    return float_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void event_var_volume_rand_min_volume_rand_min( const event_var_volume_rand_min & ptr, float value )
{
    float_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 32 ), value );
}

// cls type event_var_volume_rand_max

inline event_var_volume_rand_max event_var_volume_rand_max_new( block * p_memory )
{
    event_var_volume_rand_max ptr = (event_var_volume_rand_max) block_alloc( p_memory, 64, "event_var_volume_rand_max" ) ;
    event_var_volume_rand_max_construct( ptr );
    return ptr;
}
inline void event_var_volume_rand_max_construct( const event_var_volume_rand_max & ptr )
{
    uint32_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    float_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void event_var_volume_rand_max_destroy( const event_var_volume_rand_max & ptr )
{
    uint32_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    float_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void event_var_volume_rand_max_delete( const event_var_volume_rand_max & ptr )
{
    event_var_volume_rand_max_destroy( ptr );
    block_free( ptr, 64 );
}
inline uint32 event_var_volume_rand_max_type( const event_var_volume_rand_max & ptr)
{
    return uint32_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
}
inline void event_var_volume_rand_max_type( const event_var_volume_rand_max & ptr, uint32 value )
{
    uint32_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 0 ), value );
}
inline float event_var_volume_rand_max_volume_rand_max( const event_var_volume_rand_max & ptr)
{
    return float_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void event_var_volume_rand_max_volume_rand_max( const event_var_volume_rand_max & ptr, float value )
{
    float_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 32 ), value );
}

// cls type event_var_pitch_rand_min

inline event_var_pitch_rand_min event_var_pitch_rand_min_new( block * p_memory )
{
    event_var_pitch_rand_min ptr = (event_var_pitch_rand_min) block_alloc( p_memory, 64, "event_var_pitch_rand_min" ) ;
    event_var_pitch_rand_min_construct( ptr );
    return ptr;
}
inline void event_var_pitch_rand_min_construct( const event_var_pitch_rand_min & ptr )
{
    uint32_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    float_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void event_var_pitch_rand_min_destroy( const event_var_pitch_rand_min & ptr )
{
    uint32_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    float_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void event_var_pitch_rand_min_delete( const event_var_pitch_rand_min & ptr )
{
    event_var_pitch_rand_min_destroy( ptr );
    block_free( ptr, 64 );
}
inline uint32 event_var_pitch_rand_min_type( const event_var_pitch_rand_min & ptr)
{
    return uint32_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
}
inline void event_var_pitch_rand_min_type( const event_var_pitch_rand_min & ptr, uint32 value )
{
    uint32_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 0 ), value );
}
inline float event_var_pitch_rand_min_pitch_rand_min( const event_var_pitch_rand_min & ptr)
{
    return float_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void event_var_pitch_rand_min_pitch_rand_min( const event_var_pitch_rand_min & ptr, float value )
{
    float_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 32 ), value );
}

// cls type event_var_pitch_rand_max

inline event_var_pitch_rand_max event_var_pitch_rand_max_new( block * p_memory )
{
    event_var_pitch_rand_max ptr = (event_var_pitch_rand_max) block_alloc( p_memory, 64, "event_var_pitch_rand_max" ) ;
    event_var_pitch_rand_max_construct( ptr );
    return ptr;
}
inline void event_var_pitch_rand_max_construct( const event_var_pitch_rand_max & ptr )
{
    uint32_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    float_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void event_var_pitch_rand_max_destroy( const event_var_pitch_rand_max & ptr )
{
    uint32_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    float_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void event_var_pitch_rand_max_delete( const event_var_pitch_rand_max & ptr )
{
    event_var_pitch_rand_max_destroy( ptr );
    block_free( ptr, 64 );
}
inline uint32 event_var_pitch_rand_max_type( const event_var_pitch_rand_max & ptr)
{
    return uint32_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
}
inline void event_var_pitch_rand_max_type( const event_var_pitch_rand_max & ptr, uint32 value )
{
    uint32_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 0 ), value );
}
inline float event_var_pitch_rand_max_pitch_rand_max( const event_var_pitch_rand_max & ptr)
{
    return float_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void event_var_pitch_rand_max_pitch_rand_max( const event_var_pitch_rand_max & ptr, float value )
{
    float_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 32 ), value );
}

// cls type event_var_aux_gain

inline event_var_aux_gain event_var_aux_gain_new( block * p_memory )
{
    event_var_aux_gain ptr = (event_var_aux_gain) block_alloc( p_memory, 96, "event_var_aux_gain" ) ;
    event_var_aux_gain_construct( ptr );
    return ptr;
}
inline void event_var_aux_gain_construct( const event_var_aux_gain & ptr )
{
    uint32_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    uint32_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
    float_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 64 ) );
}
inline void event_var_aux_gain_destroy( const event_var_aux_gain & ptr )
{
    uint32_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    uint32_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
    float_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 64 ) );
}
inline void event_var_aux_gain_delete( const event_var_aux_gain & ptr )
{
    event_var_aux_gain_destroy( ptr );
    block_free( ptr, 96 );
}
inline uint32 event_var_aux_gain_type( const event_var_aux_gain & ptr)
{
    return uint32_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
}
inline void event_var_aux_gain_type( const event_var_aux_gain & ptr, uint32 value )
{
    uint32_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 0 ), value );
}
inline uint32 event_var_aux_gain_aux_number( const event_var_aux_gain & ptr)
{
    return uint32_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void event_var_aux_gain_aux_number( const event_var_aux_gain & ptr, uint32 value )
{
    uint32_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 32 ), value );
}
inline float event_var_aux_gain_aux_gain( const event_var_aux_gain & ptr)
{
    return float_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 64 ) );
}
inline void event_var_aux_gain_aux_gain( const event_var_aux_gain & ptr, float value )
{
    float_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 64 ), value );
}

// cls type event_var_positional

inline event_var_positional event_var_positional_new( block * p_memory )
{
    event_var_positional ptr = (event_var_positional) block_alloc( p_memory, 40, "event_var_positional" ) ;
    event_var_positional_construct( ptr );
    return ptr;
}
inline void event_var_positional_construct( const event_var_positional & ptr )
{
    uint32_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    bool_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void event_var_positional_destroy( const event_var_positional & ptr )
{
    uint32_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    bool_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void event_var_positional_delete( const event_var_positional & ptr )
{
    event_var_positional_destroy( ptr );
    block_free( ptr, 40 );
}
inline uint32 event_var_positional_type( const event_var_positional & ptr)
{
    return uint32_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
}
inline void event_var_positional_type( const event_var_positional & ptr, uint32 value )
{
    uint32_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 0 ), value );
}
inline bool event_var_positional_positional( const event_var_positional & ptr)
{
    return bool_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void event_var_positional_positional( const event_var_positional & ptr, bool value )
{
    bool_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 32 ), value );
}

// cls type event_var_pos_fall_off

inline event_var_pos_fall_off event_var_pos_fall_off_new( block * p_memory )
{
    event_var_pos_fall_off ptr = (event_var_pos_fall_off) block_alloc( p_memory, 64, "event_var_pos_fall_off" ) ;
    event_var_pos_fall_off_construct( ptr );
    return ptr;
}
inline void event_var_pos_fall_off_construct( const event_var_pos_fall_off & ptr )
{
    uint32_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    float_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void event_var_pos_fall_off_destroy( const event_var_pos_fall_off & ptr )
{
    uint32_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    float_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void event_var_pos_fall_off_delete( const event_var_pos_fall_off & ptr )
{
    event_var_pos_fall_off_destroy( ptr );
    block_free( ptr, 64 );
}
inline uint32 event_var_pos_fall_off_type( const event_var_pos_fall_off & ptr)
{
    return uint32_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
}
inline void event_var_pos_fall_off_type( const event_var_pos_fall_off & ptr, uint32 value )
{
    uint32_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 0 ), value );
}
inline float event_var_pos_fall_off_pos_fall_off( const event_var_pos_fall_off & ptr)
{
    return float_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void event_var_pos_fall_off_pos_fall_off( const event_var_pos_fall_off & ptr, float value )
{
    float_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 32 ), value );
}

// cls type event_var_pos_dist_min

inline event_var_pos_dist_min event_var_pos_dist_min_new( block * p_memory )
{
    event_var_pos_dist_min ptr = (event_var_pos_dist_min) block_alloc( p_memory, 64, "event_var_pos_dist_min" ) ;
    event_var_pos_dist_min_construct( ptr );
    return ptr;
}
inline void event_var_pos_dist_min_construct( const event_var_pos_dist_min & ptr )
{
    uint32_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    float_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void event_var_pos_dist_min_destroy( const event_var_pos_dist_min & ptr )
{
    uint32_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    float_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void event_var_pos_dist_min_delete( const event_var_pos_dist_min & ptr )
{
    event_var_pos_dist_min_destroy( ptr );
    block_free( ptr, 64 );
}
inline uint32 event_var_pos_dist_min_type( const event_var_pos_dist_min & ptr)
{
    return uint32_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
}
inline void event_var_pos_dist_min_type( const event_var_pos_dist_min & ptr, uint32 value )
{
    uint32_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 0 ), value );
}
inline float event_var_pos_dist_min_pos_dist_min( const event_var_pos_dist_min & ptr)
{
    return float_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void event_var_pos_dist_min_pos_dist_min( const event_var_pos_dist_min & ptr, float value )
{
    float_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 32 ), value );
}

// cls type event_var_pos_dist_max

inline event_var_pos_dist_max event_var_pos_dist_max_new( block * p_memory )
{
    event_var_pos_dist_max ptr = (event_var_pos_dist_max) block_alloc( p_memory, 64, "event_var_pos_dist_max" ) ;
    event_var_pos_dist_max_construct( ptr );
    return ptr;
}
inline void event_var_pos_dist_max_construct( const event_var_pos_dist_max & ptr )
{
    uint32_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    float_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void event_var_pos_dist_max_destroy( const event_var_pos_dist_max & ptr )
{
    uint32_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    float_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void event_var_pos_dist_max_delete( const event_var_pos_dist_max & ptr )
{
    event_var_pos_dist_max_destroy( ptr );
    block_free( ptr, 64 );
}
inline uint32 event_var_pos_dist_max_type( const event_var_pos_dist_max & ptr)
{
    return uint32_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
}
inline void event_var_pos_dist_max_type( const event_var_pos_dist_max & ptr, uint32 value )
{
    uint32_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 0 ), value );
}
inline float event_var_pos_dist_max_pos_dist_max( const event_var_pos_dist_max & ptr)
{
    return float_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void event_var_pos_dist_max_pos_dist_max( const event_var_pos_dist_max & ptr, float value )
{
    float_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 32 ), value );
}

// cls type event_callback

inline event_callback event_callback_new( block * p_memory )
{
    event_callback ptr = (event_callback) block_alloc( p_memory, 64, "event_callback" ) ;
    event_callback_construct( ptr );
    return ptr;
}
inline void event_callback_construct( const event_callback & ptr )
{
    uint32_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    string_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void event_callback_destroy( const event_callback & ptr )
{
    uint32_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    string_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void event_callback_delete( const event_callback & ptr )
{
    event_callback_destroy( ptr );
    block_free( ptr, 64 );
}
inline uint32 event_callback_type( const event_callback & ptr)
{
    return uint32_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
}
inline void event_callback_type( const event_callback & ptr, uint32 value )
{
    uint32_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 0 ), value );
}
inline void event_callback_callback_name( const event_callback & ptr, char * p_string, unsigned int len)
{
    string_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 32 ), p_string, len );
}
inline void event_callback_callback_name( const event_callback & ptr, const char * p_string )
{
    string_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 32 ), p_string );
}

// cls type event_logic_and

inline event_logic_and event_logic_and_new( block * p_memory )
{
    event_logic_and ptr = (event_logic_and) block_alloc( p_memory, 64, "event_logic_and" ) ;
    event_logic_and_construct( ptr );
    return ptr;
}
inline void event_logic_and_construct( const event_logic_and & ptr )
{
    uint32_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    sequence_event_ref_array_construct( pointer_templ< _sequence_event_ref_array>( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void event_logic_and_destroy( const event_logic_and & ptr )
{
    uint32_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    sequence_event_ref_array_destroy( pointer_templ< _sequence_event_ref_array>( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void event_logic_and_delete( const event_logic_and & ptr )
{
    event_logic_and_destroy( ptr );
    block_free( ptr, 64 );
}
inline uint32 event_logic_and_type( const event_logic_and & ptr)
{
    return uint32_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
}
inline void event_logic_and_type( const event_logic_and & ptr, uint32 value )
{
    uint32_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 0 ), value );
}
inline const sequence_event_ref_array event_logic_and_events( const event_logic_and & ptr)
{
    return pointer_templ< _sequence_event_ref_array>( ptr.memory( ), ptr.offset( ) + 32 );
}

// cls type event_logic_or

inline event_logic_or event_logic_or_new( block * p_memory )
{
    event_logic_or ptr = (event_logic_or) block_alloc( p_memory, 64, "event_logic_or" ) ;
    event_logic_or_construct( ptr );
    return ptr;
}
inline void event_logic_or_construct( const event_logic_or & ptr )
{
    uint32_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    sequence_event_ref_array_construct( pointer_templ< _sequence_event_ref_array>( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void event_logic_or_destroy( const event_logic_or & ptr )
{
    uint32_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    sequence_event_ref_array_destroy( pointer_templ< _sequence_event_ref_array>( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void event_logic_or_delete( const event_logic_or & ptr )
{
    event_logic_or_destroy( ptr );
    block_free( ptr, 64 );
}
inline uint32 event_logic_or_type( const event_logic_or & ptr)
{
    return uint32_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
}
inline void event_logic_or_type( const event_logic_or & ptr, uint32 value )
{
    uint32_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 0 ), value );
}
inline const sequence_event_ref_array event_logic_or_events( const event_logic_or & ptr)
{
    return pointer_templ< _sequence_event_ref_array>( ptr.memory( ), ptr.offset( ) + 32 );
}

// cls type event_logic_repeat

inline event_logic_repeat event_logic_repeat_new( block * p_memory )
{
    event_logic_repeat ptr = (event_logic_repeat) block_alloc( p_memory, 128, "event_logic_repeat" ) ;
    event_logic_repeat_construct( ptr );
    return ptr;
}
inline void event_logic_repeat_construct( const event_logic_repeat & ptr )
{
    uint32_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    uint32_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
    uint32_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 64 ) );
    sequence_event_ref_construct( pointer_templ< _sequence_event_ref>( ptr.memory( ), ptr.offset( ) + 96 ) );
}
inline void event_logic_repeat_destroy( const event_logic_repeat & ptr )
{
    uint32_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    uint32_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
    uint32_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 64 ) );
    sequence_event_ref_destroy( pointer_templ< _sequence_event_ref>( ptr.memory( ), ptr.offset( ) + 96 ) );
}
inline void event_logic_repeat_delete( const event_logic_repeat & ptr )
{
    event_logic_repeat_destroy( ptr );
    block_free( ptr, 128 );
}
inline uint32 event_logic_repeat_type( const event_logic_repeat & ptr)
{
    return uint32_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
}
inline void event_logic_repeat_type( const event_logic_repeat & ptr, uint32 value )
{
    uint32_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 0 ), value );
}
inline uint32 event_logic_repeat_min_times( const event_logic_repeat & ptr)
{
    return uint32_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void event_logic_repeat_min_times( const event_logic_repeat & ptr, uint32 value )
{
    uint32_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 32 ), value );
}
inline uint32 event_logic_repeat_max_times( const event_logic_repeat & ptr)
{
    return uint32_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 64 ) );
}
inline void event_logic_repeat_max_times( const event_logic_repeat & ptr, uint32 value )
{
    uint32_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 64 ), value );
}
inline const sequence_event event_logic_repeat_event_ref( const event_logic_repeat & ptr)
{
    return (sequence_event) ref_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 96 ) );
}
inline void event_logic_repeat_event_ref( const event_logic_repeat & ptr, const sequence_event & ptr_item )
{
    ref_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 96 ), ptr_item );
}

// cls type play_region_action

inline play_region_action play_region_action_new( block * p_memory )
{
    play_region_action ptr = (play_region_action) block_alloc( p_memory, 96, "play_region_action" ) ;
    play_region_action_construct( ptr );
    return ptr;
}
inline void play_region_action_construct( const play_region_action & ptr )
{
    uint32_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    region_ref_construct( pointer_templ< _region_ref>( ptr.memory( ), ptr.offset( ) + 32 ) );
    uint32_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 64 ) );
}
inline void play_region_action_destroy( const play_region_action & ptr )
{
    uint32_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    region_ref_destroy( pointer_templ< _region_ref>( ptr.memory( ), ptr.offset( ) + 32 ) );
    uint32_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 64 ) );
}
inline void play_region_action_delete( const play_region_action & ptr )
{
    play_region_action_destroy( ptr );
    block_free( ptr, 96 );
}
inline uint32 play_region_action_type( const play_region_action & ptr)
{
    return uint32_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
}
inline void play_region_action_type( const play_region_action & ptr, uint32 value )
{
    uint32_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 0 ), value );
}
inline const region play_region_action_region_ref( const play_region_action & ptr)
{
    return (region) ref_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void play_region_action_region_ref( const play_region_action & ptr, const region & ptr_item )
{
    ref_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 32 ), ptr_item );
}
inline uint32 play_region_action_region_resume_type( const play_region_action & ptr)
{
    return uint32_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 64 ) );
}
inline void play_region_action_region_resume_type( const play_region_action & ptr, uint32 value )
{
    uint32_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 64 ), value );
}

// cls type push_region_action

inline push_region_action push_region_action_new( block * p_memory )
{
    push_region_action ptr = (push_region_action) block_alloc( p_memory, 128, "push_region_action" ) ;
    push_region_action_construct( ptr );
    return ptr;
}
inline void push_region_action_construct( const push_region_action & ptr )
{
    uint32_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    region_ref_construct( pointer_templ< _region_ref>( ptr.memory( ), ptr.offset( ) + 32 ) );
    uint32_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 64 ) );
    uint32_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 96 ) );
}
inline void push_region_action_destroy( const push_region_action & ptr )
{
    uint32_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    region_ref_destroy( pointer_templ< _region_ref>( ptr.memory( ), ptr.offset( ) + 32 ) );
    uint32_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 64 ) );
    uint32_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 96 ) );
}
inline void push_region_action_delete( const push_region_action & ptr )
{
    push_region_action_destroy( ptr );
    block_free( ptr, 128 );
}
inline uint32 push_region_action_type( const push_region_action & ptr)
{
    return uint32_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
}
inline void push_region_action_type( const push_region_action & ptr, uint32 value )
{
    uint32_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 0 ), value );
}
inline const region push_region_action_region_ref( const push_region_action & ptr)
{
    return (region) ref_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void push_region_action_region_ref( const push_region_action & ptr, const region & ptr_item )
{
    ref_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 32 ), ptr_item );
}
inline uint32 push_region_action_target_region_resume_type( const push_region_action & ptr)
{
    return uint32_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 64 ) );
}
inline void push_region_action_target_region_resume_type( const push_region_action & ptr, uint32 value )
{
    uint32_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 64 ), value );
}
inline uint32 push_region_action_current_region_resume_type( const push_region_action & ptr)
{
    return uint32_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 96 ) );
}
inline void push_region_action_current_region_resume_type( const push_region_action & ptr, uint32 value )
{
    uint32_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 96 ), value );
}

// cls type pop_region_action

inline pop_region_action pop_region_action_new( block * p_memory )
{
    pop_region_action ptr = (pop_region_action) block_alloc( p_memory, 64, "pop_region_action" ) ;
    pop_region_action_construct( ptr );
    return ptr;
}
inline void pop_region_action_construct( const pop_region_action & ptr )
{
    uint32_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    region_ref_construct( pointer_templ< _region_ref>( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void pop_region_action_destroy( const pop_region_action & ptr )
{
    uint32_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    region_ref_destroy( pointer_templ< _region_ref>( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void pop_region_action_delete( const pop_region_action & ptr )
{
    pop_region_action_destroy( ptr );
    block_free( ptr, 64 );
}
inline uint32 pop_region_action_type( const pop_region_action & ptr)
{
    return uint32_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
}
inline void pop_region_action_type( const pop_region_action & ptr, uint32 value )
{
    uint32_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 0 ), value );
}
inline const region pop_region_action_region_ref( const pop_region_action & ptr)
{
    return (region) ref_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void pop_region_action_region_ref( const pop_region_action & ptr, const region & ptr_item )
{
    ref_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 32 ), ptr_item );
}

// cls type start_layer_action

inline start_layer_action start_layer_action_new( block * p_memory )
{
    start_layer_action ptr = (start_layer_action) block_alloc( p_memory, 64, "start_layer_action" ) ;
    start_layer_action_construct( ptr );
    return ptr;
}
inline void start_layer_action_construct( const start_layer_action & ptr )
{
    uint32_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    string_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void start_layer_action_destroy( const start_layer_action & ptr )
{
    uint32_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    string_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void start_layer_action_delete( const start_layer_action & ptr )
{
    start_layer_action_destroy( ptr );
    block_free( ptr, 64 );
}
inline uint32 start_layer_action_type( const start_layer_action & ptr)
{
    return uint32_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
}
inline void start_layer_action_type( const start_layer_action & ptr, uint32 value )
{
    uint32_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 0 ), value );
}
inline void start_layer_action_layer_name( const start_layer_action & ptr, char * p_string, unsigned int len)
{
    string_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 32 ), p_string, len );
}
inline void start_layer_action_layer_name( const start_layer_action & ptr, const char * p_string )
{
    string_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 32 ), p_string );
}

// cls type stop_layer_action

inline stop_layer_action stop_layer_action_new( block * p_memory )
{
    stop_layer_action ptr = (stop_layer_action) block_alloc( p_memory, 64, "stop_layer_action" ) ;
    stop_layer_action_construct( ptr );
    return ptr;
}
inline void stop_layer_action_construct( const stop_layer_action & ptr )
{
    uint32_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    string_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void stop_layer_action_destroy( const stop_layer_action & ptr )
{
    uint32_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    string_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void stop_layer_action_delete( const stop_layer_action & ptr )
{
    stop_layer_action_destroy( ptr );
    block_free( ptr, 64 );
}
inline uint32 stop_layer_action_type( const stop_layer_action & ptr)
{
    return uint32_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
}
inline void stop_layer_action_type( const stop_layer_action & ptr, uint32 value )
{
    uint32_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 0 ), value );
}
inline void stop_layer_action_layer_name( const stop_layer_action & ptr, char * p_string, unsigned int len)
{
    string_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 32 ), p_string, len );
}
inline void stop_layer_action_layer_name( const stop_layer_action & ptr, const char * p_string )
{
    string_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 32 ), p_string );
}

// cls type rand_state_action

inline rand_state_action rand_state_action_new( block * p_memory )
{
    rand_state_action ptr = (rand_state_action) block_alloc( p_memory, 64, "rand_state_action" ) ;
    rand_state_action_construct( ptr );
    return ptr;
}
inline void rand_state_action_construct( const rand_state_action & ptr )
{
    uint32_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    state_ref_construct( pointer_templ< _state_ref>( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void rand_state_action_destroy( const rand_state_action & ptr )
{
    uint32_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    state_ref_destroy( pointer_templ< _state_ref>( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void rand_state_action_delete( const rand_state_action & ptr )
{
    rand_state_action_destroy( ptr );
    block_free( ptr, 64 );
}
inline uint32 rand_state_action_type( const rand_state_action & ptr)
{
    return uint32_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
}
inline void rand_state_action_type( const rand_state_action & ptr, uint32 value )
{
    uint32_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 0 ), value );
}
inline const state rand_state_action_state_ref( const rand_state_action & ptr)
{
    return (state) ref_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void rand_state_action_state_ref( const rand_state_action & ptr, const state & ptr_item )
{
    ref_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 32 ), ptr_item );
}

// cls type audio_format

inline audio_format audio_format_new( block * p_memory )
{
    audio_format ptr = (audio_format) block_alloc( p_memory, 128, "audio_format" ) ;
    audio_format_construct( ptr );
    return ptr;
}
inline void audio_format_construct( const audio_format & ptr )
{
    uint32_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    uint32_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
    uint32_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 64 ) );
    uint32_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 96 ) );
}
inline void audio_format_destroy( const audio_format & ptr )
{
    uint32_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    uint32_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
    uint32_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 64 ) );
    uint32_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 96 ) );
}
inline void audio_format_delete( const audio_format & ptr )
{
    audio_format_destroy( ptr );
    block_free( ptr, 128 );
}
inline uint32 audio_format_encoding( const audio_format & ptr)
{
    return uint32_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
}
inline void audio_format_encoding( const audio_format & ptr, uint32 value )
{
    uint32_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 0 ), value );
}
inline uint32 audio_format_channels( const audio_format & ptr)
{
    return uint32_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void audio_format_channels( const audio_format & ptr, uint32 value )
{
    uint32_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 32 ), value );
}
inline uint32 audio_format_bit_resolution( const audio_format & ptr)
{
    return uint32_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 64 ) );
}
inline void audio_format_bit_resolution( const audio_format & ptr, uint32 value )
{
    uint32_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 64 ), value );
}
inline uint32 audio_format_sampling_rate( const audio_format & ptr)
{
    return uint32_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 96 ) );
}
inline void audio_format_sampling_rate( const audio_format & ptr, uint32 value )
{
    uint32_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 96 ), value );
}

// cls type tempo_track

inline tempo_track tempo_track_new( block * p_memory )
{
    tempo_track ptr = (tempo_track) block_alloc( p_memory, 128, "tempo_track" ) ;
    tempo_track_construct( ptr );
    return ptr;
}
inline void tempo_track_construct( const tempo_track & ptr )
{
    float_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    float_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
    uint32_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 64 ) );
    uint32_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 96 ) );
}
inline void tempo_track_destroy( const tempo_track & ptr )
{
    float_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
    float_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
    uint32_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 64 ) );
    uint32_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 96 ) );
}
inline void tempo_track_delete( const tempo_track & ptr )
{
    tempo_track_destroy( ptr );
    block_free( ptr, 128 );
}
inline float tempo_track_bpm( const tempo_track & ptr)
{
    return float_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
}
inline void tempo_track_bpm( const tempo_track & ptr, float value )
{
    float_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 0 ), value );
}
inline float tempo_track_start_beat( const tempo_track & ptr)
{
    return float_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 32 ) );
}
inline void tempo_track_start_beat( const tempo_track & ptr, float value )
{
    float_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 32 ), value );
}
inline uint32 tempo_track_time_sig_numerator( const tempo_track & ptr)
{
    return uint32_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 64 ) );
}
inline void tempo_track_time_sig_numerator( const tempo_track & ptr, uint32 value )
{
    uint32_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 64 ), value );
}
inline uint32 tempo_track_time_sig_denominator( const tempo_track & ptr)
{
    return uint32_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 96 ) );
}
inline void tempo_track_time_sig_denominator( const tempo_track & ptr, uint32 value )
{
    uint32_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 96 ), value );
}

// cls type sequence_event

inline sequence_event sequence_event_new( block * p_memory )
{
    sequence_event ptr = (sequence_event) block_alloc( p_memory, 32, "sequence_event" ) ;
    sequence_event_construct( ptr );
    return ptr;
}
inline void sequence_event_construct( const sequence_event & ptr )
{
    uint32_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
}
inline void sequence_event_destroy( const sequence_event & ptr )
{
    uint32_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
}
inline void sequence_event_delete( const sequence_event & ptr )
{
    sequence_event_destroy( ptr );
    block_free( ptr, 32 );
}
inline uint32 sequence_event_type( const sequence_event & ptr)
{
    return uint32_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
}
inline void sequence_event_type( const sequence_event & ptr, uint32 value )
{
    uint32_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 0 ), value );
}

// cls type beat_set

inline beat_set beat_set_new( block * p_memory )
{
    beat_set ptr = (beat_set) block_alloc( p_memory, 32, "beat_set" ) ;
    beat_set_construct( ptr );
    return ptr;
}
inline void beat_set_construct( const beat_set & ptr )
{
    float_array_construct( pointer_templ< _float_array>( ptr.memory( ), ptr.offset( ) + 0 ) );
}
inline void beat_set_destroy( const beat_set & ptr )
{
    float_array_destroy( pointer_templ< _float_array>( ptr.memory( ), ptr.offset( ) + 0 ) );
}
inline void beat_set_delete( const beat_set & ptr )
{
    beat_set_destroy( ptr );
    block_free( ptr, 32 );
}
inline const float_array beat_set_beats( const beat_set & ptr)
{
    return pointer_templ< _float_array>( ptr.memory( ), ptr.offset( ) + 0 );
}

// cls type action

inline action action_new( block * p_memory )
{
    action ptr = (action) block_alloc( p_memory, 32, "action" ) ;
    action_construct( ptr );
    return ptr;
}
inline void action_construct( const action & ptr )
{
    uint32_instance_construct( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
}
inline void action_destroy( const action & ptr )
{
    uint32_instance_destroy( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
}
inline void action_delete( const action & ptr )
{
    action_destroy( ptr );
    block_free( ptr, 32 );
}
inline uint32 action_type( const action & ptr)
{
    return uint32_instance_read( pointer( ptr.memory( ), ptr.offset( ) + 0 ) );
}
inline void action_type( const action & ptr, uint32 value )
{
    uint32_instance_write( pointer( ptr.memory( ), ptr.offset( ) + 0 ), value );
}

//
// type safe dereferencing functions
//


//-----------------------------------------------------------------------------
// group_ref
//-----------------------------------------------------------------------------

#ifndef group_ref_DEFINED
#define group_ref_DEFINED

inline void group_ref_construct( const group_ref & ptr )
{
    ref_instance_construct( ptr );
}
inline void group_ref_destroy( const group_ref & ptr )
{
    ref_instance_destroy( ptr );
}
inline group deref( const group_ref & ptr )
{
    return pointer_templ< _group>( block_read_reference( ptr ) );
}
#endif // group_ref_DEFINDED


//-----------------------------------------------------------------------------
// rsd_file_ref
//-----------------------------------------------------------------------------

#ifndef rsd_file_ref_DEFINED
#define rsd_file_ref_DEFINED

inline void rsd_file_ref_construct( const rsd_file_ref & ptr )
{
    ref_instance_construct( ptr );
}
inline void rsd_file_ref_destroy( const rsd_file_ref & ptr )
{
    ref_instance_destroy( ptr );
}
inline rsd_file deref( const rsd_file_ref & ptr )
{
    return pointer_templ< _rsd_file>( block_read_reference( ptr ) );
}
#endif // rsd_file_ref_DEFINDED


//-----------------------------------------------------------------------------
// sequence_event_ref
//-----------------------------------------------------------------------------

#ifndef sequence_event_ref_DEFINED
#define sequence_event_ref_DEFINED

inline void sequence_event_ref_construct( const sequence_event_ref & ptr )
{
    ref_instance_construct( ptr );
}
inline void sequence_event_ref_destroy( const sequence_event_ref & ptr )
{
    ref_instance_destroy( ptr );
}
inline sequence_event deref( const sequence_event_ref & ptr )
{
    return pointer_templ< _sequence_event>( block_read_reference( ptr ) );
}
#endif // sequence_event_ref_DEFINDED


//-----------------------------------------------------------------------------
// stream_ref
//-----------------------------------------------------------------------------

#ifndef stream_ref_DEFINED
#define stream_ref_DEFINED

inline void stream_ref_construct( const stream_ref & ptr )
{
    ref_instance_construct( ptr );
}
inline void stream_ref_destroy( const stream_ref & ptr )
{
    ref_instance_destroy( ptr );
}
inline stream deref( const stream_ref & ptr )
{
    return pointer_templ< _stream>( block_read_reference( ptr ) );
}
#endif // stream_ref_DEFINDED


//-----------------------------------------------------------------------------
// clip_ref
//-----------------------------------------------------------------------------

#ifndef clip_ref_DEFINED
#define clip_ref_DEFINED

inline void clip_ref_construct( const clip_ref & ptr )
{
    ref_instance_construct( ptr );
}
inline void clip_ref_destroy( const clip_ref & ptr )
{
    ref_instance_destroy( ptr );
}
inline clip deref( const clip_ref & ptr )
{
    return pointer_templ< _clip>( block_read_reference( ptr ) );
}
#endif // clip_ref_DEFINDED


//-----------------------------------------------------------------------------
// region_ref
//-----------------------------------------------------------------------------

#ifndef region_ref_DEFINED
#define region_ref_DEFINED

inline void region_ref_construct( const region_ref & ptr )
{
    ref_instance_construct( ptr );
}
inline void region_ref_destroy( const region_ref & ptr )
{
    ref_instance_destroy( ptr );
}
inline region deref( const region_ref & ptr )
{
    return pointer_templ< _region>( block_read_reference( ptr ) );
}
#endif // region_ref_DEFINDED


//-----------------------------------------------------------------------------
// state_ref
//-----------------------------------------------------------------------------

#ifndef state_ref_DEFINED
#define state_ref_DEFINED

inline void state_ref_construct( const state_ref & ptr )
{
    ref_instance_construct( ptr );
}
inline void state_ref_destroy( const state_ref & ptr )
{
    ref_instance_destroy( ptr );
}
inline state deref( const state_ref & ptr )
{
    return pointer_templ< _state>( block_read_reference( ptr ) );
}
#endif // state_ref_DEFINDED


//-----------------------------------------------------------------------------
// action_ref
//-----------------------------------------------------------------------------

#ifndef action_ref_DEFINED
#define action_ref_DEFINED

inline void action_ref_construct( const action_ref & ptr )
{
    ref_instance_construct( ptr );
}
inline void action_ref_destroy( const action_ref & ptr )
{
    ref_instance_destroy( ptr );
}
inline action deref( const action_ref & ptr )
{
    return pointer_templ< _action>( block_read_reference( ptr ) );
}
#endif // action_ref_DEFINDED


//-----------------------------------------------------------------------------
// event_matrix_ref
//-----------------------------------------------------------------------------

#ifndef event_matrix_ref_DEFINED
#define event_matrix_ref_DEFINED

inline void event_matrix_ref_construct( const event_matrix_ref & ptr )
{
    ref_instance_construct( ptr );
}
inline void event_matrix_ref_destroy( const event_matrix_ref & ptr )
{
    ref_instance_destroy( ptr );
}
inline event_matrix deref( const event_matrix_ref & ptr )
{
    return pointer_templ< _event_matrix>( block_read_reference( ptr ) );
}
#endif // event_matrix_ref_DEFINDED


//-----------------------------------------------------------------------------
// layer_ref
//-----------------------------------------------------------------------------

#ifndef layer_ref_DEFINED
#define layer_ref_DEFINED

inline void layer_ref_construct( const layer_ref & ptr )
{
    ref_instance_construct( ptr );
}
inline void layer_ref_destroy( const layer_ref & ptr )
{
    ref_instance_destroy( ptr );
}
inline layer deref( const layer_ref & ptr )
{
    return pointer_templ< _layer>( block_read_reference( ptr ) );
}
#endif // layer_ref_DEFINDED


//-----------------------------------------------------------------------------
// sequence_ref
//-----------------------------------------------------------------------------

#ifndef sequence_ref_DEFINED
#define sequence_ref_DEFINED

inline void sequence_ref_construct( const sequence_ref & ptr )
{
    ref_instance_construct( ptr );
}
inline void sequence_ref_destroy( const sequence_ref & ptr )
{
    ref_instance_destroy( ptr );
}
inline sequence deref( const sequence_ref & ptr )
{
    return pointer_templ< _sequence>( block_read_reference( ptr ) );
}
#endif // sequence_ref_DEFINDED

//
// type safe array functions
//


//-----------------------------------------------------------------------------
// group_array
//-----------------------------------------------------------------------------

#ifndef group_array_DEFINED
#define group_array_DEFINED

inline unsigned int group_array_num_items( const group_array & ptr )
{
    return array_instance_num_items( ptr );
}
inline void group_array_construct( const group_array & ptr )
{
    array_instance_construct( ptr, 224 );
}
inline const group group_array_item_at( const group_array & ptr, unsigned int index )
{
    return pointer_templ< _group>( array_instance_item_at( ptr, 224, index ) );
}
inline const group group_array_add_item( const group_array & ptr )
{
     group ptr_new_item = (group) array_instance_add_item( ptr, 224 );
     group_construct( ptr_new_item );
    return ptr_new_item;
}
inline void group_array_destroy( const group_array & ptr )
{
    unsigned int items = array_instance_num_items( ptr );
    for(unsigned int i = 0; i < items; i ++ )
    {
        group ptr_item = (group) array_instance_item_at( ptr, 224, i );
        group_destroy( ptr_item );
    }
    array_instance_destroy( ptr, 224 );
}
inline void group_array_remove_item( const group_array & ptr, unsigned int index)
{
    group ptr_item = (group) array_instance_item_at( ptr, 224, index );
    group_destroy( ptr_item );
    ptr_item = pointer_null;
    array_instance_remove_item( ptr, 224, index );
}
#endif // group_array_DEFINED


//-----------------------------------------------------------------------------
// fade_transition_array
//-----------------------------------------------------------------------------

#ifndef fade_transition_array_DEFINED
#define fade_transition_array_DEFINED

inline unsigned int fade_transition_array_num_items( const fade_transition_array & ptr )
{
    return array_instance_num_items( ptr );
}
inline void fade_transition_array_construct( const fade_transition_array & ptr )
{
    array_instance_construct( ptr, 224 );
}
inline const fade_transition fade_transition_array_item_at( const fade_transition_array & ptr, unsigned int index )
{
    return pointer_templ< _fade_transition>( array_instance_item_at( ptr, 224, index ) );
}
inline const fade_transition fade_transition_array_add_item( const fade_transition_array & ptr )
{
     fade_transition ptr_new_item = (fade_transition) array_instance_add_item( ptr, 224 );
     fade_transition_construct( ptr_new_item );
    return ptr_new_item;
}
inline void fade_transition_array_destroy( const fade_transition_array & ptr )
{
    unsigned int items = array_instance_num_items( ptr );
    for(unsigned int i = 0; i < items; i ++ )
    {
        fade_transition ptr_item = (fade_transition) array_instance_item_at( ptr, 224, i );
        fade_transition_destroy( ptr_item );
    }
    array_instance_destroy( ptr, 224 );
}
inline void fade_transition_array_remove_item( const fade_transition_array & ptr, unsigned int index)
{
    fade_transition ptr_item = (fade_transition) array_instance_item_at( ptr, 224, index );
    fade_transition_destroy( ptr_item );
    ptr_item = pointer_null;
    array_instance_remove_item( ptr, 224, index );
}
#endif // fade_transition_array_DEFINED


//-----------------------------------------------------------------------------
// stitch_transition_array
//-----------------------------------------------------------------------------

#ifndef stitch_transition_array_DEFINED
#define stitch_transition_array_DEFINED

inline unsigned int stitch_transition_array_num_items( const stitch_transition_array & ptr )
{
    return array_instance_num_items( ptr );
}
inline void stitch_transition_array_construct( const stitch_transition_array & ptr )
{
    array_instance_construct( ptr, 96 );
}
inline const stitch_transition stitch_transition_array_item_at( const stitch_transition_array & ptr, unsigned int index )
{
    return pointer_templ< _stitch_transition>( array_instance_item_at( ptr, 96, index ) );
}
inline const stitch_transition stitch_transition_array_add_item( const stitch_transition_array & ptr )
{
     stitch_transition ptr_new_item = (stitch_transition) array_instance_add_item( ptr, 96 );
     stitch_transition_construct( ptr_new_item );
    return ptr_new_item;
}
inline void stitch_transition_array_destroy( const stitch_transition_array & ptr )
{
    unsigned int items = array_instance_num_items( ptr );
    for(unsigned int i = 0; i < items; i ++ )
    {
        stitch_transition ptr_item = (stitch_transition) array_instance_item_at( ptr, 96, i );
        stitch_transition_destroy( ptr_item );
    }
    array_instance_destroy( ptr, 96 );
}
inline void stitch_transition_array_remove_item( const stitch_transition_array & ptr, unsigned int index)
{
    stitch_transition ptr_item = (stitch_transition) array_instance_item_at( ptr, 96, index );
    stitch_transition_destroy( ptr_item );
    ptr_item = pointer_null;
    array_instance_remove_item( ptr, 96, index );
}
#endif // stitch_transition_array_DEFINED


//-----------------------------------------------------------------------------
// event_array
//-----------------------------------------------------------------------------

#ifndef event_array_DEFINED
#define event_array_DEFINED

inline unsigned int event_array_num_items( const event_array & ptr )
{
    return array_instance_num_items( ptr );
}
inline void event_array_construct( const event_array & ptr )
{
    array_instance_construct( ptr, 96 );
}
inline const event event_array_item_at( const event_array & ptr, unsigned int index )
{
    return pointer_templ< _event>( array_instance_item_at( ptr, 96, index ) );
}
inline const event event_array_add_item( const event_array & ptr )
{
     event ptr_new_item = (event) array_instance_add_item( ptr, 96 );
     event_construct( ptr_new_item );
    return ptr_new_item;
}
inline void event_array_destroy( const event_array & ptr )
{
    unsigned int items = array_instance_num_items( ptr );
    for(unsigned int i = 0; i < items; i ++ )
    {
        event ptr_item = (event) array_instance_item_at( ptr, 96, i );
        event_destroy( ptr_item );
    }
    array_instance_destroy( ptr, 96 );
}
inline void event_array_remove_item( const event_array & ptr, unsigned int index)
{
    event ptr_item = (event) array_instance_item_at( ptr, 96, index );
    event_destroy( ptr_item );
    ptr_item = pointer_null;
    array_instance_remove_item( ptr, 96, index );
}
#endif // event_array_DEFINED


//-----------------------------------------------------------------------------
// event_matrix_array
//-----------------------------------------------------------------------------

#ifndef event_matrix_array_DEFINED
#define event_matrix_array_DEFINED

inline unsigned int event_matrix_array_num_items( const event_matrix_array & ptr )
{
    return array_instance_num_items( ptr );
}
inline void event_matrix_array_construct( const event_matrix_array & ptr )
{
    array_instance_construct( ptr, 32 );
}
inline const event_matrix event_matrix_array_item_at( const event_matrix_array & ptr, unsigned int index )
{
    return pointer_templ< _event_matrix>( array_instance_item_at( ptr, 32, index ) );
}
inline const event_matrix event_matrix_array_add_item( const event_matrix_array & ptr )
{
     event_matrix ptr_new_item = (event_matrix) array_instance_add_item( ptr, 32 );
     event_matrix_construct( ptr_new_item );
    return ptr_new_item;
}
inline void event_matrix_array_destroy( const event_matrix_array & ptr )
{
    unsigned int items = array_instance_num_items( ptr );
    for(unsigned int i = 0; i < items; i ++ )
    {
        event_matrix ptr_item = (event_matrix) array_instance_item_at( ptr, 32, i );
        event_matrix_destroy( ptr_item );
    }
    array_instance_destroy( ptr, 32 );
}
inline void event_matrix_array_remove_item( const event_matrix_array & ptr, unsigned int index)
{
    event_matrix ptr_item = (event_matrix) array_instance_item_at( ptr, 32, index );
    event_matrix_destroy( ptr_item );
    ptr_item = pointer_null;
    array_instance_remove_item( ptr, 32, index );
}
#endif // event_matrix_array_DEFINED


//-----------------------------------------------------------------------------
// state_array
//-----------------------------------------------------------------------------

#ifndef state_array_DEFINED
#define state_array_DEFINED

inline unsigned int state_array_num_items( const state_array & ptr )
{
    return array_instance_num_items( ptr );
}
inline void state_array_construct( const state_array & ptr )
{
    array_instance_construct( ptr, 64 );
}
inline const state state_array_item_at( const state_array & ptr, unsigned int index )
{
    return pointer_templ< _state>( array_instance_item_at( ptr, 64, index ) );
}
inline const state state_array_add_item( const state_array & ptr )
{
     state ptr_new_item = (state) array_instance_add_item( ptr, 64 );
     state_construct( ptr_new_item );
    return ptr_new_item;
}
inline void state_array_destroy( const state_array & ptr )
{
    unsigned int items = array_instance_num_items( ptr );
    for(unsigned int i = 0; i < items; i ++ )
    {
        state ptr_item = (state) array_instance_item_at( ptr, 64, i );
        state_destroy( ptr_item );
    }
    array_instance_destroy( ptr, 64 );
}
inline void state_array_remove_item( const state_array & ptr, unsigned int index)
{
    state ptr_item = (state) array_instance_item_at( ptr, 64, index );
    state_destroy( ptr_item );
    ptr_item = pointer_null;
    array_instance_remove_item( ptr, 64, index );
}
#endif // state_array_DEFINED


//-----------------------------------------------------------------------------
// rsd_file_array
//-----------------------------------------------------------------------------

#ifndef rsd_file_array_DEFINED
#define rsd_file_array_DEFINED

inline unsigned int rsd_file_array_num_items( const rsd_file_array & ptr )
{
    return array_instance_num_items( ptr );
}
inline void rsd_file_array_construct( const rsd_file_array & ptr )
{
    array_instance_construct( ptr, 192 );
}
inline const rsd_file rsd_file_array_item_at( const rsd_file_array & ptr, unsigned int index )
{
    return pointer_templ< _rsd_file>( array_instance_item_at( ptr, 192, index ) );
}
inline const rsd_file rsd_file_array_add_item( const rsd_file_array & ptr )
{
     rsd_file ptr_new_item = (rsd_file) array_instance_add_item( ptr, 192 );
     rsd_file_construct( ptr_new_item );
    return ptr_new_item;
}
inline void rsd_file_array_destroy( const rsd_file_array & ptr )
{
    unsigned int items = array_instance_num_items( ptr );
    for(unsigned int i = 0; i < items; i ++ )
    {
        rsd_file ptr_item = (rsd_file) array_instance_item_at( ptr, 192, i );
        rsd_file_destroy( ptr_item );
    }
    array_instance_destroy( ptr, 192 );
}
inline void rsd_file_array_remove_item( const rsd_file_array & ptr, unsigned int index)
{
    rsd_file ptr_item = (rsd_file) array_instance_item_at( ptr, 192, index );
    rsd_file_destroy( ptr_item );
    ptr_item = pointer_null;
    array_instance_remove_item( ptr, 192, index );
}
#endif // rsd_file_array_DEFINED


//-----------------------------------------------------------------------------
// stream_array
//-----------------------------------------------------------------------------

#ifndef stream_array_DEFINED
#define stream_array_DEFINED

inline unsigned int stream_array_num_items( const stream_array & ptr )
{
    return array_instance_num_items( ptr );
}
inline void stream_array_construct( const stream_array & ptr )
{
    array_instance_construct( ptr, 232 );
}
inline const stream stream_array_item_at( const stream_array & ptr, unsigned int index )
{
    return pointer_templ< _stream>( array_instance_item_at( ptr, 232, index ) );
}
inline const stream stream_array_add_item( const stream_array & ptr )
{
     stream ptr_new_item = (stream) array_instance_add_item( ptr, 232 );
     stream_construct( ptr_new_item );
    return ptr_new_item;
}
inline void stream_array_destroy( const stream_array & ptr )
{
    unsigned int items = array_instance_num_items( ptr );
    for(unsigned int i = 0; i < items; i ++ )
    {
        stream ptr_item = (stream) array_instance_item_at( ptr, 232, i );
        stream_destroy( ptr_item );
    }
    array_instance_destroy( ptr, 232 );
}
inline void stream_array_remove_item( const stream_array & ptr, unsigned int index)
{
    stream ptr_item = (stream) array_instance_item_at( ptr, 232, index );
    stream_destroy( ptr_item );
    ptr_item = pointer_null;
    array_instance_remove_item( ptr, 232, index );
}
#endif // stream_array_DEFINED


//-----------------------------------------------------------------------------
// clip_array
//-----------------------------------------------------------------------------

#ifndef clip_array_DEFINED
#define clip_array_DEFINED

inline unsigned int clip_array_num_items( const clip_array & ptr )
{
    return array_instance_num_items( ptr );
}
inline void clip_array_construct( const clip_array & ptr )
{
    array_instance_construct( ptr, 224 );
}
inline const clip clip_array_item_at( const clip_array & ptr, unsigned int index )
{
    return pointer_templ< _clip>( array_instance_item_at( ptr, 224, index ) );
}
inline const clip clip_array_add_item( const clip_array & ptr )
{
     clip ptr_new_item = (clip) array_instance_add_item( ptr, 224 );
     clip_construct( ptr_new_item );
    return ptr_new_item;
}
inline void clip_array_destroy( const clip_array & ptr )
{
    unsigned int items = array_instance_num_items( ptr );
    for(unsigned int i = 0; i < items; i ++ )
    {
        clip ptr_item = (clip) array_instance_item_at( ptr, 224, i );
        clip_destroy( ptr_item );
    }
    array_instance_destroy( ptr, 224 );
}
inline void clip_array_remove_item( const clip_array & ptr, unsigned int index)
{
    clip ptr_item = (clip) array_instance_item_at( ptr, 224, index );
    clip_destroy( ptr_item );
    ptr_item = pointer_null;
    array_instance_remove_item( ptr, 224, index );
}
#endif // clip_array_DEFINED


//-----------------------------------------------------------------------------
// region_array
//-----------------------------------------------------------------------------

#ifndef region_array_DEFINED
#define region_array_DEFINED

inline unsigned int region_array_num_items( const region_array & ptr )
{
    return array_instance_num_items( ptr );
}
inline void region_array_construct( const region_array & ptr )
{
    array_instance_construct( ptr, 160 );
}
inline const region region_array_item_at( const region_array & ptr, unsigned int index )
{
    return pointer_templ< _region>( array_instance_item_at( ptr, 160, index ) );
}
inline const region region_array_add_item( const region_array & ptr )
{
     region ptr_new_item = (region) array_instance_add_item( ptr, 160 );
     region_construct( ptr_new_item );
    return ptr_new_item;
}
inline void region_array_destroy( const region_array & ptr )
{
    unsigned int items = array_instance_num_items( ptr );
    for(unsigned int i = 0; i < items; i ++ )
    {
        region ptr_item = (region) array_instance_item_at( ptr, 160, i );
        region_destroy( ptr_item );
    }
    array_instance_destroy( ptr, 160 );
}
inline void region_array_remove_item( const region_array & ptr, unsigned int index)
{
    region ptr_item = (region) array_instance_item_at( ptr, 160, index );
    region_destroy( ptr_item );
    ptr_item = pointer_null;
    array_instance_remove_item( ptr, 160, index );
}
#endif // region_array_DEFINED


//-----------------------------------------------------------------------------
// sequence_array
//-----------------------------------------------------------------------------

#ifndef sequence_array_DEFINED
#define sequence_array_DEFINED

inline unsigned int sequence_array_num_items( const sequence_array & ptr )
{
    return array_instance_num_items( ptr );
}
inline void sequence_array_construct( const sequence_array & ptr )
{
    array_instance_construct( ptr, 64 );
}
inline const sequence sequence_array_item_at( const sequence_array & ptr, unsigned int index )
{
    return pointer_templ< _sequence>( array_instance_item_at( ptr, 64, index ) );
}
inline const sequence sequence_array_add_item( const sequence_array & ptr )
{
     sequence ptr_new_item = (sequence) array_instance_add_item( ptr, 64 );
     sequence_construct( ptr_new_item );
    return ptr_new_item;
}
inline void sequence_array_destroy( const sequence_array & ptr )
{
    unsigned int items = array_instance_num_items( ptr );
    for(unsigned int i = 0; i < items; i ++ )
    {
        sequence ptr_item = (sequence) array_instance_item_at( ptr, 64, i );
        sequence_destroy( ptr_item );
    }
    array_instance_destroy( ptr, 64 );
}
inline void sequence_array_remove_item( const sequence_array & ptr, unsigned int index)
{
    sequence ptr_item = (sequence) array_instance_item_at( ptr, 64, index );
    sequence_destroy( ptr_item );
    ptr_item = pointer_null;
    array_instance_remove_item( ptr, 64, index );
}
#endif // sequence_array_DEFINED


//-----------------------------------------------------------------------------
// layer_array
//-----------------------------------------------------------------------------

#ifndef layer_array_DEFINED
#define layer_array_DEFINED

inline unsigned int layer_array_num_items( const layer_array & ptr )
{
    return array_instance_num_items( ptr );
}
inline void layer_array_construct( const layer_array & ptr )
{
    array_instance_construct( ptr, 136 );
}
inline const layer layer_array_item_at( const layer_array & ptr, unsigned int index )
{
    return pointer_templ< _layer>( array_instance_item_at( ptr, 136, index ) );
}
inline const layer layer_array_add_item( const layer_array & ptr )
{
     layer ptr_new_item = (layer) array_instance_add_item( ptr, 136 );
     layer_construct( ptr_new_item );
    return ptr_new_item;
}
inline void layer_array_destroy( const layer_array & ptr )
{
    unsigned int items = array_instance_num_items( ptr );
    for(unsigned int i = 0; i < items; i ++ )
    {
        layer ptr_item = (layer) array_instance_item_at( ptr, 136, i );
        layer_destroy( ptr_item );
    }
    array_instance_destroy( ptr, 136 );
}
inline void layer_array_remove_item( const layer_array & ptr, unsigned int index)
{
    layer ptr_item = (layer) array_instance_item_at( ptr, 136, index );
    layer_destroy( ptr_item );
    ptr_item = pointer_null;
    array_instance_remove_item( ptr, 136, index );
}
#endif // layer_array_DEFINED


//-----------------------------------------------------------------------------
// event_clip_array
//-----------------------------------------------------------------------------

#ifndef event_clip_array_DEFINED
#define event_clip_array_DEFINED

inline unsigned int event_clip_array_num_items( const event_clip_array & ptr )
{
    return array_instance_num_items( ptr );
}
inline void event_clip_array_construct( const event_clip_array & ptr )
{
    array_instance_construct( ptr, 64 );
}
inline const event_clip event_clip_array_item_at( const event_clip_array & ptr, unsigned int index )
{
    return pointer_templ< _event_clip>( array_instance_item_at( ptr, 64, index ) );
}
inline const event_clip event_clip_array_add_item( const event_clip_array & ptr )
{
     event_clip ptr_new_item = (event_clip) array_instance_add_item( ptr, 64 );
     event_clip_construct( ptr_new_item );
    return ptr_new_item;
}
inline void event_clip_array_destroy( const event_clip_array & ptr )
{
    unsigned int items = array_instance_num_items( ptr );
    for(unsigned int i = 0; i < items; i ++ )
    {
        event_clip ptr_item = (event_clip) array_instance_item_at( ptr, 64, i );
        event_clip_destroy( ptr_item );
    }
    array_instance_destroy( ptr, 64 );
}
inline void event_clip_array_remove_item( const event_clip_array & ptr, unsigned int index)
{
    event_clip ptr_item = (event_clip) array_instance_item_at( ptr, 64, index );
    event_clip_destroy( ptr_item );
    ptr_item = pointer_null;
    array_instance_remove_item( ptr, 64, index );
}
#endif // event_clip_array_DEFINED


//-----------------------------------------------------------------------------
// event_stream_array
//-----------------------------------------------------------------------------

#ifndef event_stream_array_DEFINED
#define event_stream_array_DEFINED

inline unsigned int event_stream_array_num_items( const event_stream_array & ptr )
{
    return array_instance_num_items( ptr );
}
inline void event_stream_array_construct( const event_stream_array & ptr )
{
    array_instance_construct( ptr, 64 );
}
inline const event_stream event_stream_array_item_at( const event_stream_array & ptr, unsigned int index )
{
    return pointer_templ< _event_stream>( array_instance_item_at( ptr, 64, index ) );
}
inline const event_stream event_stream_array_add_item( const event_stream_array & ptr )
{
     event_stream ptr_new_item = (event_stream) array_instance_add_item( ptr, 64 );
     event_stream_construct( ptr_new_item );
    return ptr_new_item;
}
inline void event_stream_array_destroy( const event_stream_array & ptr )
{
    unsigned int items = array_instance_num_items( ptr );
    for(unsigned int i = 0; i < items; i ++ )
    {
        event_stream ptr_item = (event_stream) array_instance_item_at( ptr, 64, i );
        event_stream_destroy( ptr_item );
    }
    array_instance_destroy( ptr, 64 );
}
inline void event_stream_array_remove_item( const event_stream_array & ptr, unsigned int index)
{
    event_stream ptr_item = (event_stream) array_instance_item_at( ptr, 64, index );
    event_stream_destroy( ptr_item );
    ptr_item = pointer_null;
    array_instance_remove_item( ptr, 64, index );
}
#endif // event_stream_array_DEFINED


//-----------------------------------------------------------------------------
// event_silence_array
//-----------------------------------------------------------------------------

#ifndef event_silence_array_DEFINED
#define event_silence_array_DEFINED

inline unsigned int event_silence_array_num_items( const event_silence_array & ptr )
{
    return array_instance_num_items( ptr );
}
inline void event_silence_array_construct( const event_silence_array & ptr )
{
    array_instance_construct( ptr, 96 );
}
inline const event_silence event_silence_array_item_at( const event_silence_array & ptr, unsigned int index )
{
    return pointer_templ< _event_silence>( array_instance_item_at( ptr, 96, index ) );
}
inline const event_silence event_silence_array_add_item( const event_silence_array & ptr )
{
     event_silence ptr_new_item = (event_silence) array_instance_add_item( ptr, 96 );
     event_silence_construct( ptr_new_item );
    return ptr_new_item;
}
inline void event_silence_array_destroy( const event_silence_array & ptr )
{
    unsigned int items = array_instance_num_items( ptr );
    for(unsigned int i = 0; i < items; i ++ )
    {
        event_silence ptr_item = (event_silence) array_instance_item_at( ptr, 96, i );
        event_silence_destroy( ptr_item );
    }
    array_instance_destroy( ptr, 96 );
}
inline void event_silence_array_remove_item( const event_silence_array & ptr, unsigned int index)
{
    event_silence ptr_item = (event_silence) array_instance_item_at( ptr, 96, index );
    event_silence_destroy( ptr_item );
    ptr_item = pointer_null;
    array_instance_remove_item( ptr, 96, index );
}
#endif // event_silence_array_DEFINED


//-----------------------------------------------------------------------------
// event_var_volume_array
//-----------------------------------------------------------------------------

#ifndef event_var_volume_array_DEFINED
#define event_var_volume_array_DEFINED

inline unsigned int event_var_volume_array_num_items( const event_var_volume_array & ptr )
{
    return array_instance_num_items( ptr );
}
inline void event_var_volume_array_construct( const event_var_volume_array & ptr )
{
    array_instance_construct( ptr, 64 );
}
inline const event_var_volume event_var_volume_array_item_at( const event_var_volume_array & ptr, unsigned int index )
{
    return pointer_templ< _event_var_volume>( array_instance_item_at( ptr, 64, index ) );
}
inline const event_var_volume event_var_volume_array_add_item( const event_var_volume_array & ptr )
{
     event_var_volume ptr_new_item = (event_var_volume) array_instance_add_item( ptr, 64 );
     event_var_volume_construct( ptr_new_item );
    return ptr_new_item;
}
inline void event_var_volume_array_destroy( const event_var_volume_array & ptr )
{
    unsigned int items = array_instance_num_items( ptr );
    for(unsigned int i = 0; i < items; i ++ )
    {
        event_var_volume ptr_item = (event_var_volume) array_instance_item_at( ptr, 64, i );
        event_var_volume_destroy( ptr_item );
    }
    array_instance_destroy( ptr, 64 );
}
inline void event_var_volume_array_remove_item( const event_var_volume_array & ptr, unsigned int index)
{
    event_var_volume ptr_item = (event_var_volume) array_instance_item_at( ptr, 64, index );
    event_var_volume_destroy( ptr_item );
    ptr_item = pointer_null;
    array_instance_remove_item( ptr, 64, index );
}
#endif // event_var_volume_array_DEFINED


//-----------------------------------------------------------------------------
// event_var_pitch_array
//-----------------------------------------------------------------------------

#ifndef event_var_pitch_array_DEFINED
#define event_var_pitch_array_DEFINED

inline unsigned int event_var_pitch_array_num_items( const event_var_pitch_array & ptr )
{
    return array_instance_num_items( ptr );
}
inline void event_var_pitch_array_construct( const event_var_pitch_array & ptr )
{
    array_instance_construct( ptr, 64 );
}
inline const event_var_pitch event_var_pitch_array_item_at( const event_var_pitch_array & ptr, unsigned int index )
{
    return pointer_templ< _event_var_pitch>( array_instance_item_at( ptr, 64, index ) );
}
inline const event_var_pitch event_var_pitch_array_add_item( const event_var_pitch_array & ptr )
{
     event_var_pitch ptr_new_item = (event_var_pitch) array_instance_add_item( ptr, 64 );
     event_var_pitch_construct( ptr_new_item );
    return ptr_new_item;
}
inline void event_var_pitch_array_destroy( const event_var_pitch_array & ptr )
{
    unsigned int items = array_instance_num_items( ptr );
    for(unsigned int i = 0; i < items; i ++ )
    {
        event_var_pitch ptr_item = (event_var_pitch) array_instance_item_at( ptr, 64, i );
        event_var_pitch_destroy( ptr_item );
    }
    array_instance_destroy( ptr, 64 );
}
inline void event_var_pitch_array_remove_item( const event_var_pitch_array & ptr, unsigned int index)
{
    event_var_pitch ptr_item = (event_var_pitch) array_instance_item_at( ptr, 64, index );
    event_var_pitch_destroy( ptr_item );
    ptr_item = pointer_null;
    array_instance_remove_item( ptr, 64, index );
}
#endif // event_var_pitch_array_DEFINED


//-----------------------------------------------------------------------------
// event_var_volume_rand_min_array
//-----------------------------------------------------------------------------

#ifndef event_var_volume_rand_min_array_DEFINED
#define event_var_volume_rand_min_array_DEFINED

inline unsigned int event_var_volume_rand_min_array_num_items( const event_var_volume_rand_min_array & ptr )
{
    return array_instance_num_items( ptr );
}
inline void event_var_volume_rand_min_array_construct( const event_var_volume_rand_min_array & ptr )
{
    array_instance_construct( ptr, 64 );
}
inline const event_var_volume_rand_min event_var_volume_rand_min_array_item_at( const event_var_volume_rand_min_array & ptr, unsigned int index )
{
    return pointer_templ< _event_var_volume_rand_min>( array_instance_item_at( ptr, 64, index ) );
}
inline const event_var_volume_rand_min event_var_volume_rand_min_array_add_item( const event_var_volume_rand_min_array & ptr )
{
     event_var_volume_rand_min ptr_new_item = (event_var_volume_rand_min) array_instance_add_item( ptr, 64 );
     event_var_volume_rand_min_construct( ptr_new_item );
    return ptr_new_item;
}
inline void event_var_volume_rand_min_array_destroy( const event_var_volume_rand_min_array & ptr )
{
    unsigned int items = array_instance_num_items( ptr );
    for(unsigned int i = 0; i < items; i ++ )
    {
        event_var_volume_rand_min ptr_item = (event_var_volume_rand_min) array_instance_item_at( ptr, 64, i );
        event_var_volume_rand_min_destroy( ptr_item );
    }
    array_instance_destroy( ptr, 64 );
}
inline void event_var_volume_rand_min_array_remove_item( const event_var_volume_rand_min_array & ptr, unsigned int index)
{
    event_var_volume_rand_min ptr_item = (event_var_volume_rand_min) array_instance_item_at( ptr, 64, index );
    event_var_volume_rand_min_destroy( ptr_item );
    ptr_item = pointer_null;
    array_instance_remove_item( ptr, 64, index );
}
#endif // event_var_volume_rand_min_array_DEFINED


//-----------------------------------------------------------------------------
// event_var_volume_rand_max_array
//-----------------------------------------------------------------------------

#ifndef event_var_volume_rand_max_array_DEFINED
#define event_var_volume_rand_max_array_DEFINED

inline unsigned int event_var_volume_rand_max_array_num_items( const event_var_volume_rand_max_array & ptr )
{
    return array_instance_num_items( ptr );
}
inline void event_var_volume_rand_max_array_construct( const event_var_volume_rand_max_array & ptr )
{
    array_instance_construct( ptr, 64 );
}
inline const event_var_volume_rand_max event_var_volume_rand_max_array_item_at( const event_var_volume_rand_max_array & ptr, unsigned int index )
{
    return pointer_templ< _event_var_volume_rand_max>( array_instance_item_at( ptr, 64, index ) );
}
inline const event_var_volume_rand_max event_var_volume_rand_max_array_add_item( const event_var_volume_rand_max_array & ptr )
{
     event_var_volume_rand_max ptr_new_item = (event_var_volume_rand_max) array_instance_add_item( ptr, 64 );
     event_var_volume_rand_max_construct( ptr_new_item );
    return ptr_new_item;
}
inline void event_var_volume_rand_max_array_destroy( const event_var_volume_rand_max_array & ptr )
{
    unsigned int items = array_instance_num_items( ptr );
    for(unsigned int i = 0; i < items; i ++ )
    {
        event_var_volume_rand_max ptr_item = (event_var_volume_rand_max) array_instance_item_at( ptr, 64, i );
        event_var_volume_rand_max_destroy( ptr_item );
    }
    array_instance_destroy( ptr, 64 );
}
inline void event_var_volume_rand_max_array_remove_item( const event_var_volume_rand_max_array & ptr, unsigned int index)
{
    event_var_volume_rand_max ptr_item = (event_var_volume_rand_max) array_instance_item_at( ptr, 64, index );
    event_var_volume_rand_max_destroy( ptr_item );
    ptr_item = pointer_null;
    array_instance_remove_item( ptr, 64, index );
}
#endif // event_var_volume_rand_max_array_DEFINED


//-----------------------------------------------------------------------------
// event_var_pitch_rand_min_array
//-----------------------------------------------------------------------------

#ifndef event_var_pitch_rand_min_array_DEFINED
#define event_var_pitch_rand_min_array_DEFINED

inline unsigned int event_var_pitch_rand_min_array_num_items( const event_var_pitch_rand_min_array & ptr )
{
    return array_instance_num_items( ptr );
}
inline void event_var_pitch_rand_min_array_construct( const event_var_pitch_rand_min_array & ptr )
{
    array_instance_construct( ptr, 64 );
}
inline const event_var_pitch_rand_min event_var_pitch_rand_min_array_item_at( const event_var_pitch_rand_min_array & ptr, unsigned int index )
{
    return pointer_templ< _event_var_pitch_rand_min>( array_instance_item_at( ptr, 64, index ) );
}
inline const event_var_pitch_rand_min event_var_pitch_rand_min_array_add_item( const event_var_pitch_rand_min_array & ptr )
{
     event_var_pitch_rand_min ptr_new_item = (event_var_pitch_rand_min) array_instance_add_item( ptr, 64 );
     event_var_pitch_rand_min_construct( ptr_new_item );
    return ptr_new_item;
}
inline void event_var_pitch_rand_min_array_destroy( const event_var_pitch_rand_min_array & ptr )
{
    unsigned int items = array_instance_num_items( ptr );
    for(unsigned int i = 0; i < items; i ++ )
    {
        event_var_pitch_rand_min ptr_item = (event_var_pitch_rand_min) array_instance_item_at( ptr, 64, i );
        event_var_pitch_rand_min_destroy( ptr_item );
    }
    array_instance_destroy( ptr, 64 );
}
inline void event_var_pitch_rand_min_array_remove_item( const event_var_pitch_rand_min_array & ptr, unsigned int index)
{
    event_var_pitch_rand_min ptr_item = (event_var_pitch_rand_min) array_instance_item_at( ptr, 64, index );
    event_var_pitch_rand_min_destroy( ptr_item );
    ptr_item = pointer_null;
    array_instance_remove_item( ptr, 64, index );
}
#endif // event_var_pitch_rand_min_array_DEFINED


//-----------------------------------------------------------------------------
// event_var_pitch_rand_max_array
//-----------------------------------------------------------------------------

#ifndef event_var_pitch_rand_max_array_DEFINED
#define event_var_pitch_rand_max_array_DEFINED

inline unsigned int event_var_pitch_rand_max_array_num_items( const event_var_pitch_rand_max_array & ptr )
{
    return array_instance_num_items( ptr );
}
inline void event_var_pitch_rand_max_array_construct( const event_var_pitch_rand_max_array & ptr )
{
    array_instance_construct( ptr, 64 );
}
inline const event_var_pitch_rand_max event_var_pitch_rand_max_array_item_at( const event_var_pitch_rand_max_array & ptr, unsigned int index )
{
    return pointer_templ< _event_var_pitch_rand_max>( array_instance_item_at( ptr, 64, index ) );
}
inline const event_var_pitch_rand_max event_var_pitch_rand_max_array_add_item( const event_var_pitch_rand_max_array & ptr )
{
     event_var_pitch_rand_max ptr_new_item = (event_var_pitch_rand_max) array_instance_add_item( ptr, 64 );
     event_var_pitch_rand_max_construct( ptr_new_item );
    return ptr_new_item;
}
inline void event_var_pitch_rand_max_array_destroy( const event_var_pitch_rand_max_array & ptr )
{
    unsigned int items = array_instance_num_items( ptr );
    for(unsigned int i = 0; i < items; i ++ )
    {
        event_var_pitch_rand_max ptr_item = (event_var_pitch_rand_max) array_instance_item_at( ptr, 64, i );
        event_var_pitch_rand_max_destroy( ptr_item );
    }
    array_instance_destroy( ptr, 64 );
}
inline void event_var_pitch_rand_max_array_remove_item( const event_var_pitch_rand_max_array & ptr, unsigned int index)
{
    event_var_pitch_rand_max ptr_item = (event_var_pitch_rand_max) array_instance_item_at( ptr, 64, index );
    event_var_pitch_rand_max_destroy( ptr_item );
    ptr_item = pointer_null;
    array_instance_remove_item( ptr, 64, index );
}
#endif // event_var_pitch_rand_max_array_DEFINED


//-----------------------------------------------------------------------------
// event_var_aux_gain_array
//-----------------------------------------------------------------------------

#ifndef event_var_aux_gain_array_DEFINED
#define event_var_aux_gain_array_DEFINED

inline unsigned int event_var_aux_gain_array_num_items( const event_var_aux_gain_array & ptr )
{
    return array_instance_num_items( ptr );
}
inline void event_var_aux_gain_array_construct( const event_var_aux_gain_array & ptr )
{
    array_instance_construct( ptr, 96 );
}
inline const event_var_aux_gain event_var_aux_gain_array_item_at( const event_var_aux_gain_array & ptr, unsigned int index )
{
    return pointer_templ< _event_var_aux_gain>( array_instance_item_at( ptr, 96, index ) );
}
inline const event_var_aux_gain event_var_aux_gain_array_add_item( const event_var_aux_gain_array & ptr )
{
     event_var_aux_gain ptr_new_item = (event_var_aux_gain) array_instance_add_item( ptr, 96 );
     event_var_aux_gain_construct( ptr_new_item );
    return ptr_new_item;
}
inline void event_var_aux_gain_array_destroy( const event_var_aux_gain_array & ptr )
{
    unsigned int items = array_instance_num_items( ptr );
    for(unsigned int i = 0; i < items; i ++ )
    {
        event_var_aux_gain ptr_item = (event_var_aux_gain) array_instance_item_at( ptr, 96, i );
        event_var_aux_gain_destroy( ptr_item );
    }
    array_instance_destroy( ptr, 96 );
}
inline void event_var_aux_gain_array_remove_item( const event_var_aux_gain_array & ptr, unsigned int index)
{
    event_var_aux_gain ptr_item = (event_var_aux_gain) array_instance_item_at( ptr, 96, index );
    event_var_aux_gain_destroy( ptr_item );
    ptr_item = pointer_null;
    array_instance_remove_item( ptr, 96, index );
}
#endif // event_var_aux_gain_array_DEFINED


//-----------------------------------------------------------------------------
// event_var_positional_array
//-----------------------------------------------------------------------------

#ifndef event_var_positional_array_DEFINED
#define event_var_positional_array_DEFINED

inline unsigned int event_var_positional_array_num_items( const event_var_positional_array & ptr )
{
    return array_instance_num_items( ptr );
}
inline void event_var_positional_array_construct( const event_var_positional_array & ptr )
{
    array_instance_construct( ptr, 40 );
}
inline const event_var_positional event_var_positional_array_item_at( const event_var_positional_array & ptr, unsigned int index )
{
    return pointer_templ< _event_var_positional>( array_instance_item_at( ptr, 40, index ) );
}
inline const event_var_positional event_var_positional_array_add_item( const event_var_positional_array & ptr )
{
     event_var_positional ptr_new_item = (event_var_positional) array_instance_add_item( ptr, 40 );
     event_var_positional_construct( ptr_new_item );
    return ptr_new_item;
}
inline void event_var_positional_array_destroy( const event_var_positional_array & ptr )
{
    unsigned int items = array_instance_num_items( ptr );
    for(unsigned int i = 0; i < items; i ++ )
    {
        event_var_positional ptr_item = (event_var_positional) array_instance_item_at( ptr, 40, i );
        event_var_positional_destroy( ptr_item );
    }
    array_instance_destroy( ptr, 40 );
}
inline void event_var_positional_array_remove_item( const event_var_positional_array & ptr, unsigned int index)
{
    event_var_positional ptr_item = (event_var_positional) array_instance_item_at( ptr, 40, index );
    event_var_positional_destroy( ptr_item );
    ptr_item = pointer_null;
    array_instance_remove_item( ptr, 40, index );
}
#endif // event_var_positional_array_DEFINED


//-----------------------------------------------------------------------------
// event_var_pos_fall_off_array
//-----------------------------------------------------------------------------

#ifndef event_var_pos_fall_off_array_DEFINED
#define event_var_pos_fall_off_array_DEFINED

inline unsigned int event_var_pos_fall_off_array_num_items( const event_var_pos_fall_off_array & ptr )
{
    return array_instance_num_items( ptr );
}
inline void event_var_pos_fall_off_array_construct( const event_var_pos_fall_off_array & ptr )
{
    array_instance_construct( ptr, 64 );
}
inline const event_var_pos_fall_off event_var_pos_fall_off_array_item_at( const event_var_pos_fall_off_array & ptr, unsigned int index )
{
    return pointer_templ< _event_var_pos_fall_off>( array_instance_item_at( ptr, 64, index ) );
}
inline const event_var_pos_fall_off event_var_pos_fall_off_array_add_item( const event_var_pos_fall_off_array & ptr )
{
     event_var_pos_fall_off ptr_new_item = (event_var_pos_fall_off) array_instance_add_item( ptr, 64 );
     event_var_pos_fall_off_construct( ptr_new_item );
    return ptr_new_item;
}
inline void event_var_pos_fall_off_array_destroy( const event_var_pos_fall_off_array & ptr )
{
    unsigned int items = array_instance_num_items( ptr );
    for(unsigned int i = 0; i < items; i ++ )
    {
        event_var_pos_fall_off ptr_item = (event_var_pos_fall_off) array_instance_item_at( ptr, 64, i );
        event_var_pos_fall_off_destroy( ptr_item );
    }
    array_instance_destroy( ptr, 64 );
}
inline void event_var_pos_fall_off_array_remove_item( const event_var_pos_fall_off_array & ptr, unsigned int index)
{
    event_var_pos_fall_off ptr_item = (event_var_pos_fall_off) array_instance_item_at( ptr, 64, index );
    event_var_pos_fall_off_destroy( ptr_item );
    ptr_item = pointer_null;
    array_instance_remove_item( ptr, 64, index );
}
#endif // event_var_pos_fall_off_array_DEFINED


//-----------------------------------------------------------------------------
// event_var_pos_dist_min_array
//-----------------------------------------------------------------------------

#ifndef event_var_pos_dist_min_array_DEFINED
#define event_var_pos_dist_min_array_DEFINED

inline unsigned int event_var_pos_dist_min_array_num_items( const event_var_pos_dist_min_array & ptr )
{
    return array_instance_num_items( ptr );
}
inline void event_var_pos_dist_min_array_construct( const event_var_pos_dist_min_array & ptr )
{
    array_instance_construct( ptr, 64 );
}
inline const event_var_pos_dist_min event_var_pos_dist_min_array_item_at( const event_var_pos_dist_min_array & ptr, unsigned int index )
{
    return pointer_templ< _event_var_pos_dist_min>( array_instance_item_at( ptr, 64, index ) );
}
inline const event_var_pos_dist_min event_var_pos_dist_min_array_add_item( const event_var_pos_dist_min_array & ptr )
{
     event_var_pos_dist_min ptr_new_item = (event_var_pos_dist_min) array_instance_add_item( ptr, 64 );
     event_var_pos_dist_min_construct( ptr_new_item );
    return ptr_new_item;
}
inline void event_var_pos_dist_min_array_destroy( const event_var_pos_dist_min_array & ptr )
{
    unsigned int items = array_instance_num_items( ptr );
    for(unsigned int i = 0; i < items; i ++ )
    {
        event_var_pos_dist_min ptr_item = (event_var_pos_dist_min) array_instance_item_at( ptr, 64, i );
        event_var_pos_dist_min_destroy( ptr_item );
    }
    array_instance_destroy( ptr, 64 );
}
inline void event_var_pos_dist_min_array_remove_item( const event_var_pos_dist_min_array & ptr, unsigned int index)
{
    event_var_pos_dist_min ptr_item = (event_var_pos_dist_min) array_instance_item_at( ptr, 64, index );
    event_var_pos_dist_min_destroy( ptr_item );
    ptr_item = pointer_null;
    array_instance_remove_item( ptr, 64, index );
}
#endif // event_var_pos_dist_min_array_DEFINED


//-----------------------------------------------------------------------------
// event_var_pos_dist_max_array
//-----------------------------------------------------------------------------

#ifndef event_var_pos_dist_max_array_DEFINED
#define event_var_pos_dist_max_array_DEFINED

inline unsigned int event_var_pos_dist_max_array_num_items( const event_var_pos_dist_max_array & ptr )
{
    return array_instance_num_items( ptr );
}
inline void event_var_pos_dist_max_array_construct( const event_var_pos_dist_max_array & ptr )
{
    array_instance_construct( ptr, 64 );
}
inline const event_var_pos_dist_max event_var_pos_dist_max_array_item_at( const event_var_pos_dist_max_array & ptr, unsigned int index )
{
    return pointer_templ< _event_var_pos_dist_max>( array_instance_item_at( ptr, 64, index ) );
}
inline const event_var_pos_dist_max event_var_pos_dist_max_array_add_item( const event_var_pos_dist_max_array & ptr )
{
     event_var_pos_dist_max ptr_new_item = (event_var_pos_dist_max) array_instance_add_item( ptr, 64 );
     event_var_pos_dist_max_construct( ptr_new_item );
    return ptr_new_item;
}
inline void event_var_pos_dist_max_array_destroy( const event_var_pos_dist_max_array & ptr )
{
    unsigned int items = array_instance_num_items( ptr );
    for(unsigned int i = 0; i < items; i ++ )
    {
        event_var_pos_dist_max ptr_item = (event_var_pos_dist_max) array_instance_item_at( ptr, 64, i );
        event_var_pos_dist_max_destroy( ptr_item );
    }
    array_instance_destroy( ptr, 64 );
}
inline void event_var_pos_dist_max_array_remove_item( const event_var_pos_dist_max_array & ptr, unsigned int index)
{
    event_var_pos_dist_max ptr_item = (event_var_pos_dist_max) array_instance_item_at( ptr, 64, index );
    event_var_pos_dist_max_destroy( ptr_item );
    ptr_item = pointer_null;
    array_instance_remove_item( ptr, 64, index );
}
#endif // event_var_pos_dist_max_array_DEFINED


//-----------------------------------------------------------------------------
// event_callback_array
//-----------------------------------------------------------------------------

#ifndef event_callback_array_DEFINED
#define event_callback_array_DEFINED

inline unsigned int event_callback_array_num_items( const event_callback_array & ptr )
{
    return array_instance_num_items( ptr );
}
inline void event_callback_array_construct( const event_callback_array & ptr )
{
    array_instance_construct( ptr, 64 );
}
inline const event_callback event_callback_array_item_at( const event_callback_array & ptr, unsigned int index )
{
    return pointer_templ< _event_callback>( array_instance_item_at( ptr, 64, index ) );
}
inline const event_callback event_callback_array_add_item( const event_callback_array & ptr )
{
     event_callback ptr_new_item = (event_callback) array_instance_add_item( ptr, 64 );
     event_callback_construct( ptr_new_item );
    return ptr_new_item;
}
inline void event_callback_array_destroy( const event_callback_array & ptr )
{
    unsigned int items = array_instance_num_items( ptr );
    for(unsigned int i = 0; i < items; i ++ )
    {
        event_callback ptr_item = (event_callback) array_instance_item_at( ptr, 64, i );
        event_callback_destroy( ptr_item );
    }
    array_instance_destroy( ptr, 64 );
}
inline void event_callback_array_remove_item( const event_callback_array & ptr, unsigned int index)
{
    event_callback ptr_item = (event_callback) array_instance_item_at( ptr, 64, index );
    event_callback_destroy( ptr_item );
    ptr_item = pointer_null;
    array_instance_remove_item( ptr, 64, index );
}
#endif // event_callback_array_DEFINED


//-----------------------------------------------------------------------------
// event_logic_and_array
//-----------------------------------------------------------------------------

#ifndef event_logic_and_array_DEFINED
#define event_logic_and_array_DEFINED

inline unsigned int event_logic_and_array_num_items( const event_logic_and_array & ptr )
{
    return array_instance_num_items( ptr );
}
inline void event_logic_and_array_construct( const event_logic_and_array & ptr )
{
    array_instance_construct( ptr, 64 );
}
inline const event_logic_and event_logic_and_array_item_at( const event_logic_and_array & ptr, unsigned int index )
{
    return pointer_templ< _event_logic_and>( array_instance_item_at( ptr, 64, index ) );
}
inline const event_logic_and event_logic_and_array_add_item( const event_logic_and_array & ptr )
{
     event_logic_and ptr_new_item = (event_logic_and) array_instance_add_item( ptr, 64 );
     event_logic_and_construct( ptr_new_item );
    return ptr_new_item;
}
inline void event_logic_and_array_destroy( const event_logic_and_array & ptr )
{
    unsigned int items = array_instance_num_items( ptr );
    for(unsigned int i = 0; i < items; i ++ )
    {
        event_logic_and ptr_item = (event_logic_and) array_instance_item_at( ptr, 64, i );
        event_logic_and_destroy( ptr_item );
    }
    array_instance_destroy( ptr, 64 );
}
inline void event_logic_and_array_remove_item( const event_logic_and_array & ptr, unsigned int index)
{
    event_logic_and ptr_item = (event_logic_and) array_instance_item_at( ptr, 64, index );
    event_logic_and_destroy( ptr_item );
    ptr_item = pointer_null;
    array_instance_remove_item( ptr, 64, index );
}
#endif // event_logic_and_array_DEFINED


//-----------------------------------------------------------------------------
// event_logic_or_array
//-----------------------------------------------------------------------------

#ifndef event_logic_or_array_DEFINED
#define event_logic_or_array_DEFINED

inline unsigned int event_logic_or_array_num_items( const event_logic_or_array & ptr )
{
    return array_instance_num_items( ptr );
}
inline void event_logic_or_array_construct( const event_logic_or_array & ptr )
{
    array_instance_construct( ptr, 64 );
}
inline const event_logic_or event_logic_or_array_item_at( const event_logic_or_array & ptr, unsigned int index )
{
    return pointer_templ< _event_logic_or>( array_instance_item_at( ptr, 64, index ) );
}
inline const event_logic_or event_logic_or_array_add_item( const event_logic_or_array & ptr )
{
     event_logic_or ptr_new_item = (event_logic_or) array_instance_add_item( ptr, 64 );
     event_logic_or_construct( ptr_new_item );
    return ptr_new_item;
}
inline void event_logic_or_array_destroy( const event_logic_or_array & ptr )
{
    unsigned int items = array_instance_num_items( ptr );
    for(unsigned int i = 0; i < items; i ++ )
    {
        event_logic_or ptr_item = (event_logic_or) array_instance_item_at( ptr, 64, i );
        event_logic_or_destroy( ptr_item );
    }
    array_instance_destroy( ptr, 64 );
}
inline void event_logic_or_array_remove_item( const event_logic_or_array & ptr, unsigned int index)
{
    event_logic_or ptr_item = (event_logic_or) array_instance_item_at( ptr, 64, index );
    event_logic_or_destroy( ptr_item );
    ptr_item = pointer_null;
    array_instance_remove_item( ptr, 64, index );
}
#endif // event_logic_or_array_DEFINED


//-----------------------------------------------------------------------------
// event_logic_repeat_array
//-----------------------------------------------------------------------------

#ifndef event_logic_repeat_array_DEFINED
#define event_logic_repeat_array_DEFINED

inline unsigned int event_logic_repeat_array_num_items( const event_logic_repeat_array & ptr )
{
    return array_instance_num_items( ptr );
}
inline void event_logic_repeat_array_construct( const event_logic_repeat_array & ptr )
{
    array_instance_construct( ptr, 128 );
}
inline const event_logic_repeat event_logic_repeat_array_item_at( const event_logic_repeat_array & ptr, unsigned int index )
{
    return pointer_templ< _event_logic_repeat>( array_instance_item_at( ptr, 128, index ) );
}
inline const event_logic_repeat event_logic_repeat_array_add_item( const event_logic_repeat_array & ptr )
{
     event_logic_repeat ptr_new_item = (event_logic_repeat) array_instance_add_item( ptr, 128 );
     event_logic_repeat_construct( ptr_new_item );
    return ptr_new_item;
}
inline void event_logic_repeat_array_destroy( const event_logic_repeat_array & ptr )
{
    unsigned int items = array_instance_num_items( ptr );
    for(unsigned int i = 0; i < items; i ++ )
    {
        event_logic_repeat ptr_item = (event_logic_repeat) array_instance_item_at( ptr, 128, i );
        event_logic_repeat_destroy( ptr_item );
    }
    array_instance_destroy( ptr, 128 );
}
inline void event_logic_repeat_array_remove_item( const event_logic_repeat_array & ptr, unsigned int index)
{
    event_logic_repeat ptr_item = (event_logic_repeat) array_instance_item_at( ptr, 128, index );
    event_logic_repeat_destroy( ptr_item );
    ptr_item = pointer_null;
    array_instance_remove_item( ptr, 128, index );
}
#endif // event_logic_repeat_array_DEFINED


//-----------------------------------------------------------------------------
// play_region_action_array
//-----------------------------------------------------------------------------

#ifndef play_region_action_array_DEFINED
#define play_region_action_array_DEFINED

inline unsigned int play_region_action_array_num_items( const play_region_action_array & ptr )
{
    return array_instance_num_items( ptr );
}
inline void play_region_action_array_construct( const play_region_action_array & ptr )
{
    array_instance_construct( ptr, 96 );
}
inline const play_region_action play_region_action_array_item_at( const play_region_action_array & ptr, unsigned int index )
{
    return pointer_templ< _play_region_action>( array_instance_item_at( ptr, 96, index ) );
}
inline const play_region_action play_region_action_array_add_item( const play_region_action_array & ptr )
{
     play_region_action ptr_new_item = (play_region_action) array_instance_add_item( ptr, 96 );
     play_region_action_construct( ptr_new_item );
    return ptr_new_item;
}
inline void play_region_action_array_destroy( const play_region_action_array & ptr )
{
    unsigned int items = array_instance_num_items( ptr );
    for(unsigned int i = 0; i < items; i ++ )
    {
        play_region_action ptr_item = (play_region_action) array_instance_item_at( ptr, 96, i );
        play_region_action_destroy( ptr_item );
    }
    array_instance_destroy( ptr, 96 );
}
inline void play_region_action_array_remove_item( const play_region_action_array & ptr, unsigned int index)
{
    play_region_action ptr_item = (play_region_action) array_instance_item_at( ptr, 96, index );
    play_region_action_destroy( ptr_item );
    ptr_item = pointer_null;
    array_instance_remove_item( ptr, 96, index );
}
#endif // play_region_action_array_DEFINED


//-----------------------------------------------------------------------------
// push_region_action_array
//-----------------------------------------------------------------------------

#ifndef push_region_action_array_DEFINED
#define push_region_action_array_DEFINED

inline unsigned int push_region_action_array_num_items( const push_region_action_array & ptr )
{
    return array_instance_num_items( ptr );
}
inline void push_region_action_array_construct( const push_region_action_array & ptr )
{
    array_instance_construct( ptr, 128 );
}
inline const push_region_action push_region_action_array_item_at( const push_region_action_array & ptr, unsigned int index )
{
    return pointer_templ< _push_region_action>( array_instance_item_at( ptr, 128, index ) );
}
inline const push_region_action push_region_action_array_add_item( const push_region_action_array & ptr )
{
     push_region_action ptr_new_item = (push_region_action) array_instance_add_item( ptr, 128 );
     push_region_action_construct( ptr_new_item );
    return ptr_new_item;
}
inline void push_region_action_array_destroy( const push_region_action_array & ptr )
{
    unsigned int items = array_instance_num_items( ptr );
    for(unsigned int i = 0; i < items; i ++ )
    {
        push_region_action ptr_item = (push_region_action) array_instance_item_at( ptr, 128, i );
        push_region_action_destroy( ptr_item );
    }
    array_instance_destroy( ptr, 128 );
}
inline void push_region_action_array_remove_item( const push_region_action_array & ptr, unsigned int index)
{
    push_region_action ptr_item = (push_region_action) array_instance_item_at( ptr, 128, index );
    push_region_action_destroy( ptr_item );
    ptr_item = pointer_null;
    array_instance_remove_item( ptr, 128, index );
}
#endif // push_region_action_array_DEFINED


//-----------------------------------------------------------------------------
// pop_region_action_array
//-----------------------------------------------------------------------------

#ifndef pop_region_action_array_DEFINED
#define pop_region_action_array_DEFINED

inline unsigned int pop_region_action_array_num_items( const pop_region_action_array & ptr )
{
    return array_instance_num_items( ptr );
}
inline void pop_region_action_array_construct( const pop_region_action_array & ptr )
{
    array_instance_construct( ptr, 64 );
}
inline const pop_region_action pop_region_action_array_item_at( const pop_region_action_array & ptr, unsigned int index )
{
    return pointer_templ< _pop_region_action>( array_instance_item_at( ptr, 64, index ) );
}
inline const pop_region_action pop_region_action_array_add_item( const pop_region_action_array & ptr )
{
     pop_region_action ptr_new_item = (pop_region_action) array_instance_add_item( ptr, 64 );
     pop_region_action_construct( ptr_new_item );
    return ptr_new_item;
}
inline void pop_region_action_array_destroy( const pop_region_action_array & ptr )
{
    unsigned int items = array_instance_num_items( ptr );
    for(unsigned int i = 0; i < items; i ++ )
    {
        pop_region_action ptr_item = (pop_region_action) array_instance_item_at( ptr, 64, i );
        pop_region_action_destroy( ptr_item );
    }
    array_instance_destroy( ptr, 64 );
}
inline void pop_region_action_array_remove_item( const pop_region_action_array & ptr, unsigned int index)
{
    pop_region_action ptr_item = (pop_region_action) array_instance_item_at( ptr, 64, index );
    pop_region_action_destroy( ptr_item );
    ptr_item = pointer_null;
    array_instance_remove_item( ptr, 64, index );
}
#endif // pop_region_action_array_DEFINED


//-----------------------------------------------------------------------------
// start_layer_action_array
//-----------------------------------------------------------------------------

#ifndef start_layer_action_array_DEFINED
#define start_layer_action_array_DEFINED

inline unsigned int start_layer_action_array_num_items( const start_layer_action_array & ptr )
{
    return array_instance_num_items( ptr );
}
inline void start_layer_action_array_construct( const start_layer_action_array & ptr )
{
    array_instance_construct( ptr, 64 );
}
inline const start_layer_action start_layer_action_array_item_at( const start_layer_action_array & ptr, unsigned int index )
{
    return pointer_templ< _start_layer_action>( array_instance_item_at( ptr, 64, index ) );
}
inline const start_layer_action start_layer_action_array_add_item( const start_layer_action_array & ptr )
{
     start_layer_action ptr_new_item = (start_layer_action) array_instance_add_item( ptr, 64 );
     start_layer_action_construct( ptr_new_item );
    return ptr_new_item;
}
inline void start_layer_action_array_destroy( const start_layer_action_array & ptr )
{
    unsigned int items = array_instance_num_items( ptr );
    for(unsigned int i = 0; i < items; i ++ )
    {
        start_layer_action ptr_item = (start_layer_action) array_instance_item_at( ptr, 64, i );
        start_layer_action_destroy( ptr_item );
    }
    array_instance_destroy( ptr, 64 );
}
inline void start_layer_action_array_remove_item( const start_layer_action_array & ptr, unsigned int index)
{
    start_layer_action ptr_item = (start_layer_action) array_instance_item_at( ptr, 64, index );
    start_layer_action_destroy( ptr_item );
    ptr_item = pointer_null;
    array_instance_remove_item( ptr, 64, index );
}
#endif // start_layer_action_array_DEFINED


//-----------------------------------------------------------------------------
// stop_layer_action_array
//-----------------------------------------------------------------------------

#ifndef stop_layer_action_array_DEFINED
#define stop_layer_action_array_DEFINED

inline unsigned int stop_layer_action_array_num_items( const stop_layer_action_array & ptr )
{
    return array_instance_num_items( ptr );
}
inline void stop_layer_action_array_construct( const stop_layer_action_array & ptr )
{
    array_instance_construct( ptr, 64 );
}
inline const stop_layer_action stop_layer_action_array_item_at( const stop_layer_action_array & ptr, unsigned int index )
{
    return pointer_templ< _stop_layer_action>( array_instance_item_at( ptr, 64, index ) );
}
inline const stop_layer_action stop_layer_action_array_add_item( const stop_layer_action_array & ptr )
{
     stop_layer_action ptr_new_item = (stop_layer_action) array_instance_add_item( ptr, 64 );
     stop_layer_action_construct( ptr_new_item );
    return ptr_new_item;
}
inline void stop_layer_action_array_destroy( const stop_layer_action_array & ptr )
{
    unsigned int items = array_instance_num_items( ptr );
    for(unsigned int i = 0; i < items; i ++ )
    {
        stop_layer_action ptr_item = (stop_layer_action) array_instance_item_at( ptr, 64, i );
        stop_layer_action_destroy( ptr_item );
    }
    array_instance_destroy( ptr, 64 );
}
inline void stop_layer_action_array_remove_item( const stop_layer_action_array & ptr, unsigned int index)
{
    stop_layer_action ptr_item = (stop_layer_action) array_instance_item_at( ptr, 64, index );
    stop_layer_action_destroy( ptr_item );
    ptr_item = pointer_null;
    array_instance_remove_item( ptr, 64, index );
}
#endif // stop_layer_action_array_DEFINED


//-----------------------------------------------------------------------------
// rand_state_action_array
//-----------------------------------------------------------------------------

#ifndef rand_state_action_array_DEFINED
#define rand_state_action_array_DEFINED

inline unsigned int rand_state_action_array_num_items( const rand_state_action_array & ptr )
{
    return array_instance_num_items( ptr );
}
inline void rand_state_action_array_construct( const rand_state_action_array & ptr )
{
    array_instance_construct( ptr, 64 );
}
inline const rand_state_action rand_state_action_array_item_at( const rand_state_action_array & ptr, unsigned int index )
{
    return pointer_templ< _rand_state_action>( array_instance_item_at( ptr, 64, index ) );
}
inline const rand_state_action rand_state_action_array_add_item( const rand_state_action_array & ptr )
{
     rand_state_action ptr_new_item = (rand_state_action) array_instance_add_item( ptr, 64 );
     rand_state_action_construct( ptr_new_item );
    return ptr_new_item;
}
inline void rand_state_action_array_destroy( const rand_state_action_array & ptr )
{
    unsigned int items = array_instance_num_items( ptr );
    for(unsigned int i = 0; i < items; i ++ )
    {
        rand_state_action ptr_item = (rand_state_action) array_instance_item_at( ptr, 64, i );
        rand_state_action_destroy( ptr_item );
    }
    array_instance_destroy( ptr, 64 );
}
inline void rand_state_action_array_remove_item( const rand_state_action_array & ptr, unsigned int index)
{
    rand_state_action ptr_item = (rand_state_action) array_instance_item_at( ptr, 64, index );
    rand_state_action_destroy( ptr_item );
    ptr_item = pointer_null;
    array_instance_remove_item( ptr, 64, index );
}
#endif // rand_state_action_array_DEFINED


//-----------------------------------------------------------------------------
// stream_ref_array
//-----------------------------------------------------------------------------

#ifndef stream_ref_array_DEFINED
#define stream_ref_array_DEFINED

inline unsigned int stream_ref_array_num_items( const stream_ref_array & ptr )
{
    return array_instance_num_items( ptr );
}
inline void stream_ref_array_construct( const stream_ref_array & ptr )
{
    array_instance_construct( ptr, 32 );
}
inline const stream stream_ref_array_item_at( const stream_ref_array & ptr, unsigned int index )
{
    pointer ptr_item = array_instance_item_at( ptr, 32, index );
    return (stream) block_read_reference( ptr_item );
}
inline void stream_ref_array_add_item( const stream_ref_array & ptr, const stream & ptr_item )
{
     stream_ref ptr_new_item = (stream_ref) array_instance_add_item( ptr, 32 );
     block_write_reference( ptr_new_item, ptr_item );
}
inline void stream_ref_array_destroy( const stream_ref_array & ptr )
{
    unsigned int items = array_instance_num_items( ptr );
    for(unsigned int i = 0; i < items; i ++ )
    {
        stream_ref ptr_item = (stream_ref) array_instance_item_at( ptr, 32, i );
        stream_ref_destroy( ptr_item );
    }
    array_instance_destroy( ptr, 32 );
}
#endif // stream_ref_array_DEFINED


//-----------------------------------------------------------------------------
// clip_ref_array
//-----------------------------------------------------------------------------

#ifndef clip_ref_array_DEFINED
#define clip_ref_array_DEFINED

inline unsigned int clip_ref_array_num_items( const clip_ref_array & ptr )
{
    return array_instance_num_items( ptr );
}
inline void clip_ref_array_construct( const clip_ref_array & ptr )
{
    array_instance_construct( ptr, 32 );
}
inline const clip clip_ref_array_item_at( const clip_ref_array & ptr, unsigned int index )
{
    pointer ptr_item = array_instance_item_at( ptr, 32, index );
    return (clip) block_read_reference( ptr_item );
}
inline void clip_ref_array_add_item( const clip_ref_array & ptr, const clip & ptr_item )
{
     clip_ref ptr_new_item = (clip_ref) array_instance_add_item( ptr, 32 );
     block_write_reference( ptr_new_item, ptr_item );
}
inline void clip_ref_array_destroy( const clip_ref_array & ptr )
{
    unsigned int items = array_instance_num_items( ptr );
    for(unsigned int i = 0; i < items; i ++ )
    {
        clip_ref ptr_item = (clip_ref) array_instance_item_at( ptr, 32, i );
        clip_ref_destroy( ptr_item );
    }
    array_instance_destroy( ptr, 32 );
}
#endif // clip_ref_array_DEFINED


//-----------------------------------------------------------------------------
// region_ref_array
//-----------------------------------------------------------------------------

#ifndef region_ref_array_DEFINED
#define region_ref_array_DEFINED

inline unsigned int region_ref_array_num_items( const region_ref_array & ptr )
{
    return array_instance_num_items( ptr );
}
inline void region_ref_array_construct( const region_ref_array & ptr )
{
    array_instance_construct( ptr, 32 );
}
inline const region region_ref_array_item_at( const region_ref_array & ptr, unsigned int index )
{
    pointer ptr_item = array_instance_item_at( ptr, 32, index );
    return (region) block_read_reference( ptr_item );
}
inline void region_ref_array_add_item( const region_ref_array & ptr, const region & ptr_item )
{
     region_ref ptr_new_item = (region_ref) array_instance_add_item( ptr, 32 );
     block_write_reference( ptr_new_item, ptr_item );
}
inline void region_ref_array_destroy( const region_ref_array & ptr )
{
    unsigned int items = array_instance_num_items( ptr );
    for(unsigned int i = 0; i < items; i ++ )
    {
        region_ref ptr_item = (region_ref) array_instance_item_at( ptr, 32, i );
        region_ref_destroy( ptr_item );
    }
    array_instance_destroy( ptr, 32 );
}
#endif // region_ref_array_DEFINED


//-----------------------------------------------------------------------------
// state_ref_array
//-----------------------------------------------------------------------------

#ifndef state_ref_array_DEFINED
#define state_ref_array_DEFINED

inline unsigned int state_ref_array_num_items( const state_ref_array & ptr )
{
    return array_instance_num_items( ptr );
}
inline void state_ref_array_construct( const state_ref_array & ptr )
{
    array_instance_construct( ptr, 32 );
}
inline const state state_ref_array_item_at( const state_ref_array & ptr, unsigned int index )
{
    pointer ptr_item = array_instance_item_at( ptr, 32, index );
    return (state) block_read_reference( ptr_item );
}
inline void state_ref_array_add_item( const state_ref_array & ptr, const state & ptr_item )
{
     state_ref ptr_new_item = (state_ref) array_instance_add_item( ptr, 32 );
     block_write_reference( ptr_new_item, ptr_item );
}
inline void state_ref_array_destroy( const state_ref_array & ptr )
{
    unsigned int items = array_instance_num_items( ptr );
    for(unsigned int i = 0; i < items; i ++ )
    {
        state_ref ptr_item = (state_ref) array_instance_item_at( ptr, 32, i );
        state_ref_destroy( ptr_item );
    }
    array_instance_destroy( ptr, 32 );
}
#endif // state_ref_array_DEFINED


//-----------------------------------------------------------------------------
// action_ref_array
//-----------------------------------------------------------------------------

#ifndef action_ref_array_DEFINED
#define action_ref_array_DEFINED

inline unsigned int action_ref_array_num_items( const action_ref_array & ptr )
{
    return array_instance_num_items( ptr );
}
inline void action_ref_array_construct( const action_ref_array & ptr )
{
    array_instance_construct( ptr, 32 );
}
inline const action action_ref_array_item_at( const action_ref_array & ptr, unsigned int index )
{
    pointer ptr_item = array_instance_item_at( ptr, 32, index );
    return (action) block_read_reference( ptr_item );
}
inline void action_ref_array_add_item( const action_ref_array & ptr, const action & ptr_item )
{
     action_ref ptr_new_item = (action_ref) array_instance_add_item( ptr, 32 );
     block_write_reference( ptr_new_item, ptr_item );
}
inline void action_ref_array_destroy( const action_ref_array & ptr )
{
    unsigned int items = array_instance_num_items( ptr );
    for(unsigned int i = 0; i < items; i ++ )
    {
        action_ref ptr_item = (action_ref) array_instance_item_at( ptr, 32, i );
        action_ref_destroy( ptr_item );
    }
    array_instance_destroy( ptr, 32 );
}
#endif // action_ref_array_DEFINED


//-----------------------------------------------------------------------------
// action_ref_array_array
//-----------------------------------------------------------------------------

#ifndef action_ref_array_array_DEFINED
#define action_ref_array_array_DEFINED

inline unsigned int action_ref_array_array_num_items( const action_ref_array_array & ptr )
{
    return array_instance_num_items( ptr );
}
inline void action_ref_array_array_construct( const action_ref_array_array & ptr )
{
    array_instance_construct( ptr, 32 );
}
inline const action_ref_array action_ref_array_array_item_at( const action_ref_array_array & ptr, unsigned int index )
{
    return pointer_templ< _action_ref_array>( array_instance_item_at( ptr, 32, index ) );
}
inline const action_ref_array action_ref_array_array_add_item( const action_ref_array_array & ptr )
{
     action_ref_array ptr_new_item = (action_ref_array) array_instance_add_item( ptr, 32 );
     action_ref_array_construct( ptr_new_item );
    return ptr_new_item;
}
inline void action_ref_array_array_destroy( const action_ref_array_array & ptr )
{
    unsigned int items = array_instance_num_items( ptr );
    for(unsigned int i = 0; i < items; i ++ )
    {
        action_ref_array ptr_item = (action_ref_array) array_instance_item_at( ptr, 32, i );
        action_ref_array_destroy( ptr_item );
    }
    array_instance_destroy( ptr, 32 );
}
inline void action_ref_array_array_remove_item( const action_ref_array_array & ptr, unsigned int index)
{
    action_ref_array ptr_item = (action_ref_array) array_instance_item_at( ptr, 32, index );
    action_ref_array_destroy( ptr_item );
    ptr_item = pointer_null;
    array_instance_remove_item( ptr, 32, index );
}
#endif // action_ref_array_array_DEFINED


//-----------------------------------------------------------------------------
// string_array
//-----------------------------------------------------------------------------

#ifndef string_array_DEFINED
#define string_array_DEFINED

inline unsigned int string_array_num_items( const string_array & ptr )
{
    return array_instance_num_items( ptr );
}
inline void string_array_construct( const string_array & ptr )
{
    array_instance_construct( ptr, 32 );
}
inline void string_array_item_at( const string_array & ptr, unsigned int index, char * p_string, unsigned int len )
{
    return string_instance_read( array_instance_item_at( ptr, 32, index ), p_string, len );
}
inline void string_array_item_at( const string_array & ptr, unsigned int index, const char * p_new_val )
{
    pointer ptr_item = array_instance_item_at( ptr, 32, index );
    string_instance_destroy( ptr_item );
    string_instance_construct( ptr_item );
    string_instance_write( ptr_item, p_new_val );
}
inline void string_array_add_item( const string_array & ptr, const char * p_string )
{
    pointer ptr_new_item = array_instance_add_item( ptr, 32 );
    string_instance_construct( ptr_new_item );
    string_instance_write( ptr_new_item, p_string );
}
inline void string_array_remove_item( const string_array & ptr, unsigned int index )
{
    pointer ptr_item = array_instance_item_at( ptr, 32, index );
    string_instance_destroy( ptr_item );
    ptr_item = pointer_null;
    array_instance_remove_item( ptr, 32, index );
}
inline void string_array_destroy( const string_array & ptr )
{
    unsigned int items = array_instance_num_items( ptr );
    for(unsigned int i = 0; i < items; i ++ )
    {
        pointer ptr_item = array_instance_item_at( ptr, 32, i );
        string_instance_destroy( ptr_item );
    }
    array_instance_destroy( ptr, 32 );
}
#endif // string_array_DEFINED


//-----------------------------------------------------------------------------
// layer_ref_array
//-----------------------------------------------------------------------------

#ifndef layer_ref_array_DEFINED
#define layer_ref_array_DEFINED

inline unsigned int layer_ref_array_num_items( const layer_ref_array & ptr )
{
    return array_instance_num_items( ptr );
}
inline void layer_ref_array_construct( const layer_ref_array & ptr )
{
    array_instance_construct( ptr, 32 );
}
inline const layer layer_ref_array_item_at( const layer_ref_array & ptr, unsigned int index )
{
    pointer ptr_item = array_instance_item_at( ptr, 32, index );
    return (layer) block_read_reference( ptr_item );
}
inline void layer_ref_array_add_item( const layer_ref_array & ptr, const layer & ptr_item )
{
     layer_ref ptr_new_item = (layer_ref) array_instance_add_item( ptr, 32 );
     block_write_reference( ptr_new_item, ptr_item );
}
inline void layer_ref_array_destroy( const layer_ref_array & ptr )
{
    unsigned int items = array_instance_num_items( ptr );
    for(unsigned int i = 0; i < items; i ++ )
    {
        layer_ref ptr_item = (layer_ref) array_instance_item_at( ptr, 32, i );
        layer_ref_destroy( ptr_item );
    }
    array_instance_destroy( ptr, 32 );
}
#endif // layer_ref_array_DEFINED


//-----------------------------------------------------------------------------
// float_array
//-----------------------------------------------------------------------------

#ifndef float_array_DEFINED
#define float_array_DEFINED

inline unsigned int float_array_num_items( const float_array & ptr )
{
    return array_instance_num_items( ptr );
}
inline void float_array_construct( const float_array & ptr )
{
    array_instance_construct( ptr, 32 );
}
inline const float float_array_item_at( const float_array & ptr, unsigned int index )
{
    return float_instance_read( array_instance_item_at( ptr, 32, index ) );
}
inline void float_array_add_item( const float_array & ptr, float item )
{
    float_instance_write( array_instance_add_item( ptr, 32 ), item );
}
inline void float_array_destroy( const float_array & ptr )
{
    array_instance_destroy( ptr, 32 );
}
#endif // float_array_DEFINED


//-----------------------------------------------------------------------------
// sequence_event_ref_array
//-----------------------------------------------------------------------------

#ifndef sequence_event_ref_array_DEFINED
#define sequence_event_ref_array_DEFINED

inline unsigned int sequence_event_ref_array_num_items( const sequence_event_ref_array & ptr )
{
    return array_instance_num_items( ptr );
}
inline void sequence_event_ref_array_construct( const sequence_event_ref_array & ptr )
{
    array_instance_construct( ptr, 32 );
}
inline const sequence_event sequence_event_ref_array_item_at( const sequence_event_ref_array & ptr, unsigned int index )
{
    pointer ptr_item = array_instance_item_at( ptr, 32, index );
    return (sequence_event) block_read_reference( ptr_item );
}
inline void sequence_event_ref_array_add_item( const sequence_event_ref_array & ptr, const sequence_event & ptr_item )
{
     sequence_event_ref ptr_new_item = (sequence_event_ref) array_instance_add_item( ptr, 32 );
     block_write_reference( ptr_new_item, ptr_item );
}
inline void sequence_event_ref_array_destroy( const sequence_event_ref_array & ptr )
{
    unsigned int items = array_instance_num_items( ptr );
    for(unsigned int i = 0; i < items; i ++ )
    {
        sequence_event_ref ptr_item = (sequence_event_ref) array_instance_item_at( ptr, 32, i );
        sequence_event_ref_destroy( ptr_item );
    }
    array_instance_destroy( ptr, 32 );
}
#endif // sequence_event_ref_array_DEFINED
}
#endif
